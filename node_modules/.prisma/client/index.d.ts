
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Pet
 * 
 */
export type Pet = $Result.DefaultSelection<Prisma.$PetPayload>
/**
 * Model Policy
 * 
 */
export type Policy = $Result.DefaultSelection<Prisma.$PolicyPayload>
/**
 * Model Plan
 * 
 */
export type Plan = $Result.DefaultSelection<Prisma.$PlanPayload>
/**
 * Model PlanCoverage
 * 
 */
export type PlanCoverage = $Result.DefaultSelection<Prisma.$PlanCoveragePayload>
/**
 * Model Coverage
 * 
 */
export type Coverage = $Result.DefaultSelection<Prisma.$CoveragePayload>
/**
 * Model Procedure
 * 
 */
export type Procedure = $Result.DefaultSelection<Prisma.$ProcedurePayload>
/**
 * Model ProcedureByPlan
 * 
 */
export type ProcedureByPlan = $Result.DefaultSelection<Prisma.$ProcedureByPlanPayload>
/**
 * Model PolicyProcedure
 * 
 */
export type PolicyProcedure = $Result.DefaultSelection<Prisma.$PolicyProcedurePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.pet`: Exposes CRUD operations for the **Pet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Pets
    * const pets = await prisma.pet.findMany()
    * ```
    */
  get pet(): Prisma.PetDelegate<ExtArgs>;

  /**
   * `prisma.policy`: Exposes CRUD operations for the **Policy** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Policies
    * const policies = await prisma.policy.findMany()
    * ```
    */
  get policy(): Prisma.PolicyDelegate<ExtArgs>;

  /**
   * `prisma.plan`: Exposes CRUD operations for the **Plan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Plans
    * const plans = await prisma.plan.findMany()
    * ```
    */
  get plan(): Prisma.PlanDelegate<ExtArgs>;

  /**
   * `prisma.planCoverage`: Exposes CRUD operations for the **PlanCoverage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PlanCoverages
    * const planCoverages = await prisma.planCoverage.findMany()
    * ```
    */
  get planCoverage(): Prisma.PlanCoverageDelegate<ExtArgs>;

  /**
   * `prisma.coverage`: Exposes CRUD operations for the **Coverage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Coverages
    * const coverages = await prisma.coverage.findMany()
    * ```
    */
  get coverage(): Prisma.CoverageDelegate<ExtArgs>;

  /**
   * `prisma.procedure`: Exposes CRUD operations for the **Procedure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Procedures
    * const procedures = await prisma.procedure.findMany()
    * ```
    */
  get procedure(): Prisma.ProcedureDelegate<ExtArgs>;

  /**
   * `prisma.procedureByPlan`: Exposes CRUD operations for the **ProcedureByPlan** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProcedureByPlans
    * const procedureByPlans = await prisma.procedureByPlan.findMany()
    * ```
    */
  get procedureByPlan(): Prisma.ProcedureByPlanDelegate<ExtArgs>;

  /**
   * `prisma.policyProcedure`: Exposes CRUD operations for the **PolicyProcedure** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PolicyProcedures
    * const policyProcedures = await prisma.policyProcedure.findMany()
    * ```
    */
  get policyProcedure(): Prisma.PolicyProcedureDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.address`: Exposes CRUD operations for the **Address** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Addresses
    * const addresses = await prisma.address.findMany()
    * ```
    */
  get address(): Prisma.AddressDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: efd2449663b3d73d637ea1fd226bafbcf45b3102
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Pet: 'Pet',
    Policy: 'Policy',
    Plan: 'Plan',
    PlanCoverage: 'PlanCoverage',
    Coverage: 'Coverage',
    Procedure: 'Procedure',
    ProcedureByPlan: 'ProcedureByPlan',
    PolicyProcedure: 'PolicyProcedure',
    Account: 'Account',
    Address: 'Address'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'pet' | 'policy' | 'plan' | 'planCoverage' | 'coverage' | 'procedure' | 'procedureByPlan' | 'policyProcedure' | 'account' | 'address'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Pet: {
        payload: Prisma.$PetPayload<ExtArgs>
        fields: Prisma.PetFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PetFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PetFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findFirst: {
            args: Prisma.PetFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PetFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          findMany: {
            args: Prisma.PetFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>[]
          }
          create: {
            args: Prisma.PetCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          delete: {
            args: Prisma.PetDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          update: {
            args: Prisma.PetUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          deleteMany: {
            args: Prisma.PetDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PetUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PetUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PetPayload>
          }
          aggregate: {
            args: Prisma.PetAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePet>
          }
          groupBy: {
            args: Prisma.PetGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PetGroupByOutputType>[]
          }
          count: {
            args: Prisma.PetCountArgs<ExtArgs>,
            result: $Utils.Optional<PetCountAggregateOutputType> | number
          }
        }
      }
      Policy: {
        payload: Prisma.$PolicyPayload<ExtArgs>
        fields: Prisma.PolicyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PolicyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PolicyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          findFirst: {
            args: Prisma.PolicyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PolicyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          findMany: {
            args: Prisma.PolicyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>[]
          }
          create: {
            args: Prisma.PolicyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          delete: {
            args: Prisma.PolicyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          update: {
            args: Prisma.PolicyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          deleteMany: {
            args: Prisma.PolicyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PolicyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PolicyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyPayload>
          }
          aggregate: {
            args: Prisma.PolicyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePolicy>
          }
          groupBy: {
            args: Prisma.PolicyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PolicyGroupByOutputType>[]
          }
          count: {
            args: Prisma.PolicyCountArgs<ExtArgs>,
            result: $Utils.Optional<PolicyCountAggregateOutputType> | number
          }
        }
      }
      Plan: {
        payload: Prisma.$PlanPayload<ExtArgs>
        fields: Prisma.PlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findFirst: {
            args: Prisma.PlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          findMany: {
            args: Prisma.PlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>[]
          }
          create: {
            args: Prisma.PlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          delete: {
            args: Prisma.PlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          update: {
            args: Prisma.PlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          deleteMany: {
            args: Prisma.PlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanPayload>
          }
          aggregate: {
            args: Prisma.PlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlan>
          }
          groupBy: {
            args: Prisma.PlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCountArgs<ExtArgs>,
            result: $Utils.Optional<PlanCountAggregateOutputType> | number
          }
        }
      }
      PlanCoverage: {
        payload: Prisma.$PlanCoveragePayload<ExtArgs>
        fields: Prisma.PlanCoverageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlanCoverageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlanCoverageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>
          }
          findFirst: {
            args: Prisma.PlanCoverageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlanCoverageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>
          }
          findMany: {
            args: Prisma.PlanCoverageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>[]
          }
          create: {
            args: Prisma.PlanCoverageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>
          }
          delete: {
            args: Prisma.PlanCoverageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>
          }
          update: {
            args: Prisma.PlanCoverageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>
          }
          deleteMany: {
            args: Prisma.PlanCoverageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PlanCoverageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PlanCoverageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PlanCoveragePayload>
          }
          aggregate: {
            args: Prisma.PlanCoverageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePlanCoverage>
          }
          groupBy: {
            args: Prisma.PlanCoverageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PlanCoverageGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlanCoverageCountArgs<ExtArgs>,
            result: $Utils.Optional<PlanCoverageCountAggregateOutputType> | number
          }
        }
      }
      Coverage: {
        payload: Prisma.$CoveragePayload<ExtArgs>
        fields: Prisma.CoverageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CoverageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CoverageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>
          }
          findFirst: {
            args: Prisma.CoverageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CoverageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>
          }
          findMany: {
            args: Prisma.CoverageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>[]
          }
          create: {
            args: Prisma.CoverageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>
          }
          delete: {
            args: Prisma.CoverageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>
          }
          update: {
            args: Prisma.CoverageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>
          }
          deleteMany: {
            args: Prisma.CoverageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CoverageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CoverageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CoveragePayload>
          }
          aggregate: {
            args: Prisma.CoverageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCoverage>
          }
          groupBy: {
            args: Prisma.CoverageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CoverageGroupByOutputType>[]
          }
          count: {
            args: Prisma.CoverageCountArgs<ExtArgs>,
            result: $Utils.Optional<CoverageCountAggregateOutputType> | number
          }
        }
      }
      Procedure: {
        payload: Prisma.$ProcedurePayload<ExtArgs>
        fields: Prisma.ProcedureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcedureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcedureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>
          }
          findFirst: {
            args: Prisma.ProcedureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcedureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>
          }
          findMany: {
            args: Prisma.ProcedureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>[]
          }
          create: {
            args: Prisma.ProcedureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>
          }
          delete: {
            args: Prisma.ProcedureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>
          }
          update: {
            args: Prisma.ProcedureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>
          }
          deleteMany: {
            args: Prisma.ProcedureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProcedureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProcedureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedurePayload>
          }
          aggregate: {
            args: Prisma.ProcedureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProcedure>
          }
          groupBy: {
            args: Prisma.ProcedureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProcedureGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcedureCountArgs<ExtArgs>,
            result: $Utils.Optional<ProcedureCountAggregateOutputType> | number
          }
        }
      }
      ProcedureByPlan: {
        payload: Prisma.$ProcedureByPlanPayload<ExtArgs>
        fields: Prisma.ProcedureByPlanFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProcedureByPlanFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProcedureByPlanFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>
          }
          findFirst: {
            args: Prisma.ProcedureByPlanFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProcedureByPlanFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>
          }
          findMany: {
            args: Prisma.ProcedureByPlanFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>[]
          }
          create: {
            args: Prisma.ProcedureByPlanCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>
          }
          delete: {
            args: Prisma.ProcedureByPlanDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>
          }
          update: {
            args: Prisma.ProcedureByPlanUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>
          }
          deleteMany: {
            args: Prisma.ProcedureByPlanDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProcedureByPlanUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProcedureByPlanUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ProcedureByPlanPayload>
          }
          aggregate: {
            args: Prisma.ProcedureByPlanAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProcedureByPlan>
          }
          groupBy: {
            args: Prisma.ProcedureByPlanGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProcedureByPlanGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProcedureByPlanCountArgs<ExtArgs>,
            result: $Utils.Optional<ProcedureByPlanCountAggregateOutputType> | number
          }
        }
      }
      PolicyProcedure: {
        payload: Prisma.$PolicyProcedurePayload<ExtArgs>
        fields: Prisma.PolicyProcedureFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PolicyProcedureFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PolicyProcedureFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>
          }
          findFirst: {
            args: Prisma.PolicyProcedureFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PolicyProcedureFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>
          }
          findMany: {
            args: Prisma.PolicyProcedureFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>[]
          }
          create: {
            args: Prisma.PolicyProcedureCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>
          }
          delete: {
            args: Prisma.PolicyProcedureDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>
          }
          update: {
            args: Prisma.PolicyProcedureUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>
          }
          deleteMany: {
            args: Prisma.PolicyProcedureDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PolicyProcedureUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PolicyProcedureUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PolicyProcedurePayload>
          }
          aggregate: {
            args: Prisma.PolicyProcedureAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePolicyProcedure>
          }
          groupBy: {
            args: Prisma.PolicyProcedureGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PolicyProcedureGroupByOutputType>[]
          }
          count: {
            args: Prisma.PolicyProcedureCountArgs<ExtArgs>,
            result: $Utils.Optional<PolicyProcedureCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Address: {
        payload: Prisma.$AddressPayload<ExtArgs>
        fields: Prisma.AddressFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AddressFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AddressFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findFirst: {
            args: Prisma.AddressFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AddressFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          findMany: {
            args: Prisma.AddressFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>[]
          }
          create: {
            args: Prisma.AddressCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          delete: {
            args: Prisma.AddressDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          update: {
            args: Prisma.AddressUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          deleteMany: {
            args: Prisma.AddressDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AddressUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AddressUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AddressPayload>
          }
          aggregate: {
            args: Prisma.AddressAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAddress>
          }
          groupBy: {
            args: Prisma.AddressGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AddressGroupByOutputType>[]
          }
          count: {
            args: Prisma.AddressCountArgs<ExtArgs>,
            result: $Utils.Optional<AddressCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    addresses: number
    pets: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    addresses?: boolean | UserCountOutputTypeCountAddressesArgs
    pets?: boolean | UserCountOutputTypeCountPetsArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAddressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPetsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
  }



  /**
   * Count Type PolicyCountOutputType
   */

  export type PolicyCountOutputType = {
    policyCoverages: number
  }

  export type PolicyCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    policyCoverages?: boolean | PolicyCountOutputTypeCountPolicyCoveragesArgs
  }

  // Custom InputTypes

  /**
   * PolicyCountOutputType without action
   */
  export type PolicyCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyCountOutputType
     */
    select?: PolicyCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PolicyCountOutputType without action
   */
  export type PolicyCountOutputTypeCountPolicyCoveragesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyProcedureWhereInput
  }



  /**
   * Count Type PlanCountOutputType
   */

  export type PlanCountOutputType = {
    policies: number
    proceduresByPlan: number
    coverages: number
  }

  export type PlanCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    policies?: boolean | PlanCountOutputTypeCountPoliciesArgs
    proceduresByPlan?: boolean | PlanCountOutputTypeCountProceduresByPlanArgs
    coverages?: boolean | PlanCountOutputTypeCountCoveragesArgs
  }

  // Custom InputTypes

  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCountOutputType
     */
    select?: PlanCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountPoliciesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyWhereInput
  }


  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountProceduresByPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcedureByPlanWhereInput
  }


  /**
   * PlanCountOutputType without action
   */
  export type PlanCountOutputTypeCountCoveragesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanCoverageWhereInput
  }



  /**
   * Count Type CoverageCountOutputType
   */

  export type CoverageCountOutputType = {
    plans: number
    procedures: number
  }

  export type CoverageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plans?: boolean | CoverageCountOutputTypeCountPlansArgs
    procedures?: boolean | CoverageCountOutputTypeCountProceduresArgs
  }

  // Custom InputTypes

  /**
   * CoverageCountOutputType without action
   */
  export type CoverageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CoverageCountOutputType
     */
    select?: CoverageCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CoverageCountOutputType without action
   */
  export type CoverageCountOutputTypeCountPlansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanCoverageWhereInput
  }


  /**
   * CoverageCountOutputType without action
   */
  export type CoverageCountOutputTypeCountProceduresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcedureWhereInput
  }



  /**
   * Count Type ProcedureCountOutputType
   */

  export type ProcedureCountOutputType = {
    proceduresByPlan: number
    policiesProcedure: number
  }

  export type ProcedureCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    proceduresByPlan?: boolean | ProcedureCountOutputTypeCountProceduresByPlanArgs
    policiesProcedure?: boolean | ProcedureCountOutputTypeCountPoliciesProcedureArgs
  }

  // Custom InputTypes

  /**
   * ProcedureCountOutputType without action
   */
  export type ProcedureCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureCountOutputType
     */
    select?: ProcedureCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProcedureCountOutputType without action
   */
  export type ProcedureCountOutputTypeCountProceduresByPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcedureByPlanWhereInput
  }


  /**
   * ProcedureCountOutputType without action
   */
  export type ProcedureCountOutputTypeCountPoliciesProcedureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyProcedureWhereInput
  }



  /**
   * Count Type AccountCountOutputType
   */

  export type AccountCountOutputType = {
    users: number
  }

  export type AccountCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | AccountCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes

  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AccountCountOutputType
     */
    select?: AccountCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * AccountCountOutputType without action
   */
  export type AccountCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    accountId: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    accountId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    password: string | null
    accountId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    password: number
    accountId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    accountId?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    accountId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    accountId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    password?: true
    accountId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string
    password: string
    accountId: number | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    accountId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    account?: boolean | User$accountArgs<ExtArgs>
    addresses?: boolean | User$addressesArgs<ExtArgs>
    pets?: boolean | User$petsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    password?: boolean
    accountId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    account?: boolean | User$accountArgs<ExtArgs>
    addresses?: boolean | User$addressesArgs<ExtArgs>
    pets?: boolean | User$petsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      account: Prisma.$AccountPayload<ExtArgs> | null
      addresses: Prisma.$AddressPayload<ExtArgs>[]
      pets: Prisma.$PetPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      email: string
      password: string
      accountId: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    account<T extends User$accountArgs<ExtArgs> = {}>(args?: Subset<T, User$accountArgs<ExtArgs>>): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    addresses<T extends User$addressesArgs<ExtArgs> = {}>(args?: Subset<T, User$addressesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'> | Null>;

    pets<T extends User$petsArgs<ExtArgs> = {}>(args?: Subset<T, User$petsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly accountId: FieldRef<"User", 'Int'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.account
   */
  export type User$accountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
  }


  /**
   * User.addresses
   */
  export type User$addressesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    cursor?: AddressWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * User.pets
   */
  export type User$petsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    where?: PetWhereInput
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    cursor?: PetWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Pet
   */

  export type AggregatePet = {
    _count: PetCountAggregateOutputType | null
    _avg: PetAvgAggregateOutputType | null
    _sum: PetSumAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  export type PetAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PetSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type PetMinAggregateOutputType = {
    id: number | null
    type: string | null
    name: string | null
    breed: string | null
    birthDate: Date | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PetMaxAggregateOutputType = {
    id: number | null
    type: string | null
    name: string | null
    breed: string | null
    birthDate: Date | null
    userId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PetCountAggregateOutputType = {
    id: number
    type: number
    name: number
    breed: number
    birthDate: number
    userId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PetAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PetSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type PetMinAggregateInputType = {
    id?: true
    type?: true
    name?: true
    breed?: true
    birthDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PetMaxAggregateInputType = {
    id?: true
    type?: true
    name?: true
    breed?: true
    birthDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PetCountAggregateInputType = {
    id?: true
    type?: true
    name?: true
    breed?: true
    birthDate?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PetAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pet to aggregate.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Pets
    **/
    _count?: true | PetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PetMaxAggregateInputType
  }

  export type GetPetAggregateType<T extends PetAggregateArgs> = {
        [P in keyof T & keyof AggregatePet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePet[P]>
      : GetScalarType<T[P], AggregatePet[P]>
  }




  export type PetGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PetWhereInput
    orderBy?: PetOrderByWithAggregationInput | PetOrderByWithAggregationInput[]
    by: PetScalarFieldEnum[] | PetScalarFieldEnum
    having?: PetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PetCountAggregateInputType | true
    _avg?: PetAvgAggregateInputType
    _sum?: PetSumAggregateInputType
    _min?: PetMinAggregateInputType
    _max?: PetMaxAggregateInputType
  }

  export type PetGroupByOutputType = {
    id: number
    type: string
    name: string
    breed: string
    birthDate: Date
    userId: number
    createdAt: Date
    updatedAt: Date
    _count: PetCountAggregateOutputType | null
    _avg: PetAvgAggregateOutputType | null
    _sum: PetSumAggregateOutputType | null
    _min: PetMinAggregateOutputType | null
    _max: PetMaxAggregateOutputType | null
  }

  type GetPetGroupByPayload<T extends PetGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PetGroupByOutputType[P]>
            : GetScalarType<T[P], PetGroupByOutputType[P]>
        }
      >
    >


  export type PetSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    type?: boolean
    name?: boolean
    breed?: boolean
    birthDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    policy?: boolean | Pet$policyArgs<ExtArgs>
  }, ExtArgs["result"]["pet"]>

  export type PetSelectScalar = {
    id?: boolean
    type?: boolean
    name?: boolean
    breed?: boolean
    birthDate?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PetInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    policy?: boolean | Pet$policyArgs<ExtArgs>
  }


  export type $PetPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Pet"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      policy: Prisma.$PolicyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      type: string
      name: string
      breed: string
      birthDate: Date
      userId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["pet"]>
    composites: {}
  }


  type PetGetPayload<S extends boolean | null | undefined | PetDefaultArgs> = $Result.GetResult<Prisma.$PetPayload, S>

  type PetCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PetFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PetCountAggregateInputType | true
    }

  export interface PetDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Pet'], meta: { name: 'Pet' } }
    /**
     * Find zero or one Pet that matches the filter.
     * @param {PetFindUniqueArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PetFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PetFindUniqueArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Pet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PetFindUniqueOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PetFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Pet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PetFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindFirstArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Pet that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindFirstOrThrowArgs} args - Arguments to find a Pet
     * @example
     * // Get one Pet
     * const pet = await prisma.pet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PetFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Pets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Pets
     * const pets = await prisma.pet.findMany()
     * 
     * // Get first 10 Pets
     * const pets = await prisma.pet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const petWithIdOnly = await prisma.pet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PetFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Pet.
     * @param {PetCreateArgs} args - Arguments to create a Pet.
     * @example
     * // Create one Pet
     * const Pet = await prisma.pet.create({
     *   data: {
     *     // ... data to create a Pet
     *   }
     * })
     * 
    **/
    create<T extends PetCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PetCreateArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Pet.
     * @param {PetDeleteArgs} args - Arguments to delete one Pet.
     * @example
     * // Delete one Pet
     * const Pet = await prisma.pet.delete({
     *   where: {
     *     // ... filter to delete one Pet
     *   }
     * })
     * 
    **/
    delete<T extends PetDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PetDeleteArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Pet.
     * @param {PetUpdateArgs} args - Arguments to update one Pet.
     * @example
     * // Update one Pet
     * const pet = await prisma.pet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PetUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpdateArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Pets.
     * @param {PetDeleteManyArgs} args - Arguments to filter Pets to delete.
     * @example
     * // Delete a few Pets
     * const { count } = await prisma.pet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PetDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PetDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Pets
     * const pet = await prisma.pet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PetUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Pet.
     * @param {PetUpsertArgs} args - Arguments to update or create a Pet.
     * @example
     * // Update or create a Pet
     * const pet = await prisma.pet.upsert({
     *   create: {
     *     // ... data to create a Pet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Pet we want to update
     *   }
     * })
    **/
    upsert<T extends PetUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PetUpsertArgs<ExtArgs>>
    ): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Pets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetCountArgs} args - Arguments to filter Pets to count.
     * @example
     * // Count the number of Pets
     * const count = await prisma.pet.count({
     *   where: {
     *     // ... the filter for the Pets we want to count
     *   }
     * })
    **/
    count<T extends PetCountArgs>(
      args?: Subset<T, PetCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PetAggregateArgs>(args: Subset<T, PetAggregateArgs>): Prisma.PrismaPromise<GetPetAggregateType<T>>

    /**
     * Group by Pet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PetGroupByArgs['orderBy'] }
        : { orderBy?: PetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPetGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Pet model
   */
  readonly fields: PetFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Pet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PetClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    policy<T extends Pet$policyArgs<ExtArgs> = {}>(args?: Subset<T, Pet$policyArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Pet model
   */ 
  interface PetFieldRefs {
    readonly id: FieldRef<"Pet", 'Int'>
    readonly type: FieldRef<"Pet", 'String'>
    readonly name: FieldRef<"Pet", 'String'>
    readonly breed: FieldRef<"Pet", 'String'>
    readonly birthDate: FieldRef<"Pet", 'DateTime'>
    readonly userId: FieldRef<"Pet", 'Int'>
    readonly createdAt: FieldRef<"Pet", 'DateTime'>
    readonly updatedAt: FieldRef<"Pet", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Pet findUnique
   */
  export type PetFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet findUniqueOrThrow
   */
  export type PetFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet findFirst
   */
  export type PetFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * Pet findFirstOrThrow
   */
  export type PetFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pet to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Pets.
     */
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * Pet findMany
   */
  export type PetFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter, which Pets to fetch.
     */
    where?: PetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Pets to fetch.
     */
    orderBy?: PetOrderByWithRelationInput | PetOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Pets.
     */
    cursor?: PetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Pets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Pets.
     */
    skip?: number
    distinct?: PetScalarFieldEnum | PetScalarFieldEnum[]
  }


  /**
   * Pet create
   */
  export type PetCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The data needed to create a Pet.
     */
    data: XOR<PetCreateInput, PetUncheckedCreateInput>
  }


  /**
   * Pet update
   */
  export type PetUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The data needed to update a Pet.
     */
    data: XOR<PetUpdateInput, PetUncheckedUpdateInput>
    /**
     * Choose, which Pet to update.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet updateMany
   */
  export type PetUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Pets.
     */
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyInput>
    /**
     * Filter which Pets to update
     */
    where?: PetWhereInput
  }


  /**
   * Pet upsert
   */
  export type PetUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * The filter to search for the Pet to update in case it exists.
     */
    where: PetWhereUniqueInput
    /**
     * In case the Pet found by the `where` argument doesn't exist, create a new Pet with this data.
     */
    create: XOR<PetCreateInput, PetUncheckedCreateInput>
    /**
     * In case the Pet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PetUpdateInput, PetUncheckedUpdateInput>
  }


  /**
   * Pet delete
   */
  export type PetDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
    /**
     * Filter which Pet to delete.
     */
    where: PetWhereUniqueInput
  }


  /**
   * Pet deleteMany
   */
  export type PetDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Pets to delete
     */
    where?: PetWhereInput
  }


  /**
   * Pet.policy
   */
  export type Pet$policyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    where?: PolicyWhereInput
  }


  /**
   * Pet without action
   */
  export type PetDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Pet
     */
    select?: PetSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PetInclude<ExtArgs> | null
  }



  /**
   * Model Policy
   */

  export type AggregatePolicy = {
    _count: PolicyCountAggregateOutputType | null
    _avg: PolicyAvgAggregateOutputType | null
    _sum: PolicySumAggregateOutputType | null
    _min: PolicyMinAggregateOutputType | null
    _max: PolicyMaxAggregateOutputType | null
  }

  export type PolicyAvgAggregateOutputType = {
    id: number | null
    petId: number | null
    renewalOfLimits: number | null
    planId: number | null
  }

  export type PolicySumAggregateOutputType = {
    id: number | null
    petId: number | null
    renewalOfLimits: number | null
    planId: number | null
  }

  export type PolicyMinAggregateOutputType = {
    id: number | null
    petId: number | null
    microchipNumber: string | null
    status: string | null
    initialGraceDate: Date | null
    renewalOfLimits: number | null
    planId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PolicyMaxAggregateOutputType = {
    id: number | null
    petId: number | null
    microchipNumber: string | null
    status: string | null
    initialGraceDate: Date | null
    renewalOfLimits: number | null
    planId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PolicyCountAggregateOutputType = {
    id: number
    petId: number
    microchipNumber: number
    status: number
    initialGraceDate: number
    renewalOfLimits: number
    planId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PolicyAvgAggregateInputType = {
    id?: true
    petId?: true
    renewalOfLimits?: true
    planId?: true
  }

  export type PolicySumAggregateInputType = {
    id?: true
    petId?: true
    renewalOfLimits?: true
    planId?: true
  }

  export type PolicyMinAggregateInputType = {
    id?: true
    petId?: true
    microchipNumber?: true
    status?: true
    initialGraceDate?: true
    renewalOfLimits?: true
    planId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PolicyMaxAggregateInputType = {
    id?: true
    petId?: true
    microchipNumber?: true
    status?: true
    initialGraceDate?: true
    renewalOfLimits?: true
    planId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PolicyCountAggregateInputType = {
    id?: true
    petId?: true
    microchipNumber?: true
    status?: true
    initialGraceDate?: true
    renewalOfLimits?: true
    planId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PolicyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Policy to aggregate.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Policies
    **/
    _count?: true | PolicyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PolicyAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PolicySumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PolicyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PolicyMaxAggregateInputType
  }

  export type GetPolicyAggregateType<T extends PolicyAggregateArgs> = {
        [P in keyof T & keyof AggregatePolicy]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePolicy[P]>
      : GetScalarType<T[P], AggregatePolicy[P]>
  }




  export type PolicyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyWhereInput
    orderBy?: PolicyOrderByWithAggregationInput | PolicyOrderByWithAggregationInput[]
    by: PolicyScalarFieldEnum[] | PolicyScalarFieldEnum
    having?: PolicyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PolicyCountAggregateInputType | true
    _avg?: PolicyAvgAggregateInputType
    _sum?: PolicySumAggregateInputType
    _min?: PolicyMinAggregateInputType
    _max?: PolicyMaxAggregateInputType
  }

  export type PolicyGroupByOutputType = {
    id: number
    petId: number
    microchipNumber: string
    status: string
    initialGraceDate: Date
    renewalOfLimits: number
    planId: number
    createdAt: Date
    updatedAt: Date
    _count: PolicyCountAggregateOutputType | null
    _avg: PolicyAvgAggregateOutputType | null
    _sum: PolicySumAggregateOutputType | null
    _min: PolicyMinAggregateOutputType | null
    _max: PolicyMaxAggregateOutputType | null
  }

  type GetPolicyGroupByPayload<T extends PolicyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PolicyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PolicyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PolicyGroupByOutputType[P]>
            : GetScalarType<T[P], PolicyGroupByOutputType[P]>
        }
      >
    >


  export type PolicySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    petId?: boolean
    microchipNumber?: boolean
    status?: boolean
    initialGraceDate?: boolean
    renewalOfLimits?: boolean
    planId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    pet?: boolean | PetDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    policyCoverages?: boolean | Policy$policyCoveragesArgs<ExtArgs>
    _count?: boolean | PolicyCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["policy"]>

  export type PolicySelectScalar = {
    id?: boolean
    petId?: boolean
    microchipNumber?: boolean
    status?: boolean
    initialGraceDate?: boolean
    renewalOfLimits?: boolean
    planId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PolicyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    pet?: boolean | PetDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    policyCoverages?: boolean | Policy$policyCoveragesArgs<ExtArgs>
    _count?: boolean | PolicyCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PolicyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Policy"
    objects: {
      pet: Prisma.$PetPayload<ExtArgs>
      plan: Prisma.$PlanPayload<ExtArgs>
      policyCoverages: Prisma.$PolicyProcedurePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      petId: number
      microchipNumber: string
      status: string
      initialGraceDate: Date
      renewalOfLimits: number
      planId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["policy"]>
    composites: {}
  }


  type PolicyGetPayload<S extends boolean | null | undefined | PolicyDefaultArgs> = $Result.GetResult<Prisma.$PolicyPayload, S>

  type PolicyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PolicyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PolicyCountAggregateInputType | true
    }

  export interface PolicyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Policy'], meta: { name: 'Policy' } }
    /**
     * Find zero or one Policy that matches the filter.
     * @param {PolicyFindUniqueArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PolicyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyFindUniqueArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Policy that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PolicyFindUniqueOrThrowArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PolicyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Policy that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyFindFirstArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PolicyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyFindFirstArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Policy that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyFindFirstOrThrowArgs} args - Arguments to find a Policy
     * @example
     * // Get one Policy
     * const policy = await prisma.policy.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PolicyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Policies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Policies
     * const policies = await prisma.policy.findMany()
     * 
     * // Get first 10 Policies
     * const policies = await prisma.policy.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const policyWithIdOnly = await prisma.policy.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PolicyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Policy.
     * @param {PolicyCreateArgs} args - Arguments to create a Policy.
     * @example
     * // Create one Policy
     * const Policy = await prisma.policy.create({
     *   data: {
     *     // ... data to create a Policy
     *   }
     * })
     * 
    **/
    create<T extends PolicyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyCreateArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Policy.
     * @param {PolicyDeleteArgs} args - Arguments to delete one Policy.
     * @example
     * // Delete one Policy
     * const Policy = await prisma.policy.delete({
     *   where: {
     *     // ... filter to delete one Policy
     *   }
     * })
     * 
    **/
    delete<T extends PolicyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyDeleteArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Policy.
     * @param {PolicyUpdateArgs} args - Arguments to update one Policy.
     * @example
     * // Update one Policy
     * const policy = await prisma.policy.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PolicyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyUpdateArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Policies.
     * @param {PolicyDeleteManyArgs} args - Arguments to filter Policies to delete.
     * @example
     * // Delete a few Policies
     * const { count } = await prisma.policy.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PolicyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Policies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Policies
     * const policy = await prisma.policy.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PolicyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Policy.
     * @param {PolicyUpsertArgs} args - Arguments to update or create a Policy.
     * @example
     * // Update or create a Policy
     * const policy = await prisma.policy.upsert({
     *   create: {
     *     // ... data to create a Policy
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Policy we want to update
     *   }
     * })
    **/
    upsert<T extends PolicyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyUpsertArgs<ExtArgs>>
    ): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Policies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyCountArgs} args - Arguments to filter Policies to count.
     * @example
     * // Count the number of Policies
     * const count = await prisma.policy.count({
     *   where: {
     *     // ... the filter for the Policies we want to count
     *   }
     * })
    **/
    count<T extends PolicyCountArgs>(
      args?: Subset<T, PolicyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PolicyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Policy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PolicyAggregateArgs>(args: Subset<T, PolicyAggregateArgs>): Prisma.PrismaPromise<GetPolicyAggregateType<T>>

    /**
     * Group by Policy.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PolicyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PolicyGroupByArgs['orderBy'] }
        : { orderBy?: PolicyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PolicyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPolicyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Policy model
   */
  readonly fields: PolicyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Policy.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PolicyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    pet<T extends PetDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PetDefaultArgs<ExtArgs>>): Prisma__PetClient<$Result.GetResult<Prisma.$PetPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    policyCoverages<T extends Policy$policyCoveragesArgs<ExtArgs> = {}>(args?: Subset<T, Policy$policyCoveragesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Policy model
   */ 
  interface PolicyFieldRefs {
    readonly id: FieldRef<"Policy", 'Int'>
    readonly petId: FieldRef<"Policy", 'Int'>
    readonly microchipNumber: FieldRef<"Policy", 'String'>
    readonly status: FieldRef<"Policy", 'String'>
    readonly initialGraceDate: FieldRef<"Policy", 'DateTime'>
    readonly renewalOfLimits: FieldRef<"Policy", 'Int'>
    readonly planId: FieldRef<"Policy", 'Int'>
    readonly createdAt: FieldRef<"Policy", 'DateTime'>
    readonly updatedAt: FieldRef<"Policy", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Policy findUnique
   */
  export type PolicyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where: PolicyWhereUniqueInput
  }


  /**
   * Policy findUniqueOrThrow
   */
  export type PolicyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where: PolicyWhereUniqueInput
  }


  /**
   * Policy findFirst
   */
  export type PolicyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Policies.
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Policies.
     */
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }


  /**
   * Policy findFirstOrThrow
   */
  export type PolicyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policy to fetch.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Policies.
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Policies.
     */
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }


  /**
   * Policy findMany
   */
  export type PolicyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter, which Policies to fetch.
     */
    where?: PolicyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Policies to fetch.
     */
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Policies.
     */
    cursor?: PolicyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Policies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Policies.
     */
    skip?: number
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }


  /**
   * Policy create
   */
  export type PolicyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * The data needed to create a Policy.
     */
    data: XOR<PolicyCreateInput, PolicyUncheckedCreateInput>
  }


  /**
   * Policy update
   */
  export type PolicyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * The data needed to update a Policy.
     */
    data: XOR<PolicyUpdateInput, PolicyUncheckedUpdateInput>
    /**
     * Choose, which Policy to update.
     */
    where: PolicyWhereUniqueInput
  }


  /**
   * Policy updateMany
   */
  export type PolicyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Policies.
     */
    data: XOR<PolicyUpdateManyMutationInput, PolicyUncheckedUpdateManyInput>
    /**
     * Filter which Policies to update
     */
    where?: PolicyWhereInput
  }


  /**
   * Policy upsert
   */
  export type PolicyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * The filter to search for the Policy to update in case it exists.
     */
    where: PolicyWhereUniqueInput
    /**
     * In case the Policy found by the `where` argument doesn't exist, create a new Policy with this data.
     */
    create: XOR<PolicyCreateInput, PolicyUncheckedCreateInput>
    /**
     * In case the Policy was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PolicyUpdateInput, PolicyUncheckedUpdateInput>
  }


  /**
   * Policy delete
   */
  export type PolicyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    /**
     * Filter which Policy to delete.
     */
    where: PolicyWhereUniqueInput
  }


  /**
   * Policy deleteMany
   */
  export type PolicyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Policies to delete
     */
    where?: PolicyWhereInput
  }


  /**
   * Policy.policyCoverages
   */
  export type Policy$policyCoveragesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    where?: PolicyProcedureWhereInput
    orderBy?: PolicyProcedureOrderByWithRelationInput | PolicyProcedureOrderByWithRelationInput[]
    cursor?: PolicyProcedureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PolicyProcedureScalarFieldEnum | PolicyProcedureScalarFieldEnum[]
  }


  /**
   * Policy without action
   */
  export type PolicyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
  }



  /**
   * Model Plan
   */

  export type AggregatePlan = {
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  export type PlanAvgAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type PlanSumAggregateOutputType = {
    id: number | null
    value: number | null
  }

  export type PlanMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    value: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PlanCountAggregateOutputType = {
    id: number
    name: number
    description: number
    value: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PlanAvgAggregateInputType = {
    id?: true
    value?: true
  }

  export type PlanSumAggregateInputType = {
    id?: true
    value?: true
  }

  export type PlanMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    value?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PlanCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    value?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plan to aggregate.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Plans
    **/
    _count?: true | PlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanMaxAggregateInputType
  }

  export type GetPlanAggregateType<T extends PlanAggregateArgs> = {
        [P in keyof T & keyof AggregatePlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlan[P]>
      : GetScalarType<T[P], AggregatePlan[P]>
  }




  export type PlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanWhereInput
    orderBy?: PlanOrderByWithAggregationInput | PlanOrderByWithAggregationInput[]
    by: PlanScalarFieldEnum[] | PlanScalarFieldEnum
    having?: PlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCountAggregateInputType | true
    _avg?: PlanAvgAggregateInputType
    _sum?: PlanSumAggregateInputType
    _min?: PlanMinAggregateInputType
    _max?: PlanMaxAggregateInputType
  }

  export type PlanGroupByOutputType = {
    id: number
    name: string
    description: string
    value: number
    createdAt: Date
    updatedAt: Date
    _count: PlanCountAggregateOutputType | null
    _avg: PlanAvgAggregateOutputType | null
    _sum: PlanSumAggregateOutputType | null
    _min: PlanMinAggregateOutputType | null
    _max: PlanMaxAggregateOutputType | null
  }

  type GetPlanGroupByPayload<T extends PlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanGroupByOutputType[P]>
            : GetScalarType<T[P], PlanGroupByOutputType[P]>
        }
      >
    >


  export type PlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    policies?: boolean | Plan$policiesArgs<ExtArgs>
    proceduresByPlan?: boolean | Plan$proceduresByPlanArgs<ExtArgs>
    coverages?: boolean | Plan$coveragesArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["plan"]>

  export type PlanSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    value?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    policies?: boolean | Plan$policiesArgs<ExtArgs>
    proceduresByPlan?: boolean | Plan$proceduresByPlanArgs<ExtArgs>
    coverages?: boolean | Plan$coveragesArgs<ExtArgs>
    _count?: boolean | PlanCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Plan"
    objects: {
      policies: Prisma.$PolicyPayload<ExtArgs>[]
      proceduresByPlan: Prisma.$ProcedureByPlanPayload<ExtArgs>[]
      coverages: Prisma.$PlanCoveragePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      value: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["plan"]>
    composites: {}
  }


  type PlanGetPayload<S extends boolean | null | undefined | PlanDefaultArgs> = $Result.GetResult<Prisma.$PlanPayload, S>

  type PlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanCountAggregateInputType | true
    }

  export interface PlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Plan'], meta: { name: 'Plan' } }
    /**
     * Find zero or one Plan that matches the filter.
     * @param {PlanFindUniqueArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlanFindUniqueArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Plan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlanFindUniqueOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Plan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindFirstArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Plan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindFirstOrThrowArgs} args - Arguments to find a Plan
     * @example
     * // Get one Plan
     * const plan = await prisma.plan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Plans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Plans
     * const plans = await prisma.plan.findMany()
     * 
     * // Get first 10 Plans
     * const plans = await prisma.plan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planWithIdOnly = await prisma.plan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Plan.
     * @param {PlanCreateArgs} args - Arguments to create a Plan.
     * @example
     * // Create one Plan
     * const Plan = await prisma.plan.create({
     *   data: {
     *     // ... data to create a Plan
     *   }
     * })
     * 
    **/
    create<T extends PlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCreateArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Plan.
     * @param {PlanDeleteArgs} args - Arguments to delete one Plan.
     * @example
     * // Delete one Plan
     * const Plan = await prisma.plan.delete({
     *   where: {
     *     // ... filter to delete one Plan
     *   }
     * })
     * 
    **/
    delete<T extends PlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlanDeleteArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Plan.
     * @param {PlanUpdateArgs} args - Arguments to update one Plan.
     * @example
     * // Update one Plan
     * const plan = await prisma.plan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanUpdateArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Plans.
     * @param {PlanDeleteManyArgs} args - Arguments to filter Plans to delete.
     * @example
     * // Delete a few Plans
     * const { count } = await prisma.plan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Plans
     * const plan = await prisma.plan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Plan.
     * @param {PlanUpsertArgs} args - Arguments to update or create a Plan.
     * @example
     * // Update or create a Plan
     * const plan = await prisma.plan.upsert({
     *   create: {
     *     // ... data to create a Plan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Plan we want to update
     *   }
     * })
    **/
    upsert<T extends PlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlanUpsertArgs<ExtArgs>>
    ): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Plans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCountArgs} args - Arguments to filter Plans to count.
     * @example
     * // Count the number of Plans
     * const count = await prisma.plan.count({
     *   where: {
     *     // ... the filter for the Plans we want to count
     *   }
     * })
    **/
    count<T extends PlanCountArgs>(
      args?: Subset<T, PlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanAggregateArgs>(args: Subset<T, PlanAggregateArgs>): Prisma.PrismaPromise<GetPlanAggregateType<T>>

    /**
     * Group by Plan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanGroupByArgs['orderBy'] }
        : { orderBy?: PlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Plan model
   */
  readonly fields: PlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Plan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    policies<T extends Plan$policiesArgs<ExtArgs> = {}>(args?: Subset<T, Plan$policiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findMany'> | Null>;

    proceduresByPlan<T extends Plan$proceduresByPlanArgs<ExtArgs> = {}>(args?: Subset<T, Plan$proceduresByPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    coverages<T extends Plan$coveragesArgs<ExtArgs> = {}>(args?: Subset<T, Plan$coveragesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Plan model
   */ 
  interface PlanFieldRefs {
    readonly id: FieldRef<"Plan", 'Int'>
    readonly name: FieldRef<"Plan", 'String'>
    readonly description: FieldRef<"Plan", 'String'>
    readonly value: FieldRef<"Plan", 'Float'>
    readonly createdAt: FieldRef<"Plan", 'DateTime'>
    readonly updatedAt: FieldRef<"Plan", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Plan findUnique
   */
  export type PlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan findUniqueOrThrow
   */
  export type PlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan findFirst
   */
  export type PlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }


  /**
   * Plan findFirstOrThrow
   */
  export type PlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plan to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Plans.
     */
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }


  /**
   * Plan findMany
   */
  export type PlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter, which Plans to fetch.
     */
    where?: PlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Plans to fetch.
     */
    orderBy?: PlanOrderByWithRelationInput | PlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Plans.
     */
    cursor?: PlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Plans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Plans.
     */
    skip?: number
    distinct?: PlanScalarFieldEnum | PlanScalarFieldEnum[]
  }


  /**
   * Plan create
   */
  export type PlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to create a Plan.
     */
    data: XOR<PlanCreateInput, PlanUncheckedCreateInput>
  }


  /**
   * Plan update
   */
  export type PlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The data needed to update a Plan.
     */
    data: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
    /**
     * Choose, which Plan to update.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan updateMany
   */
  export type PlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Plans.
     */
    data: XOR<PlanUpdateManyMutationInput, PlanUncheckedUpdateManyInput>
    /**
     * Filter which Plans to update
     */
    where?: PlanWhereInput
  }


  /**
   * Plan upsert
   */
  export type PlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * The filter to search for the Plan to update in case it exists.
     */
    where: PlanWhereUniqueInput
    /**
     * In case the Plan found by the `where` argument doesn't exist, create a new Plan with this data.
     */
    create: XOR<PlanCreateInput, PlanUncheckedCreateInput>
    /**
     * In case the Plan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanUpdateInput, PlanUncheckedUpdateInput>
  }


  /**
   * Plan delete
   */
  export type PlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
    /**
     * Filter which Plan to delete.
     */
    where: PlanWhereUniqueInput
  }


  /**
   * Plan deleteMany
   */
  export type PlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Plans to delete
     */
    where?: PlanWhereInput
  }


  /**
   * Plan.policies
   */
  export type Plan$policiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Policy
     */
    select?: PolicySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyInclude<ExtArgs> | null
    where?: PolicyWhereInput
    orderBy?: PolicyOrderByWithRelationInput | PolicyOrderByWithRelationInput[]
    cursor?: PolicyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PolicyScalarFieldEnum | PolicyScalarFieldEnum[]
  }


  /**
   * Plan.proceduresByPlan
   */
  export type Plan$proceduresByPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    where?: ProcedureByPlanWhereInput
    orderBy?: ProcedureByPlanOrderByWithRelationInput | ProcedureByPlanOrderByWithRelationInput[]
    cursor?: ProcedureByPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcedureByPlanScalarFieldEnum | ProcedureByPlanScalarFieldEnum[]
  }


  /**
   * Plan.coverages
   */
  export type Plan$coveragesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    where?: PlanCoverageWhereInput
    orderBy?: PlanCoverageOrderByWithRelationInput | PlanCoverageOrderByWithRelationInput[]
    cursor?: PlanCoverageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanCoverageScalarFieldEnum | PlanCoverageScalarFieldEnum[]
  }


  /**
   * Plan without action
   */
  export type PlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Plan
     */
    select?: PlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanInclude<ExtArgs> | null
  }



  /**
   * Model PlanCoverage
   */

  export type AggregatePlanCoverage = {
    _count: PlanCoverageCountAggregateOutputType | null
    _avg: PlanCoverageAvgAggregateOutputType | null
    _sum: PlanCoverageSumAggregateOutputType | null
    _min: PlanCoverageMinAggregateOutputType | null
    _max: PlanCoverageMaxAggregateOutputType | null
  }

  export type PlanCoverageAvgAggregateOutputType = {
    id: number | null
    planId: number | null
    coverageId: number | null
  }

  export type PlanCoverageSumAggregateOutputType = {
    id: number | null
    planId: number | null
    coverageId: number | null
  }

  export type PlanCoverageMinAggregateOutputType = {
    id: number | null
    planId: number | null
    coverageId: number | null
  }

  export type PlanCoverageMaxAggregateOutputType = {
    id: number | null
    planId: number | null
    coverageId: number | null
  }

  export type PlanCoverageCountAggregateOutputType = {
    id: number
    planId: number
    coverageId: number
    _all: number
  }


  export type PlanCoverageAvgAggregateInputType = {
    id?: true
    planId?: true
    coverageId?: true
  }

  export type PlanCoverageSumAggregateInputType = {
    id?: true
    planId?: true
    coverageId?: true
  }

  export type PlanCoverageMinAggregateInputType = {
    id?: true
    planId?: true
    coverageId?: true
  }

  export type PlanCoverageMaxAggregateInputType = {
    id?: true
    planId?: true
    coverageId?: true
  }

  export type PlanCoverageCountAggregateInputType = {
    id?: true
    planId?: true
    coverageId?: true
    _all?: true
  }

  export type PlanCoverageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanCoverage to aggregate.
     */
    where?: PlanCoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanCoverages to fetch.
     */
    orderBy?: PlanCoverageOrderByWithRelationInput | PlanCoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlanCoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanCoverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanCoverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PlanCoverages
    **/
    _count?: true | PlanCoverageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PlanCoverageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PlanCoverageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlanCoverageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlanCoverageMaxAggregateInputType
  }

  export type GetPlanCoverageAggregateType<T extends PlanCoverageAggregateArgs> = {
        [P in keyof T & keyof AggregatePlanCoverage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlanCoverage[P]>
      : GetScalarType<T[P], AggregatePlanCoverage[P]>
  }




  export type PlanCoverageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlanCoverageWhereInput
    orderBy?: PlanCoverageOrderByWithAggregationInput | PlanCoverageOrderByWithAggregationInput[]
    by: PlanCoverageScalarFieldEnum[] | PlanCoverageScalarFieldEnum
    having?: PlanCoverageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlanCoverageCountAggregateInputType | true
    _avg?: PlanCoverageAvgAggregateInputType
    _sum?: PlanCoverageSumAggregateInputType
    _min?: PlanCoverageMinAggregateInputType
    _max?: PlanCoverageMaxAggregateInputType
  }

  export type PlanCoverageGroupByOutputType = {
    id: number
    planId: number
    coverageId: number
    _count: PlanCoverageCountAggregateOutputType | null
    _avg: PlanCoverageAvgAggregateOutputType | null
    _sum: PlanCoverageSumAggregateOutputType | null
    _min: PlanCoverageMinAggregateOutputType | null
    _max: PlanCoverageMaxAggregateOutputType | null
  }

  type GetPlanCoverageGroupByPayload<T extends PlanCoverageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlanCoverageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlanCoverageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlanCoverageGroupByOutputType[P]>
            : GetScalarType<T[P], PlanCoverageGroupByOutputType[P]>
        }
      >
    >


  export type PlanCoverageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    planId?: boolean
    coverageId?: boolean
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    coverage?: boolean | CoverageDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["planCoverage"]>

  export type PlanCoverageSelectScalar = {
    id?: boolean
    planId?: boolean
    coverageId?: boolean
  }

  export type PlanCoverageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plan?: boolean | PlanDefaultArgs<ExtArgs>
    coverage?: boolean | CoverageDefaultArgs<ExtArgs>
  }


  export type $PlanCoveragePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PlanCoverage"
    objects: {
      plan: Prisma.$PlanPayload<ExtArgs>
      coverage: Prisma.$CoveragePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      planId: number
      coverageId: number
    }, ExtArgs["result"]["planCoverage"]>
    composites: {}
  }


  type PlanCoverageGetPayload<S extends boolean | null | undefined | PlanCoverageDefaultArgs> = $Result.GetResult<Prisma.$PlanCoveragePayload, S>

  type PlanCoverageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PlanCoverageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PlanCoverageCountAggregateInputType | true
    }

  export interface PlanCoverageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PlanCoverage'], meta: { name: 'PlanCoverage' } }
    /**
     * Find zero or one PlanCoverage that matches the filter.
     * @param {PlanCoverageFindUniqueArgs} args - Arguments to find a PlanCoverage
     * @example
     * // Get one PlanCoverage
     * const planCoverage = await prisma.planCoverage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PlanCoverageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCoverageFindUniqueArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PlanCoverage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PlanCoverageFindUniqueOrThrowArgs} args - Arguments to find a PlanCoverage
     * @example
     * // Get one PlanCoverage
     * const planCoverage = await prisma.planCoverage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PlanCoverageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanCoverageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PlanCoverage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageFindFirstArgs} args - Arguments to find a PlanCoverage
     * @example
     * // Get one PlanCoverage
     * const planCoverage = await prisma.planCoverage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PlanCoverageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanCoverageFindFirstArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PlanCoverage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageFindFirstOrThrowArgs} args - Arguments to find a PlanCoverage
     * @example
     * // Get one PlanCoverage
     * const planCoverage = await prisma.planCoverage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PlanCoverageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanCoverageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PlanCoverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PlanCoverages
     * const planCoverages = await prisma.planCoverage.findMany()
     * 
     * // Get first 10 PlanCoverages
     * const planCoverages = await prisma.planCoverage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const planCoverageWithIdOnly = await prisma.planCoverage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PlanCoverageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanCoverageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PlanCoverage.
     * @param {PlanCoverageCreateArgs} args - Arguments to create a PlanCoverage.
     * @example
     * // Create one PlanCoverage
     * const PlanCoverage = await prisma.planCoverage.create({
     *   data: {
     *     // ... data to create a PlanCoverage
     *   }
     * })
     * 
    **/
    create<T extends PlanCoverageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCoverageCreateArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a PlanCoverage.
     * @param {PlanCoverageDeleteArgs} args - Arguments to delete one PlanCoverage.
     * @example
     * // Delete one PlanCoverage
     * const PlanCoverage = await prisma.planCoverage.delete({
     *   where: {
     *     // ... filter to delete one PlanCoverage
     *   }
     * })
     * 
    **/
    delete<T extends PlanCoverageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCoverageDeleteArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PlanCoverage.
     * @param {PlanCoverageUpdateArgs} args - Arguments to update one PlanCoverage.
     * @example
     * // Update one PlanCoverage
     * const planCoverage = await prisma.planCoverage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PlanCoverageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCoverageUpdateArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PlanCoverages.
     * @param {PlanCoverageDeleteManyArgs} args - Arguments to filter PlanCoverages to delete.
     * @example
     * // Delete a few PlanCoverages
     * const { count } = await prisma.planCoverage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PlanCoverageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PlanCoverageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PlanCoverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PlanCoverages
     * const planCoverage = await prisma.planCoverage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PlanCoverageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCoverageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PlanCoverage.
     * @param {PlanCoverageUpsertArgs} args - Arguments to update or create a PlanCoverage.
     * @example
     * // Update or create a PlanCoverage
     * const planCoverage = await prisma.planCoverage.upsert({
     *   create: {
     *     // ... data to create a PlanCoverage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PlanCoverage we want to update
     *   }
     * })
    **/
    upsert<T extends PlanCoverageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PlanCoverageUpsertArgs<ExtArgs>>
    ): Prisma__PlanCoverageClient<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PlanCoverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageCountArgs} args - Arguments to filter PlanCoverages to count.
     * @example
     * // Count the number of PlanCoverages
     * const count = await prisma.planCoverage.count({
     *   where: {
     *     // ... the filter for the PlanCoverages we want to count
     *   }
     * })
    **/
    count<T extends PlanCoverageCountArgs>(
      args?: Subset<T, PlanCoverageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlanCoverageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PlanCoverage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlanCoverageAggregateArgs>(args: Subset<T, PlanCoverageAggregateArgs>): Prisma.PrismaPromise<GetPlanCoverageAggregateType<T>>

    /**
     * Group by PlanCoverage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlanCoverageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlanCoverageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlanCoverageGroupByArgs['orderBy'] }
        : { orderBy?: PlanCoverageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlanCoverageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlanCoverageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PlanCoverage model
   */
  readonly fields: PlanCoverageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PlanCoverage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlanCoverageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    coverage<T extends CoverageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoverageDefaultArgs<ExtArgs>>): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PlanCoverage model
   */ 
  interface PlanCoverageFieldRefs {
    readonly id: FieldRef<"PlanCoverage", 'Int'>
    readonly planId: FieldRef<"PlanCoverage", 'Int'>
    readonly coverageId: FieldRef<"PlanCoverage", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * PlanCoverage findUnique
   */
  export type PlanCoverageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * Filter, which PlanCoverage to fetch.
     */
    where: PlanCoverageWhereUniqueInput
  }


  /**
   * PlanCoverage findUniqueOrThrow
   */
  export type PlanCoverageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * Filter, which PlanCoverage to fetch.
     */
    where: PlanCoverageWhereUniqueInput
  }


  /**
   * PlanCoverage findFirst
   */
  export type PlanCoverageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * Filter, which PlanCoverage to fetch.
     */
    where?: PlanCoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanCoverages to fetch.
     */
    orderBy?: PlanCoverageOrderByWithRelationInput | PlanCoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanCoverages.
     */
    cursor?: PlanCoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanCoverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanCoverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanCoverages.
     */
    distinct?: PlanCoverageScalarFieldEnum | PlanCoverageScalarFieldEnum[]
  }


  /**
   * PlanCoverage findFirstOrThrow
   */
  export type PlanCoverageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * Filter, which PlanCoverage to fetch.
     */
    where?: PlanCoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanCoverages to fetch.
     */
    orderBy?: PlanCoverageOrderByWithRelationInput | PlanCoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PlanCoverages.
     */
    cursor?: PlanCoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanCoverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanCoverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PlanCoverages.
     */
    distinct?: PlanCoverageScalarFieldEnum | PlanCoverageScalarFieldEnum[]
  }


  /**
   * PlanCoverage findMany
   */
  export type PlanCoverageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * Filter, which PlanCoverages to fetch.
     */
    where?: PlanCoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PlanCoverages to fetch.
     */
    orderBy?: PlanCoverageOrderByWithRelationInput | PlanCoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PlanCoverages.
     */
    cursor?: PlanCoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PlanCoverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PlanCoverages.
     */
    skip?: number
    distinct?: PlanCoverageScalarFieldEnum | PlanCoverageScalarFieldEnum[]
  }


  /**
   * PlanCoverage create
   */
  export type PlanCoverageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * The data needed to create a PlanCoverage.
     */
    data: XOR<PlanCoverageCreateInput, PlanCoverageUncheckedCreateInput>
  }


  /**
   * PlanCoverage update
   */
  export type PlanCoverageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * The data needed to update a PlanCoverage.
     */
    data: XOR<PlanCoverageUpdateInput, PlanCoverageUncheckedUpdateInput>
    /**
     * Choose, which PlanCoverage to update.
     */
    where: PlanCoverageWhereUniqueInput
  }


  /**
   * PlanCoverage updateMany
   */
  export type PlanCoverageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PlanCoverages.
     */
    data: XOR<PlanCoverageUpdateManyMutationInput, PlanCoverageUncheckedUpdateManyInput>
    /**
     * Filter which PlanCoverages to update
     */
    where?: PlanCoverageWhereInput
  }


  /**
   * PlanCoverage upsert
   */
  export type PlanCoverageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * The filter to search for the PlanCoverage to update in case it exists.
     */
    where: PlanCoverageWhereUniqueInput
    /**
     * In case the PlanCoverage found by the `where` argument doesn't exist, create a new PlanCoverage with this data.
     */
    create: XOR<PlanCoverageCreateInput, PlanCoverageUncheckedCreateInput>
    /**
     * In case the PlanCoverage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlanCoverageUpdateInput, PlanCoverageUncheckedUpdateInput>
  }


  /**
   * PlanCoverage delete
   */
  export type PlanCoverageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    /**
     * Filter which PlanCoverage to delete.
     */
    where: PlanCoverageWhereUniqueInput
  }


  /**
   * PlanCoverage deleteMany
   */
  export type PlanCoverageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PlanCoverages to delete
     */
    where?: PlanCoverageWhereInput
  }


  /**
   * PlanCoverage without action
   */
  export type PlanCoverageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
  }



  /**
   * Model Coverage
   */

  export type AggregateCoverage = {
    _count: CoverageCountAggregateOutputType | null
    _avg: CoverageAvgAggregateOutputType | null
    _sum: CoverageSumAggregateOutputType | null
    _min: CoverageMinAggregateOutputType | null
    _max: CoverageMaxAggregateOutputType | null
  }

  export type CoverageAvgAggregateOutputType = {
    id: number | null
  }

  export type CoverageSumAggregateOutputType = {
    id: number | null
  }

  export type CoverageMinAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CoverageMaxAggregateOutputType = {
    id: number | null
    name: string | null
  }

  export type CoverageCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CoverageAvgAggregateInputType = {
    id?: true
  }

  export type CoverageSumAggregateInputType = {
    id?: true
  }

  export type CoverageMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CoverageMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CoverageCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CoverageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coverage to aggregate.
     */
    where?: CoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coverages to fetch.
     */
    orderBy?: CoverageOrderByWithRelationInput | CoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Coverages
    **/
    _count?: true | CoverageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CoverageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CoverageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CoverageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CoverageMaxAggregateInputType
  }

  export type GetCoverageAggregateType<T extends CoverageAggregateArgs> = {
        [P in keyof T & keyof AggregateCoverage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCoverage[P]>
      : GetScalarType<T[P], AggregateCoverage[P]>
  }




  export type CoverageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CoverageWhereInput
    orderBy?: CoverageOrderByWithAggregationInput | CoverageOrderByWithAggregationInput[]
    by: CoverageScalarFieldEnum[] | CoverageScalarFieldEnum
    having?: CoverageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CoverageCountAggregateInputType | true
    _avg?: CoverageAvgAggregateInputType
    _sum?: CoverageSumAggregateInputType
    _min?: CoverageMinAggregateInputType
    _max?: CoverageMaxAggregateInputType
  }

  export type CoverageGroupByOutputType = {
    id: number
    name: string
    _count: CoverageCountAggregateOutputType | null
    _avg: CoverageAvgAggregateOutputType | null
    _sum: CoverageSumAggregateOutputType | null
    _min: CoverageMinAggregateOutputType | null
    _max: CoverageMaxAggregateOutputType | null
  }

  type GetCoverageGroupByPayload<T extends CoverageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CoverageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CoverageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CoverageGroupByOutputType[P]>
            : GetScalarType<T[P], CoverageGroupByOutputType[P]>
        }
      >
    >


  export type CoverageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    plans?: boolean | Coverage$plansArgs<ExtArgs>
    procedures?: boolean | Coverage$proceduresArgs<ExtArgs>
    _count?: boolean | CoverageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["coverage"]>

  export type CoverageSelectScalar = {
    id?: boolean
    name?: boolean
  }

  export type CoverageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    plans?: boolean | Coverage$plansArgs<ExtArgs>
    procedures?: boolean | Coverage$proceduresArgs<ExtArgs>
    _count?: boolean | CoverageCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CoveragePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Coverage"
    objects: {
      plans: Prisma.$PlanCoveragePayload<ExtArgs>[]
      procedures: Prisma.$ProcedurePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
    }, ExtArgs["result"]["coverage"]>
    composites: {}
  }


  type CoverageGetPayload<S extends boolean | null | undefined | CoverageDefaultArgs> = $Result.GetResult<Prisma.$CoveragePayload, S>

  type CoverageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CoverageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CoverageCountAggregateInputType | true
    }

  export interface CoverageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Coverage'], meta: { name: 'Coverage' } }
    /**
     * Find zero or one Coverage that matches the filter.
     * @param {CoverageFindUniqueArgs} args - Arguments to find a Coverage
     * @example
     * // Get one Coverage
     * const coverage = await prisma.coverage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CoverageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CoverageFindUniqueArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Coverage that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CoverageFindUniqueOrThrowArgs} args - Arguments to find a Coverage
     * @example
     * // Get one Coverage
     * const coverage = await prisma.coverage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CoverageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoverageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Coverage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageFindFirstArgs} args - Arguments to find a Coverage
     * @example
     * // Get one Coverage
     * const coverage = await prisma.coverage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CoverageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CoverageFindFirstArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Coverage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageFindFirstOrThrowArgs} args - Arguments to find a Coverage
     * @example
     * // Get one Coverage
     * const coverage = await prisma.coverage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CoverageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CoverageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Coverages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Coverages
     * const coverages = await prisma.coverage.findMany()
     * 
     * // Get first 10 Coverages
     * const coverages = await prisma.coverage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const coverageWithIdOnly = await prisma.coverage.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CoverageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoverageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Coverage.
     * @param {CoverageCreateArgs} args - Arguments to create a Coverage.
     * @example
     * // Create one Coverage
     * const Coverage = await prisma.coverage.create({
     *   data: {
     *     // ... data to create a Coverage
     *   }
     * })
     * 
    **/
    create<T extends CoverageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CoverageCreateArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Coverage.
     * @param {CoverageDeleteArgs} args - Arguments to delete one Coverage.
     * @example
     * // Delete one Coverage
     * const Coverage = await prisma.coverage.delete({
     *   where: {
     *     // ... filter to delete one Coverage
     *   }
     * })
     * 
    **/
    delete<T extends CoverageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CoverageDeleteArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Coverage.
     * @param {CoverageUpdateArgs} args - Arguments to update one Coverage.
     * @example
     * // Update one Coverage
     * const coverage = await prisma.coverage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CoverageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CoverageUpdateArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Coverages.
     * @param {CoverageDeleteManyArgs} args - Arguments to filter Coverages to delete.
     * @example
     * // Delete a few Coverages
     * const { count } = await prisma.coverage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CoverageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CoverageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Coverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Coverages
     * const coverage = await prisma.coverage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CoverageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CoverageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Coverage.
     * @param {CoverageUpsertArgs} args - Arguments to update or create a Coverage.
     * @example
     * // Update or create a Coverage
     * const coverage = await prisma.coverage.upsert({
     *   create: {
     *     // ... data to create a Coverage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Coverage we want to update
     *   }
     * })
    **/
    upsert<T extends CoverageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CoverageUpsertArgs<ExtArgs>>
    ): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Coverages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageCountArgs} args - Arguments to filter Coverages to count.
     * @example
     * // Count the number of Coverages
     * const count = await prisma.coverage.count({
     *   where: {
     *     // ... the filter for the Coverages we want to count
     *   }
     * })
    **/
    count<T extends CoverageCountArgs>(
      args?: Subset<T, CoverageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CoverageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Coverage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CoverageAggregateArgs>(args: Subset<T, CoverageAggregateArgs>): Prisma.PrismaPromise<GetCoverageAggregateType<T>>

    /**
     * Group by Coverage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CoverageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CoverageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CoverageGroupByArgs['orderBy'] }
        : { orderBy?: CoverageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CoverageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCoverageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Coverage model
   */
  readonly fields: CoverageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Coverage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CoverageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    plans<T extends Coverage$plansArgs<ExtArgs> = {}>(args?: Subset<T, Coverage$plansArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlanCoveragePayload<ExtArgs>, T, 'findMany'> | Null>;

    procedures<T extends Coverage$proceduresArgs<ExtArgs> = {}>(args?: Subset<T, Coverage$proceduresArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Coverage model
   */ 
  interface CoverageFieldRefs {
    readonly id: FieldRef<"Coverage", 'Int'>
    readonly name: FieldRef<"Coverage", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Coverage findUnique
   */
  export type CoverageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * Filter, which Coverage to fetch.
     */
    where: CoverageWhereUniqueInput
  }


  /**
   * Coverage findUniqueOrThrow
   */
  export type CoverageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * Filter, which Coverage to fetch.
     */
    where: CoverageWhereUniqueInput
  }


  /**
   * Coverage findFirst
   */
  export type CoverageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * Filter, which Coverage to fetch.
     */
    where?: CoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coverages to fetch.
     */
    orderBy?: CoverageOrderByWithRelationInput | CoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coverages.
     */
    cursor?: CoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coverages.
     */
    distinct?: CoverageScalarFieldEnum | CoverageScalarFieldEnum[]
  }


  /**
   * Coverage findFirstOrThrow
   */
  export type CoverageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * Filter, which Coverage to fetch.
     */
    where?: CoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coverages to fetch.
     */
    orderBy?: CoverageOrderByWithRelationInput | CoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Coverages.
     */
    cursor?: CoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coverages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Coverages.
     */
    distinct?: CoverageScalarFieldEnum | CoverageScalarFieldEnum[]
  }


  /**
   * Coverage findMany
   */
  export type CoverageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * Filter, which Coverages to fetch.
     */
    where?: CoverageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Coverages to fetch.
     */
    orderBy?: CoverageOrderByWithRelationInput | CoverageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Coverages.
     */
    cursor?: CoverageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Coverages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Coverages.
     */
    skip?: number
    distinct?: CoverageScalarFieldEnum | CoverageScalarFieldEnum[]
  }


  /**
   * Coverage create
   */
  export type CoverageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * The data needed to create a Coverage.
     */
    data: XOR<CoverageCreateInput, CoverageUncheckedCreateInput>
  }


  /**
   * Coverage update
   */
  export type CoverageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * The data needed to update a Coverage.
     */
    data: XOR<CoverageUpdateInput, CoverageUncheckedUpdateInput>
    /**
     * Choose, which Coverage to update.
     */
    where: CoverageWhereUniqueInput
  }


  /**
   * Coverage updateMany
   */
  export type CoverageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Coverages.
     */
    data: XOR<CoverageUpdateManyMutationInput, CoverageUncheckedUpdateManyInput>
    /**
     * Filter which Coverages to update
     */
    where?: CoverageWhereInput
  }


  /**
   * Coverage upsert
   */
  export type CoverageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * The filter to search for the Coverage to update in case it exists.
     */
    where: CoverageWhereUniqueInput
    /**
     * In case the Coverage found by the `where` argument doesn't exist, create a new Coverage with this data.
     */
    create: XOR<CoverageCreateInput, CoverageUncheckedCreateInput>
    /**
     * In case the Coverage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CoverageUpdateInput, CoverageUncheckedUpdateInput>
  }


  /**
   * Coverage delete
   */
  export type CoverageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
    /**
     * Filter which Coverage to delete.
     */
    where: CoverageWhereUniqueInput
  }


  /**
   * Coverage deleteMany
   */
  export type CoverageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Coverages to delete
     */
    where?: CoverageWhereInput
  }


  /**
   * Coverage.plans
   */
  export type Coverage$plansArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PlanCoverage
     */
    select?: PlanCoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PlanCoverageInclude<ExtArgs> | null
    where?: PlanCoverageWhereInput
    orderBy?: PlanCoverageOrderByWithRelationInput | PlanCoverageOrderByWithRelationInput[]
    cursor?: PlanCoverageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlanCoverageScalarFieldEnum | PlanCoverageScalarFieldEnum[]
  }


  /**
   * Coverage.procedures
   */
  export type Coverage$proceduresArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    where?: ProcedureWhereInput
    orderBy?: ProcedureOrderByWithRelationInput | ProcedureOrderByWithRelationInput[]
    cursor?: ProcedureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcedureScalarFieldEnum | ProcedureScalarFieldEnum[]
  }


  /**
   * Coverage without action
   */
  export type CoverageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Coverage
     */
    select?: CoverageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: CoverageInclude<ExtArgs> | null
  }



  /**
   * Model Procedure
   */

  export type AggregateProcedure = {
    _count: ProcedureCountAggregateOutputType | null
    _avg: ProcedureAvgAggregateOutputType | null
    _sum: ProcedureSumAggregateOutputType | null
    _min: ProcedureMinAggregateOutputType | null
    _max: ProcedureMaxAggregateOutputType | null
  }

  export type ProcedureAvgAggregateOutputType = {
    id: number | null
    coverageId: number | null
  }

  export type ProcedureSumAggregateOutputType = {
    id: number | null
    coverageId: number | null
  }

  export type ProcedureMinAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    coverageId: number | null
  }

  export type ProcedureMaxAggregateOutputType = {
    id: number | null
    name: string | null
    description: string | null
    coverageId: number | null
  }

  export type ProcedureCountAggregateOutputType = {
    id: number
    name: number
    description: number
    coverageId: number
    _all: number
  }


  export type ProcedureAvgAggregateInputType = {
    id?: true
    coverageId?: true
  }

  export type ProcedureSumAggregateInputType = {
    id?: true
    coverageId?: true
  }

  export type ProcedureMinAggregateInputType = {
    id?: true
    name?: true
    description?: true
    coverageId?: true
  }

  export type ProcedureMaxAggregateInputType = {
    id?: true
    name?: true
    description?: true
    coverageId?: true
  }

  export type ProcedureCountAggregateInputType = {
    id?: true
    name?: true
    description?: true
    coverageId?: true
    _all?: true
  }

  export type ProcedureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Procedure to aggregate.
     */
    where?: ProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procedures to fetch.
     */
    orderBy?: ProcedureOrderByWithRelationInput | ProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procedures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Procedures
    **/
    _count?: true | ProcedureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcedureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcedureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcedureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcedureMaxAggregateInputType
  }

  export type GetProcedureAggregateType<T extends ProcedureAggregateArgs> = {
        [P in keyof T & keyof AggregateProcedure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcedure[P]>
      : GetScalarType<T[P], AggregateProcedure[P]>
  }




  export type ProcedureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcedureWhereInput
    orderBy?: ProcedureOrderByWithAggregationInput | ProcedureOrderByWithAggregationInput[]
    by: ProcedureScalarFieldEnum[] | ProcedureScalarFieldEnum
    having?: ProcedureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcedureCountAggregateInputType | true
    _avg?: ProcedureAvgAggregateInputType
    _sum?: ProcedureSumAggregateInputType
    _min?: ProcedureMinAggregateInputType
    _max?: ProcedureMaxAggregateInputType
  }

  export type ProcedureGroupByOutputType = {
    id: number
    name: string
    description: string
    coverageId: number
    _count: ProcedureCountAggregateOutputType | null
    _avg: ProcedureAvgAggregateOutputType | null
    _sum: ProcedureSumAggregateOutputType | null
    _min: ProcedureMinAggregateOutputType | null
    _max: ProcedureMaxAggregateOutputType | null
  }

  type GetProcedureGroupByPayload<T extends ProcedureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcedureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcedureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcedureGroupByOutputType[P]>
            : GetScalarType<T[P], ProcedureGroupByOutputType[P]>
        }
      >
    >


  export type ProcedureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    description?: boolean
    coverageId?: boolean
    coverage?: boolean | CoverageDefaultArgs<ExtArgs>
    proceduresByPlan?: boolean | Procedure$proceduresByPlanArgs<ExtArgs>
    policiesProcedure?: boolean | Procedure$policiesProcedureArgs<ExtArgs>
    _count?: boolean | ProcedureCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procedure"]>

  export type ProcedureSelectScalar = {
    id?: boolean
    name?: boolean
    description?: boolean
    coverageId?: boolean
  }

  export type ProcedureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    coverage?: boolean | CoverageDefaultArgs<ExtArgs>
    proceduresByPlan?: boolean | Procedure$proceduresByPlanArgs<ExtArgs>
    policiesProcedure?: boolean | Procedure$policiesProcedureArgs<ExtArgs>
    _count?: boolean | ProcedureCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $ProcedurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Procedure"
    objects: {
      coverage: Prisma.$CoveragePayload<ExtArgs>
      proceduresByPlan: Prisma.$ProcedureByPlanPayload<ExtArgs>[]
      policiesProcedure: Prisma.$PolicyProcedurePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      description: string
      coverageId: number
    }, ExtArgs["result"]["procedure"]>
    composites: {}
  }


  type ProcedureGetPayload<S extends boolean | null | undefined | ProcedureDefaultArgs> = $Result.GetResult<Prisma.$ProcedurePayload, S>

  type ProcedureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcedureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcedureCountAggregateInputType | true
    }

  export interface ProcedureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Procedure'], meta: { name: 'Procedure' } }
    /**
     * Find zero or one Procedure that matches the filter.
     * @param {ProcedureFindUniqueArgs} args - Arguments to find a Procedure
     * @example
     * // Get one Procedure
     * const procedure = await prisma.procedure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProcedureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureFindUniqueArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Procedure that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProcedureFindUniqueOrThrowArgs} args - Arguments to find a Procedure
     * @example
     * // Get one Procedure
     * const procedure = await prisma.procedure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProcedureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Procedure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureFindFirstArgs} args - Arguments to find a Procedure
     * @example
     * // Get one Procedure
     * const procedure = await prisma.procedure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProcedureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureFindFirstArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Procedure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureFindFirstOrThrowArgs} args - Arguments to find a Procedure
     * @example
     * // Get one Procedure
     * const procedure = await prisma.procedure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProcedureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Procedures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Procedures
     * const procedures = await prisma.procedure.findMany()
     * 
     * // Get first 10 Procedures
     * const procedures = await prisma.procedure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const procedureWithIdOnly = await prisma.procedure.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProcedureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Procedure.
     * @param {ProcedureCreateArgs} args - Arguments to create a Procedure.
     * @example
     * // Create one Procedure
     * const Procedure = await prisma.procedure.create({
     *   data: {
     *     // ... data to create a Procedure
     *   }
     * })
     * 
    **/
    create<T extends ProcedureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureCreateArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Procedure.
     * @param {ProcedureDeleteArgs} args - Arguments to delete one Procedure.
     * @example
     * // Delete one Procedure
     * const Procedure = await prisma.procedure.delete({
     *   where: {
     *     // ... filter to delete one Procedure
     *   }
     * })
     * 
    **/
    delete<T extends ProcedureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureDeleteArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Procedure.
     * @param {ProcedureUpdateArgs} args - Arguments to update one Procedure.
     * @example
     * // Update one Procedure
     * const procedure = await prisma.procedure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProcedureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureUpdateArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Procedures.
     * @param {ProcedureDeleteManyArgs} args - Arguments to filter Procedures to delete.
     * @example
     * // Delete a few Procedures
     * const { count } = await prisma.procedure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProcedureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Procedures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Procedures
     * const procedure = await prisma.procedure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProcedureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Procedure.
     * @param {ProcedureUpsertArgs} args - Arguments to update or create a Procedure.
     * @example
     * // Update or create a Procedure
     * const procedure = await prisma.procedure.upsert({
     *   create: {
     *     // ... data to create a Procedure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Procedure we want to update
     *   }
     * })
    **/
    upsert<T extends ProcedureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureUpsertArgs<ExtArgs>>
    ): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Procedures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureCountArgs} args - Arguments to filter Procedures to count.
     * @example
     * // Count the number of Procedures
     * const count = await prisma.procedure.count({
     *   where: {
     *     // ... the filter for the Procedures we want to count
     *   }
     * })
    **/
    count<T extends ProcedureCountArgs>(
      args?: Subset<T, ProcedureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcedureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Procedure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcedureAggregateArgs>(args: Subset<T, ProcedureAggregateArgs>): Prisma.PrismaPromise<GetProcedureAggregateType<T>>

    /**
     * Group by Procedure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcedureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcedureGroupByArgs['orderBy'] }
        : { orderBy?: ProcedureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcedureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcedureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Procedure model
   */
  readonly fields: ProcedureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Procedure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcedureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    coverage<T extends CoverageDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CoverageDefaultArgs<ExtArgs>>): Prisma__CoverageClient<$Result.GetResult<Prisma.$CoveragePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    proceduresByPlan<T extends Procedure$proceduresByPlanArgs<ExtArgs> = {}>(args?: Subset<T, Procedure$proceduresByPlanArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findMany'> | Null>;

    policiesProcedure<T extends Procedure$policiesProcedureArgs<ExtArgs> = {}>(args?: Subset<T, Procedure$policiesProcedureArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Procedure model
   */ 
  interface ProcedureFieldRefs {
    readonly id: FieldRef<"Procedure", 'Int'>
    readonly name: FieldRef<"Procedure", 'String'>
    readonly description: FieldRef<"Procedure", 'String'>
    readonly coverageId: FieldRef<"Procedure", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Procedure findUnique
   */
  export type ProcedureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * Filter, which Procedure to fetch.
     */
    where: ProcedureWhereUniqueInput
  }


  /**
   * Procedure findUniqueOrThrow
   */
  export type ProcedureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * Filter, which Procedure to fetch.
     */
    where: ProcedureWhereUniqueInput
  }


  /**
   * Procedure findFirst
   */
  export type ProcedureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * Filter, which Procedure to fetch.
     */
    where?: ProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procedures to fetch.
     */
    orderBy?: ProcedureOrderByWithRelationInput | ProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Procedures.
     */
    cursor?: ProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procedures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Procedures.
     */
    distinct?: ProcedureScalarFieldEnum | ProcedureScalarFieldEnum[]
  }


  /**
   * Procedure findFirstOrThrow
   */
  export type ProcedureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * Filter, which Procedure to fetch.
     */
    where?: ProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procedures to fetch.
     */
    orderBy?: ProcedureOrderByWithRelationInput | ProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Procedures.
     */
    cursor?: ProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procedures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Procedures.
     */
    distinct?: ProcedureScalarFieldEnum | ProcedureScalarFieldEnum[]
  }


  /**
   * Procedure findMany
   */
  export type ProcedureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * Filter, which Procedures to fetch.
     */
    where?: ProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Procedures to fetch.
     */
    orderBy?: ProcedureOrderByWithRelationInput | ProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Procedures.
     */
    cursor?: ProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Procedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Procedures.
     */
    skip?: number
    distinct?: ProcedureScalarFieldEnum | ProcedureScalarFieldEnum[]
  }


  /**
   * Procedure create
   */
  export type ProcedureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * The data needed to create a Procedure.
     */
    data: XOR<ProcedureCreateInput, ProcedureUncheckedCreateInput>
  }


  /**
   * Procedure update
   */
  export type ProcedureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * The data needed to update a Procedure.
     */
    data: XOR<ProcedureUpdateInput, ProcedureUncheckedUpdateInput>
    /**
     * Choose, which Procedure to update.
     */
    where: ProcedureWhereUniqueInput
  }


  /**
   * Procedure updateMany
   */
  export type ProcedureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Procedures.
     */
    data: XOR<ProcedureUpdateManyMutationInput, ProcedureUncheckedUpdateManyInput>
    /**
     * Filter which Procedures to update
     */
    where?: ProcedureWhereInput
  }


  /**
   * Procedure upsert
   */
  export type ProcedureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * The filter to search for the Procedure to update in case it exists.
     */
    where: ProcedureWhereUniqueInput
    /**
     * In case the Procedure found by the `where` argument doesn't exist, create a new Procedure with this data.
     */
    create: XOR<ProcedureCreateInput, ProcedureUncheckedCreateInput>
    /**
     * In case the Procedure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcedureUpdateInput, ProcedureUncheckedUpdateInput>
  }


  /**
   * Procedure delete
   */
  export type ProcedureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
    /**
     * Filter which Procedure to delete.
     */
    where: ProcedureWhereUniqueInput
  }


  /**
   * Procedure deleteMany
   */
  export type ProcedureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Procedures to delete
     */
    where?: ProcedureWhereInput
  }


  /**
   * Procedure.proceduresByPlan
   */
  export type Procedure$proceduresByPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    where?: ProcedureByPlanWhereInput
    orderBy?: ProcedureByPlanOrderByWithRelationInput | ProcedureByPlanOrderByWithRelationInput[]
    cursor?: ProcedureByPlanWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProcedureByPlanScalarFieldEnum | ProcedureByPlanScalarFieldEnum[]
  }


  /**
   * Procedure.policiesProcedure
   */
  export type Procedure$policiesProcedureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    where?: PolicyProcedureWhereInput
    orderBy?: PolicyProcedureOrderByWithRelationInput | PolicyProcedureOrderByWithRelationInput[]
    cursor?: PolicyProcedureWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PolicyProcedureScalarFieldEnum | PolicyProcedureScalarFieldEnum[]
  }


  /**
   * Procedure without action
   */
  export type ProcedureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Procedure
     */
    select?: ProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureInclude<ExtArgs> | null
  }



  /**
   * Model ProcedureByPlan
   */

  export type AggregateProcedureByPlan = {
    _count: ProcedureByPlanCountAggregateOutputType | null
    _avg: ProcedureByPlanAvgAggregateOutputType | null
    _sum: ProcedureByPlanSumAggregateOutputType | null
    _min: ProcedureByPlanMinAggregateOutputType | null
    _max: ProcedureByPlanMaxAggregateOutputType | null
  }

  export type ProcedureByPlanAvgAggregateOutputType = {
    id: number | null
    share: number | null
    valueToAnticipate: number | null
    procedureId: number | null
    planId: number | null
  }

  export type ProcedureByPlanSumAggregateOutputType = {
    id: number | null
    share: number | null
    valueToAnticipate: number | null
    procedureId: number | null
    planId: number | null
  }

  export type ProcedureByPlanMinAggregateOutputType = {
    id: number | null
    availableLimit: string | null
    share: number | null
    valueToAnticipate: number | null
    procedureId: number | null
    planId: number | null
  }

  export type ProcedureByPlanMaxAggregateOutputType = {
    id: number | null
    availableLimit: string | null
    share: number | null
    valueToAnticipate: number | null
    procedureId: number | null
    planId: number | null
  }

  export type ProcedureByPlanCountAggregateOutputType = {
    id: number
    availableLimit: number
    share: number
    valueToAnticipate: number
    procedureId: number
    planId: number
    _all: number
  }


  export type ProcedureByPlanAvgAggregateInputType = {
    id?: true
    share?: true
    valueToAnticipate?: true
    procedureId?: true
    planId?: true
  }

  export type ProcedureByPlanSumAggregateInputType = {
    id?: true
    share?: true
    valueToAnticipate?: true
    procedureId?: true
    planId?: true
  }

  export type ProcedureByPlanMinAggregateInputType = {
    id?: true
    availableLimit?: true
    share?: true
    valueToAnticipate?: true
    procedureId?: true
    planId?: true
  }

  export type ProcedureByPlanMaxAggregateInputType = {
    id?: true
    availableLimit?: true
    share?: true
    valueToAnticipate?: true
    procedureId?: true
    planId?: true
  }

  export type ProcedureByPlanCountAggregateInputType = {
    id?: true
    availableLimit?: true
    share?: true
    valueToAnticipate?: true
    procedureId?: true
    planId?: true
    _all?: true
  }

  export type ProcedureByPlanAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcedureByPlan to aggregate.
     */
    where?: ProcedureByPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcedureByPlans to fetch.
     */
    orderBy?: ProcedureByPlanOrderByWithRelationInput | ProcedureByPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProcedureByPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcedureByPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcedureByPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProcedureByPlans
    **/
    _count?: true | ProcedureByPlanCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProcedureByPlanAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProcedureByPlanSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProcedureByPlanMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProcedureByPlanMaxAggregateInputType
  }

  export type GetProcedureByPlanAggregateType<T extends ProcedureByPlanAggregateArgs> = {
        [P in keyof T & keyof AggregateProcedureByPlan]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProcedureByPlan[P]>
      : GetScalarType<T[P], AggregateProcedureByPlan[P]>
  }




  export type ProcedureByPlanGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProcedureByPlanWhereInput
    orderBy?: ProcedureByPlanOrderByWithAggregationInput | ProcedureByPlanOrderByWithAggregationInput[]
    by: ProcedureByPlanScalarFieldEnum[] | ProcedureByPlanScalarFieldEnum
    having?: ProcedureByPlanScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProcedureByPlanCountAggregateInputType | true
    _avg?: ProcedureByPlanAvgAggregateInputType
    _sum?: ProcedureByPlanSumAggregateInputType
    _min?: ProcedureByPlanMinAggregateInputType
    _max?: ProcedureByPlanMaxAggregateInputType
  }

  export type ProcedureByPlanGroupByOutputType = {
    id: number
    availableLimit: string
    share: number
    valueToAnticipate: number | null
    procedureId: number
    planId: number
    _count: ProcedureByPlanCountAggregateOutputType | null
    _avg: ProcedureByPlanAvgAggregateOutputType | null
    _sum: ProcedureByPlanSumAggregateOutputType | null
    _min: ProcedureByPlanMinAggregateOutputType | null
    _max: ProcedureByPlanMaxAggregateOutputType | null
  }

  type GetProcedureByPlanGroupByPayload<T extends ProcedureByPlanGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProcedureByPlanGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProcedureByPlanGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProcedureByPlanGroupByOutputType[P]>
            : GetScalarType<T[P], ProcedureByPlanGroupByOutputType[P]>
        }
      >
    >


  export type ProcedureByPlanSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    availableLimit?: boolean
    share?: boolean
    valueToAnticipate?: boolean
    procedureId?: boolean
    planId?: boolean
    procedure?: boolean | ProcedureDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["procedureByPlan"]>

  export type ProcedureByPlanSelectScalar = {
    id?: boolean
    availableLimit?: boolean
    share?: boolean
    valueToAnticipate?: boolean
    procedureId?: boolean
    planId?: boolean
  }

  export type ProcedureByPlanInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    procedure?: boolean | ProcedureDefaultArgs<ExtArgs>
    plan?: boolean | PlanDefaultArgs<ExtArgs>
  }


  export type $ProcedureByPlanPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProcedureByPlan"
    objects: {
      procedure: Prisma.$ProcedurePayload<ExtArgs>
      plan: Prisma.$PlanPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      availableLimit: string
      share: number
      valueToAnticipate: number | null
      procedureId: number
      planId: number
    }, ExtArgs["result"]["procedureByPlan"]>
    composites: {}
  }


  type ProcedureByPlanGetPayload<S extends boolean | null | undefined | ProcedureByPlanDefaultArgs> = $Result.GetResult<Prisma.$ProcedureByPlanPayload, S>

  type ProcedureByPlanCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProcedureByPlanFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProcedureByPlanCountAggregateInputType | true
    }

  export interface ProcedureByPlanDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProcedureByPlan'], meta: { name: 'ProcedureByPlan' } }
    /**
     * Find zero or one ProcedureByPlan that matches the filter.
     * @param {ProcedureByPlanFindUniqueArgs} args - Arguments to find a ProcedureByPlan
     * @example
     * // Get one ProcedureByPlan
     * const procedureByPlan = await prisma.procedureByPlan.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProcedureByPlanFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureByPlanFindUniqueArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProcedureByPlan that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProcedureByPlanFindUniqueOrThrowArgs} args - Arguments to find a ProcedureByPlan
     * @example
     * // Get one ProcedureByPlan
     * const procedureByPlan = await prisma.procedureByPlan.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProcedureByPlanFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureByPlanFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProcedureByPlan that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanFindFirstArgs} args - Arguments to find a ProcedureByPlan
     * @example
     * // Get one ProcedureByPlan
     * const procedureByPlan = await prisma.procedureByPlan.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProcedureByPlanFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureByPlanFindFirstArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProcedureByPlan that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanFindFirstOrThrowArgs} args - Arguments to find a ProcedureByPlan
     * @example
     * // Get one ProcedureByPlan
     * const procedureByPlan = await prisma.procedureByPlan.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProcedureByPlanFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureByPlanFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProcedureByPlans that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProcedureByPlans
     * const procedureByPlans = await prisma.procedureByPlan.findMany()
     * 
     * // Get first 10 ProcedureByPlans
     * const procedureByPlans = await prisma.procedureByPlan.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const procedureByPlanWithIdOnly = await prisma.procedureByPlan.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProcedureByPlanFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureByPlanFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProcedureByPlan.
     * @param {ProcedureByPlanCreateArgs} args - Arguments to create a ProcedureByPlan.
     * @example
     * // Create one ProcedureByPlan
     * const ProcedureByPlan = await prisma.procedureByPlan.create({
     *   data: {
     *     // ... data to create a ProcedureByPlan
     *   }
     * })
     * 
    **/
    create<T extends ProcedureByPlanCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureByPlanCreateArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a ProcedureByPlan.
     * @param {ProcedureByPlanDeleteArgs} args - Arguments to delete one ProcedureByPlan.
     * @example
     * // Delete one ProcedureByPlan
     * const ProcedureByPlan = await prisma.procedureByPlan.delete({
     *   where: {
     *     // ... filter to delete one ProcedureByPlan
     *   }
     * })
     * 
    **/
    delete<T extends ProcedureByPlanDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureByPlanDeleteArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProcedureByPlan.
     * @param {ProcedureByPlanUpdateArgs} args - Arguments to update one ProcedureByPlan.
     * @example
     * // Update one ProcedureByPlan
     * const procedureByPlan = await prisma.procedureByPlan.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProcedureByPlanUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureByPlanUpdateArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProcedureByPlans.
     * @param {ProcedureByPlanDeleteManyArgs} args - Arguments to filter ProcedureByPlans to delete.
     * @example
     * // Delete a few ProcedureByPlans
     * const { count } = await prisma.procedureByPlan.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProcedureByPlanDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProcedureByPlanDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProcedureByPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProcedureByPlans
     * const procedureByPlan = await prisma.procedureByPlan.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProcedureByPlanUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureByPlanUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProcedureByPlan.
     * @param {ProcedureByPlanUpsertArgs} args - Arguments to update or create a ProcedureByPlan.
     * @example
     * // Update or create a ProcedureByPlan
     * const procedureByPlan = await prisma.procedureByPlan.upsert({
     *   create: {
     *     // ... data to create a ProcedureByPlan
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProcedureByPlan we want to update
     *   }
     * })
    **/
    upsert<T extends ProcedureByPlanUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProcedureByPlanUpsertArgs<ExtArgs>>
    ): Prisma__ProcedureByPlanClient<$Result.GetResult<Prisma.$ProcedureByPlanPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of ProcedureByPlans.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanCountArgs} args - Arguments to filter ProcedureByPlans to count.
     * @example
     * // Count the number of ProcedureByPlans
     * const count = await prisma.procedureByPlan.count({
     *   where: {
     *     // ... the filter for the ProcedureByPlans we want to count
     *   }
     * })
    **/
    count<T extends ProcedureByPlanCountArgs>(
      args?: Subset<T, ProcedureByPlanCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProcedureByPlanCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProcedureByPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProcedureByPlanAggregateArgs>(args: Subset<T, ProcedureByPlanAggregateArgs>): Prisma.PrismaPromise<GetProcedureByPlanAggregateType<T>>

    /**
     * Group by ProcedureByPlan.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProcedureByPlanGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProcedureByPlanGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProcedureByPlanGroupByArgs['orderBy'] }
        : { orderBy?: ProcedureByPlanGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProcedureByPlanGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProcedureByPlanGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProcedureByPlan model
   */
  readonly fields: ProcedureByPlanFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProcedureByPlan.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProcedureByPlanClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    procedure<T extends ProcedureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcedureDefaultArgs<ExtArgs>>): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    plan<T extends PlanDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PlanDefaultArgs<ExtArgs>>): Prisma__PlanClient<$Result.GetResult<Prisma.$PlanPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the ProcedureByPlan model
   */ 
  interface ProcedureByPlanFieldRefs {
    readonly id: FieldRef<"ProcedureByPlan", 'Int'>
    readonly availableLimit: FieldRef<"ProcedureByPlan", 'String'>
    readonly share: FieldRef<"ProcedureByPlan", 'Float'>
    readonly valueToAnticipate: FieldRef<"ProcedureByPlan", 'Float'>
    readonly procedureId: FieldRef<"ProcedureByPlan", 'Int'>
    readonly planId: FieldRef<"ProcedureByPlan", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * ProcedureByPlan findUnique
   */
  export type ProcedureByPlanFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProcedureByPlan to fetch.
     */
    where: ProcedureByPlanWhereUniqueInput
  }


  /**
   * ProcedureByPlan findUniqueOrThrow
   */
  export type ProcedureByPlanFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProcedureByPlan to fetch.
     */
    where: ProcedureByPlanWhereUniqueInput
  }


  /**
   * ProcedureByPlan findFirst
   */
  export type ProcedureByPlanFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProcedureByPlan to fetch.
     */
    where?: ProcedureByPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcedureByPlans to fetch.
     */
    orderBy?: ProcedureByPlanOrderByWithRelationInput | ProcedureByPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcedureByPlans.
     */
    cursor?: ProcedureByPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcedureByPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcedureByPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcedureByPlans.
     */
    distinct?: ProcedureByPlanScalarFieldEnum | ProcedureByPlanScalarFieldEnum[]
  }


  /**
   * ProcedureByPlan findFirstOrThrow
   */
  export type ProcedureByPlanFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProcedureByPlan to fetch.
     */
    where?: ProcedureByPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcedureByPlans to fetch.
     */
    orderBy?: ProcedureByPlanOrderByWithRelationInput | ProcedureByPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProcedureByPlans.
     */
    cursor?: ProcedureByPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcedureByPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcedureByPlans.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProcedureByPlans.
     */
    distinct?: ProcedureByPlanScalarFieldEnum | ProcedureByPlanScalarFieldEnum[]
  }


  /**
   * ProcedureByPlan findMany
   */
  export type ProcedureByPlanFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * Filter, which ProcedureByPlans to fetch.
     */
    where?: ProcedureByPlanWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProcedureByPlans to fetch.
     */
    orderBy?: ProcedureByPlanOrderByWithRelationInput | ProcedureByPlanOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProcedureByPlans.
     */
    cursor?: ProcedureByPlanWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProcedureByPlans from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProcedureByPlans.
     */
    skip?: number
    distinct?: ProcedureByPlanScalarFieldEnum | ProcedureByPlanScalarFieldEnum[]
  }


  /**
   * ProcedureByPlan create
   */
  export type ProcedureByPlanCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * The data needed to create a ProcedureByPlan.
     */
    data: XOR<ProcedureByPlanCreateInput, ProcedureByPlanUncheckedCreateInput>
  }


  /**
   * ProcedureByPlan update
   */
  export type ProcedureByPlanUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * The data needed to update a ProcedureByPlan.
     */
    data: XOR<ProcedureByPlanUpdateInput, ProcedureByPlanUncheckedUpdateInput>
    /**
     * Choose, which ProcedureByPlan to update.
     */
    where: ProcedureByPlanWhereUniqueInput
  }


  /**
   * ProcedureByPlan updateMany
   */
  export type ProcedureByPlanUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProcedureByPlans.
     */
    data: XOR<ProcedureByPlanUpdateManyMutationInput, ProcedureByPlanUncheckedUpdateManyInput>
    /**
     * Filter which ProcedureByPlans to update
     */
    where?: ProcedureByPlanWhereInput
  }


  /**
   * ProcedureByPlan upsert
   */
  export type ProcedureByPlanUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * The filter to search for the ProcedureByPlan to update in case it exists.
     */
    where: ProcedureByPlanWhereUniqueInput
    /**
     * In case the ProcedureByPlan found by the `where` argument doesn't exist, create a new ProcedureByPlan with this data.
     */
    create: XOR<ProcedureByPlanCreateInput, ProcedureByPlanUncheckedCreateInput>
    /**
     * In case the ProcedureByPlan was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProcedureByPlanUpdateInput, ProcedureByPlanUncheckedUpdateInput>
  }


  /**
   * ProcedureByPlan delete
   */
  export type ProcedureByPlanDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
    /**
     * Filter which ProcedureByPlan to delete.
     */
    where: ProcedureByPlanWhereUniqueInput
  }


  /**
   * ProcedureByPlan deleteMany
   */
  export type ProcedureByPlanDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProcedureByPlans to delete
     */
    where?: ProcedureByPlanWhereInput
  }


  /**
   * ProcedureByPlan without action
   */
  export type ProcedureByPlanDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProcedureByPlan
     */
    select?: ProcedureByPlanSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProcedureByPlanInclude<ExtArgs> | null
  }



  /**
   * Model PolicyProcedure
   */

  export type AggregatePolicyProcedure = {
    _count: PolicyProcedureCountAggregateOutputType | null
    _avg: PolicyProcedureAvgAggregateOutputType | null
    _sum: PolicyProcedureSumAggregateOutputType | null
    _min: PolicyProcedureMinAggregateOutputType | null
    _max: PolicyProcedureMaxAggregateOutputType | null
  }

  export type PolicyProcedureAvgAggregateOutputType = {
    id: number | null
    policyId: number | null
    procedureId: number | null
    used: number | null
  }

  export type PolicyProcedureSumAggregateOutputType = {
    id: number | null
    policyId: number | null
    procedureId: number | null
    used: number | null
  }

  export type PolicyProcedureMinAggregateOutputType = {
    id: number | null
    policyId: number | null
    procedureId: number | null
    used: number | null
  }

  export type PolicyProcedureMaxAggregateOutputType = {
    id: number | null
    policyId: number | null
    procedureId: number | null
    used: number | null
  }

  export type PolicyProcedureCountAggregateOutputType = {
    id: number
    policyId: number
    procedureId: number
    used: number
    _all: number
  }


  export type PolicyProcedureAvgAggregateInputType = {
    id?: true
    policyId?: true
    procedureId?: true
    used?: true
  }

  export type PolicyProcedureSumAggregateInputType = {
    id?: true
    policyId?: true
    procedureId?: true
    used?: true
  }

  export type PolicyProcedureMinAggregateInputType = {
    id?: true
    policyId?: true
    procedureId?: true
    used?: true
  }

  export type PolicyProcedureMaxAggregateInputType = {
    id?: true
    policyId?: true
    procedureId?: true
    used?: true
  }

  export type PolicyProcedureCountAggregateInputType = {
    id?: true
    policyId?: true
    procedureId?: true
    used?: true
    _all?: true
  }

  export type PolicyProcedureAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PolicyProcedure to aggregate.
     */
    where?: PolicyProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PolicyProcedures to fetch.
     */
    orderBy?: PolicyProcedureOrderByWithRelationInput | PolicyProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PolicyProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PolicyProcedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PolicyProcedures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PolicyProcedures
    **/
    _count?: true | PolicyProcedureCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PolicyProcedureAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PolicyProcedureSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PolicyProcedureMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PolicyProcedureMaxAggregateInputType
  }

  export type GetPolicyProcedureAggregateType<T extends PolicyProcedureAggregateArgs> = {
        [P in keyof T & keyof AggregatePolicyProcedure]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePolicyProcedure[P]>
      : GetScalarType<T[P], AggregatePolicyProcedure[P]>
  }




  export type PolicyProcedureGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PolicyProcedureWhereInput
    orderBy?: PolicyProcedureOrderByWithAggregationInput | PolicyProcedureOrderByWithAggregationInput[]
    by: PolicyProcedureScalarFieldEnum[] | PolicyProcedureScalarFieldEnum
    having?: PolicyProcedureScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PolicyProcedureCountAggregateInputType | true
    _avg?: PolicyProcedureAvgAggregateInputType
    _sum?: PolicyProcedureSumAggregateInputType
    _min?: PolicyProcedureMinAggregateInputType
    _max?: PolicyProcedureMaxAggregateInputType
  }

  export type PolicyProcedureGroupByOutputType = {
    id: number
    policyId: number
    procedureId: number
    used: number
    _count: PolicyProcedureCountAggregateOutputType | null
    _avg: PolicyProcedureAvgAggregateOutputType | null
    _sum: PolicyProcedureSumAggregateOutputType | null
    _min: PolicyProcedureMinAggregateOutputType | null
    _max: PolicyProcedureMaxAggregateOutputType | null
  }

  type GetPolicyProcedureGroupByPayload<T extends PolicyProcedureGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PolicyProcedureGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PolicyProcedureGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PolicyProcedureGroupByOutputType[P]>
            : GetScalarType<T[P], PolicyProcedureGroupByOutputType[P]>
        }
      >
    >


  export type PolicyProcedureSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    policyId?: boolean
    procedureId?: boolean
    used?: boolean
    policy?: boolean | PolicyDefaultArgs<ExtArgs>
    procedure?: boolean | ProcedureDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["policyProcedure"]>

  export type PolicyProcedureSelectScalar = {
    id?: boolean
    policyId?: boolean
    procedureId?: boolean
    used?: boolean
  }

  export type PolicyProcedureInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    policy?: boolean | PolicyDefaultArgs<ExtArgs>
    procedure?: boolean | ProcedureDefaultArgs<ExtArgs>
  }


  export type $PolicyProcedurePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PolicyProcedure"
    objects: {
      policy: Prisma.$PolicyPayload<ExtArgs>
      procedure: Prisma.$ProcedurePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      policyId: number
      procedureId: number
      used: number
    }, ExtArgs["result"]["policyProcedure"]>
    composites: {}
  }


  type PolicyProcedureGetPayload<S extends boolean | null | undefined | PolicyProcedureDefaultArgs> = $Result.GetResult<Prisma.$PolicyProcedurePayload, S>

  type PolicyProcedureCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PolicyProcedureFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PolicyProcedureCountAggregateInputType | true
    }

  export interface PolicyProcedureDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PolicyProcedure'], meta: { name: 'PolicyProcedure' } }
    /**
     * Find zero or one PolicyProcedure that matches the filter.
     * @param {PolicyProcedureFindUniqueArgs} args - Arguments to find a PolicyProcedure
     * @example
     * // Get one PolicyProcedure
     * const policyProcedure = await prisma.policyProcedure.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PolicyProcedureFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyProcedureFindUniqueArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PolicyProcedure that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PolicyProcedureFindUniqueOrThrowArgs} args - Arguments to find a PolicyProcedure
     * @example
     * // Get one PolicyProcedure
     * const policyProcedure = await prisma.policyProcedure.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PolicyProcedureFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyProcedureFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PolicyProcedure that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureFindFirstArgs} args - Arguments to find a PolicyProcedure
     * @example
     * // Get one PolicyProcedure
     * const policyProcedure = await prisma.policyProcedure.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PolicyProcedureFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyProcedureFindFirstArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PolicyProcedure that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureFindFirstOrThrowArgs} args - Arguments to find a PolicyProcedure
     * @example
     * // Get one PolicyProcedure
     * const policyProcedure = await prisma.policyProcedure.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PolicyProcedureFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyProcedureFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PolicyProcedures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PolicyProcedures
     * const policyProcedures = await prisma.policyProcedure.findMany()
     * 
     * // Get first 10 PolicyProcedures
     * const policyProcedures = await prisma.policyProcedure.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const policyProcedureWithIdOnly = await prisma.policyProcedure.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PolicyProcedureFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyProcedureFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PolicyProcedure.
     * @param {PolicyProcedureCreateArgs} args - Arguments to create a PolicyProcedure.
     * @example
     * // Create one PolicyProcedure
     * const PolicyProcedure = await prisma.policyProcedure.create({
     *   data: {
     *     // ... data to create a PolicyProcedure
     *   }
     * })
     * 
    **/
    create<T extends PolicyProcedureCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyProcedureCreateArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a PolicyProcedure.
     * @param {PolicyProcedureDeleteArgs} args - Arguments to delete one PolicyProcedure.
     * @example
     * // Delete one PolicyProcedure
     * const PolicyProcedure = await prisma.policyProcedure.delete({
     *   where: {
     *     // ... filter to delete one PolicyProcedure
     *   }
     * })
     * 
    **/
    delete<T extends PolicyProcedureDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyProcedureDeleteArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PolicyProcedure.
     * @param {PolicyProcedureUpdateArgs} args - Arguments to update one PolicyProcedure.
     * @example
     * // Update one PolicyProcedure
     * const policyProcedure = await prisma.policyProcedure.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PolicyProcedureUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyProcedureUpdateArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PolicyProcedures.
     * @param {PolicyProcedureDeleteManyArgs} args - Arguments to filter PolicyProcedures to delete.
     * @example
     * // Delete a few PolicyProcedures
     * const { count } = await prisma.policyProcedure.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PolicyProcedureDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PolicyProcedureDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PolicyProcedures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PolicyProcedures
     * const policyProcedure = await prisma.policyProcedure.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PolicyProcedureUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyProcedureUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PolicyProcedure.
     * @param {PolicyProcedureUpsertArgs} args - Arguments to update or create a PolicyProcedure.
     * @example
     * // Update or create a PolicyProcedure
     * const policyProcedure = await prisma.policyProcedure.upsert({
     *   create: {
     *     // ... data to create a PolicyProcedure
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PolicyProcedure we want to update
     *   }
     * })
    **/
    upsert<T extends PolicyProcedureUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PolicyProcedureUpsertArgs<ExtArgs>>
    ): Prisma__PolicyProcedureClient<$Result.GetResult<Prisma.$PolicyProcedurePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PolicyProcedures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureCountArgs} args - Arguments to filter PolicyProcedures to count.
     * @example
     * // Count the number of PolicyProcedures
     * const count = await prisma.policyProcedure.count({
     *   where: {
     *     // ... the filter for the PolicyProcedures we want to count
     *   }
     * })
    **/
    count<T extends PolicyProcedureCountArgs>(
      args?: Subset<T, PolicyProcedureCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PolicyProcedureCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PolicyProcedure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PolicyProcedureAggregateArgs>(args: Subset<T, PolicyProcedureAggregateArgs>): Prisma.PrismaPromise<GetPolicyProcedureAggregateType<T>>

    /**
     * Group by PolicyProcedure.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PolicyProcedureGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PolicyProcedureGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PolicyProcedureGroupByArgs['orderBy'] }
        : { orderBy?: PolicyProcedureGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PolicyProcedureGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPolicyProcedureGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PolicyProcedure model
   */
  readonly fields: PolicyProcedureFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PolicyProcedure.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PolicyProcedureClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    policy<T extends PolicyDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PolicyDefaultArgs<ExtArgs>>): Prisma__PolicyClient<$Result.GetResult<Prisma.$PolicyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    procedure<T extends ProcedureDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProcedureDefaultArgs<ExtArgs>>): Prisma__ProcedureClient<$Result.GetResult<Prisma.$ProcedurePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PolicyProcedure model
   */ 
  interface PolicyProcedureFieldRefs {
    readonly id: FieldRef<"PolicyProcedure", 'Int'>
    readonly policyId: FieldRef<"PolicyProcedure", 'Int'>
    readonly procedureId: FieldRef<"PolicyProcedure", 'Int'>
    readonly used: FieldRef<"PolicyProcedure", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * PolicyProcedure findUnique
   */
  export type PolicyProcedureFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * Filter, which PolicyProcedure to fetch.
     */
    where: PolicyProcedureWhereUniqueInput
  }


  /**
   * PolicyProcedure findUniqueOrThrow
   */
  export type PolicyProcedureFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * Filter, which PolicyProcedure to fetch.
     */
    where: PolicyProcedureWhereUniqueInput
  }


  /**
   * PolicyProcedure findFirst
   */
  export type PolicyProcedureFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * Filter, which PolicyProcedure to fetch.
     */
    where?: PolicyProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PolicyProcedures to fetch.
     */
    orderBy?: PolicyProcedureOrderByWithRelationInput | PolicyProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PolicyProcedures.
     */
    cursor?: PolicyProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PolicyProcedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PolicyProcedures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PolicyProcedures.
     */
    distinct?: PolicyProcedureScalarFieldEnum | PolicyProcedureScalarFieldEnum[]
  }


  /**
   * PolicyProcedure findFirstOrThrow
   */
  export type PolicyProcedureFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * Filter, which PolicyProcedure to fetch.
     */
    where?: PolicyProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PolicyProcedures to fetch.
     */
    orderBy?: PolicyProcedureOrderByWithRelationInput | PolicyProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PolicyProcedures.
     */
    cursor?: PolicyProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PolicyProcedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PolicyProcedures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PolicyProcedures.
     */
    distinct?: PolicyProcedureScalarFieldEnum | PolicyProcedureScalarFieldEnum[]
  }


  /**
   * PolicyProcedure findMany
   */
  export type PolicyProcedureFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * Filter, which PolicyProcedures to fetch.
     */
    where?: PolicyProcedureWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PolicyProcedures to fetch.
     */
    orderBy?: PolicyProcedureOrderByWithRelationInput | PolicyProcedureOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PolicyProcedures.
     */
    cursor?: PolicyProcedureWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PolicyProcedures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PolicyProcedures.
     */
    skip?: number
    distinct?: PolicyProcedureScalarFieldEnum | PolicyProcedureScalarFieldEnum[]
  }


  /**
   * PolicyProcedure create
   */
  export type PolicyProcedureCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * The data needed to create a PolicyProcedure.
     */
    data: XOR<PolicyProcedureCreateInput, PolicyProcedureUncheckedCreateInput>
  }


  /**
   * PolicyProcedure update
   */
  export type PolicyProcedureUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * The data needed to update a PolicyProcedure.
     */
    data: XOR<PolicyProcedureUpdateInput, PolicyProcedureUncheckedUpdateInput>
    /**
     * Choose, which PolicyProcedure to update.
     */
    where: PolicyProcedureWhereUniqueInput
  }


  /**
   * PolicyProcedure updateMany
   */
  export type PolicyProcedureUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PolicyProcedures.
     */
    data: XOR<PolicyProcedureUpdateManyMutationInput, PolicyProcedureUncheckedUpdateManyInput>
    /**
     * Filter which PolicyProcedures to update
     */
    where?: PolicyProcedureWhereInput
  }


  /**
   * PolicyProcedure upsert
   */
  export type PolicyProcedureUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * The filter to search for the PolicyProcedure to update in case it exists.
     */
    where: PolicyProcedureWhereUniqueInput
    /**
     * In case the PolicyProcedure found by the `where` argument doesn't exist, create a new PolicyProcedure with this data.
     */
    create: XOR<PolicyProcedureCreateInput, PolicyProcedureUncheckedCreateInput>
    /**
     * In case the PolicyProcedure was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PolicyProcedureUpdateInput, PolicyProcedureUncheckedUpdateInput>
  }


  /**
   * PolicyProcedure delete
   */
  export type PolicyProcedureDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
    /**
     * Filter which PolicyProcedure to delete.
     */
    where: PolicyProcedureWhereUniqueInput
  }


  /**
   * PolicyProcedure deleteMany
   */
  export type PolicyProcedureDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PolicyProcedures to delete
     */
    where?: PolicyProcedureWhereInput
  }


  /**
   * PolicyProcedure without action
   */
  export type PolicyProcedureDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PolicyProcedure
     */
    select?: PolicyProcedureSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: PolicyProcedureInclude<ExtArgs> | null
  }



  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    id: number | null
  }

  export type AccountSumAggregateOutputType = {
    id: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountMaxAggregateOutputType = {
    id: number | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    id?: true
  }

  export type AccountSumAggregateInputType = {
    id?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: number
    name: string
    createdAt: Date
    updatedAt: Date
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    users?: boolean | Account$usersArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Account$usersArgs<ExtArgs>
    _count?: boolean | AccountCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      name: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    users<T extends Account$usersArgs<ExtArgs> = {}>(args?: Subset<T, Account$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'Int'>
    readonly name: FieldRef<"Account", 'String'>
    readonly createdAt: FieldRef<"Account", 'DateTime'>
    readonly updatedAt: FieldRef<"Account", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }


  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }


  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }


  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }


  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }


  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }


  /**
   * Account.users
   */
  export type Account$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AccountInclude<ExtArgs> | null
  }



  /**
   * Model Address
   */

  export type AggregateAddress = {
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  export type AddressAvgAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AddressSumAggregateOutputType = {
    id: number | null
    userId: number | null
  }

  export type AddressMinAggregateOutputType = {
    id: number | null
    street: string | null
    number: string | null
    complement: string | null
    neighborhood: string | null
    zipcode: string | null
    city: string | null
    state: string | null
    addressType: string | null
    userId: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type AddressMaxAggregateOutputType = {
    id: number | null
    street: string | null
    number: string | null
    complement: string | null
    neighborhood: string | null
    zipcode: string | null
    city: string | null
    state: string | null
    addressType: string | null
    userId: number | null
    updatedAt: Date | null
    createdAt: Date | null
  }

  export type AddressCountAggregateOutputType = {
    id: number
    street: number
    number: number
    complement: number
    neighborhood: number
    zipcode: number
    city: number
    state: number
    addressType: number
    userId: number
    updatedAt: number
    createdAt: number
    _all: number
  }


  export type AddressAvgAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AddressSumAggregateInputType = {
    id?: true
    userId?: true
  }

  export type AddressMinAggregateInputType = {
    id?: true
    street?: true
    number?: true
    complement?: true
    neighborhood?: true
    zipcode?: true
    city?: true
    state?: true
    addressType?: true
    userId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type AddressMaxAggregateInputType = {
    id?: true
    street?: true
    number?: true
    complement?: true
    neighborhood?: true
    zipcode?: true
    city?: true
    state?: true
    addressType?: true
    userId?: true
    updatedAt?: true
    createdAt?: true
  }

  export type AddressCountAggregateInputType = {
    id?: true
    street?: true
    number?: true
    complement?: true
    neighborhood?: true
    zipcode?: true
    city?: true
    state?: true
    addressType?: true
    userId?: true
    updatedAt?: true
    createdAt?: true
    _all?: true
  }

  export type AddressAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Address to aggregate.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Addresses
    **/
    _count?: true | AddressCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AddressAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AddressSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AddressMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AddressMaxAggregateInputType
  }

  export type GetAddressAggregateType<T extends AddressAggregateArgs> = {
        [P in keyof T & keyof AggregateAddress]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAddress[P]>
      : GetScalarType<T[P], AggregateAddress[P]>
  }




  export type AddressGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AddressWhereInput
    orderBy?: AddressOrderByWithAggregationInput | AddressOrderByWithAggregationInput[]
    by: AddressScalarFieldEnum[] | AddressScalarFieldEnum
    having?: AddressScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AddressCountAggregateInputType | true
    _avg?: AddressAvgAggregateInputType
    _sum?: AddressSumAggregateInputType
    _min?: AddressMinAggregateInputType
    _max?: AddressMaxAggregateInputType
  }

  export type AddressGroupByOutputType = {
    id: number
    street: string
    number: string
    complement: string | null
    neighborhood: string
    zipcode: string
    city: string
    state: string
    addressType: string
    userId: number | null
    updatedAt: Date
    createdAt: Date
    _count: AddressCountAggregateOutputType | null
    _avg: AddressAvgAggregateOutputType | null
    _sum: AddressSumAggregateOutputType | null
    _min: AddressMinAggregateOutputType | null
    _max: AddressMaxAggregateOutputType | null
  }

  type GetAddressGroupByPayload<T extends AddressGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AddressGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AddressGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AddressGroupByOutputType[P]>
            : GetScalarType<T[P], AddressGroupByOutputType[P]>
        }
      >
    >


  export type AddressSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    street?: boolean
    number?: boolean
    complement?: boolean
    neighborhood?: boolean
    zipcode?: boolean
    city?: boolean
    state?: boolean
    addressType?: boolean
    userId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
    user?: boolean | Address$userArgs<ExtArgs>
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    id?: boolean
    street?: boolean
    number?: boolean
    complement?: boolean
    neighborhood?: boolean
    zipcode?: boolean
    city?: boolean
    state?: boolean
    addressType?: boolean
    userId?: boolean
    updatedAt?: boolean
    createdAt?: boolean
  }

  export type AddressInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | Address$userArgs<ExtArgs>
  }


  export type $AddressPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Address"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      street: string
      number: string
      complement: string | null
      neighborhood: string
      zipcode: string
      city: string
      state: string
      addressType: string
      userId: number | null
      updatedAt: Date
      createdAt: Date
    }, ExtArgs["result"]["address"]>
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>

  type AddressCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AddressFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AddressCountAggregateInputType | true
    }

  export interface AddressDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Address'], meta: { name: 'Address' } }
    /**
     * Find zero or one Address that matches the filter.
     * @param {AddressFindUniqueArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AddressFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AddressFindUniqueArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Address that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AddressFindUniqueOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AddressFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Address that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AddressFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Address that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindFirstOrThrowArgs} args - Arguments to find a Address
     * @example
     * // Get one Address
     * const address = await prisma.address.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AddressFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Addresses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Addresses
     * const addresses = await prisma.address.findMany()
     * 
     * // Get first 10 Addresses
     * const addresses = await prisma.address.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const addressWithIdOnly = await prisma.address.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AddressFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Address.
     * @param {AddressCreateArgs} args - Arguments to create a Address.
     * @example
     * // Create one Address
     * const Address = await prisma.address.create({
     *   data: {
     *     // ... data to create a Address
     *   }
     * })
     * 
    **/
    create<T extends AddressCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressCreateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Delete a Address.
     * @param {AddressDeleteArgs} args - Arguments to delete one Address.
     * @example
     * // Delete one Address
     * const Address = await prisma.address.delete({
     *   where: {
     *     // ... filter to delete one Address
     *   }
     * })
     * 
    **/
    delete<T extends AddressDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AddressDeleteArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Address.
     * @param {AddressUpdateArgs} args - Arguments to update one Address.
     * @example
     * // Update one Address
     * const address = await prisma.address.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AddressUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Addresses.
     * @param {AddressDeleteManyArgs} args - Arguments to filter Addresses to delete.
     * @example
     * // Delete a few Addresses
     * const { count } = await prisma.address.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AddressDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AddressDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Addresses
     * const address = await prisma.address.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AddressUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Address.
     * @param {AddressUpsertArgs} args - Arguments to update or create a Address.
     * @example
     * // Update or create a Address
     * const address = await prisma.address.upsert({
     *   create: {
     *     // ... data to create a Address
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Address we want to update
     *   }
     * })
    **/
    upsert<T extends AddressUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AddressUpsertArgs<ExtArgs>>
    ): Prisma__AddressClient<$Result.GetResult<Prisma.$AddressPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Addresses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressCountArgs} args - Arguments to filter Addresses to count.
     * @example
     * // Count the number of Addresses
     * const count = await prisma.address.count({
     *   where: {
     *     // ... the filter for the Addresses we want to count
     *   }
     * })
    **/
    count<T extends AddressCountArgs>(
      args?: Subset<T, AddressCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AddressCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AddressAggregateArgs>(args: Subset<T, AddressAggregateArgs>): Prisma.PrismaPromise<GetAddressAggregateType<T>>

    /**
     * Group by Address.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AddressGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AddressGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AddressGroupByArgs['orderBy'] }
        : { orderBy?: AddressGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AddressGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAddressGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Address model
   */
  readonly fields: AddressFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Address.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AddressClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends Address$userArgs<ExtArgs> = {}>(args?: Subset<T, Address$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly id: FieldRef<"Address", 'Int'>
    readonly street: FieldRef<"Address", 'String'>
    readonly number: FieldRef<"Address", 'String'>
    readonly complement: FieldRef<"Address", 'String'>
    readonly neighborhood: FieldRef<"Address", 'String'>
    readonly zipcode: FieldRef<"Address", 'String'>
    readonly city: FieldRef<"Address", 'String'>
    readonly state: FieldRef<"Address", 'String'>
    readonly addressType: FieldRef<"Address", 'String'>
    readonly userId: FieldRef<"Address", 'Int'>
    readonly updatedAt: FieldRef<"Address", 'DateTime'>
    readonly createdAt: FieldRef<"Address", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Address findUnique
   */
  export type AddressFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findUniqueOrThrow
   */
  export type AddressFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address findFirst
   */
  export type AddressFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findFirstOrThrow
   */
  export type AddressFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Address to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Addresses.
     */
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address findMany
   */
  export type AddressFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter, which Addresses to fetch.
     */
    where?: AddressWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Addresses to fetch.
     */
    orderBy?: AddressOrderByWithRelationInput | AddressOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Addresses.
     */
    cursor?: AddressWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Addresses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Addresses.
     */
    skip?: number
    distinct?: AddressScalarFieldEnum | AddressScalarFieldEnum[]
  }


  /**
   * Address create
   */
  export type AddressCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to create a Address.
     */
    data: XOR<AddressCreateInput, AddressUncheckedCreateInput>
  }


  /**
   * Address update
   */
  export type AddressUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The data needed to update a Address.
     */
    data: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
    /**
     * Choose, which Address to update.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address updateMany
   */
  export type AddressUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Addresses.
     */
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyInput>
    /**
     * Filter which Addresses to update
     */
    where?: AddressWhereInput
  }


  /**
   * Address upsert
   */
  export type AddressUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * The filter to search for the Address to update in case it exists.
     */
    where: AddressWhereUniqueInput
    /**
     * In case the Address found by the `where` argument doesn't exist, create a new Address with this data.
     */
    create: XOR<AddressCreateInput, AddressUncheckedCreateInput>
    /**
     * In case the Address was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AddressUpdateInput, AddressUncheckedUpdateInput>
  }


  /**
   * Address delete
   */
  export type AddressDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
    /**
     * Filter which Address to delete.
     */
    where: AddressWhereUniqueInput
  }


  /**
   * Address deleteMany
   */
  export type AddressDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Addresses to delete
     */
    where?: AddressWhereInput
  }


  /**
   * Address.user
   */
  export type Address$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AddressInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    password: 'password',
    accountId: 'accountId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PetScalarFieldEnum: {
    id: 'id',
    type: 'type',
    name: 'name',
    breed: 'breed',
    birthDate: 'birthDate',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PetScalarFieldEnum = (typeof PetScalarFieldEnum)[keyof typeof PetScalarFieldEnum]


  export const PolicyScalarFieldEnum: {
    id: 'id',
    petId: 'petId',
    microchipNumber: 'microchipNumber',
    status: 'status',
    initialGraceDate: 'initialGraceDate',
    renewalOfLimits: 'renewalOfLimits',
    planId: 'planId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PolicyScalarFieldEnum = (typeof PolicyScalarFieldEnum)[keyof typeof PolicyScalarFieldEnum]


  export const PlanScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    value: 'value',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PlanScalarFieldEnum = (typeof PlanScalarFieldEnum)[keyof typeof PlanScalarFieldEnum]


  export const PlanCoverageScalarFieldEnum: {
    id: 'id',
    planId: 'planId',
    coverageId: 'coverageId'
  };

  export type PlanCoverageScalarFieldEnum = (typeof PlanCoverageScalarFieldEnum)[keyof typeof PlanCoverageScalarFieldEnum]


  export const CoverageScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CoverageScalarFieldEnum = (typeof CoverageScalarFieldEnum)[keyof typeof CoverageScalarFieldEnum]


  export const ProcedureScalarFieldEnum: {
    id: 'id',
    name: 'name',
    description: 'description',
    coverageId: 'coverageId'
  };

  export type ProcedureScalarFieldEnum = (typeof ProcedureScalarFieldEnum)[keyof typeof ProcedureScalarFieldEnum]


  export const ProcedureByPlanScalarFieldEnum: {
    id: 'id',
    availableLimit: 'availableLimit',
    share: 'share',
    valueToAnticipate: 'valueToAnticipate',
    procedureId: 'procedureId',
    planId: 'planId'
  };

  export type ProcedureByPlanScalarFieldEnum = (typeof ProcedureByPlanScalarFieldEnum)[keyof typeof ProcedureByPlanScalarFieldEnum]


  export const PolicyProcedureScalarFieldEnum: {
    id: 'id',
    policyId: 'policyId',
    procedureId: 'procedureId',
    used: 'used'
  };

  export type PolicyProcedureScalarFieldEnum = (typeof PolicyProcedureScalarFieldEnum)[keyof typeof PolicyProcedureScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const AddressScalarFieldEnum: {
    id: 'id',
    street: 'street',
    number: 'number',
    complement: 'complement',
    neighborhood: 'neighborhood',
    zipcode: 'zipcode',
    city: 'city',
    state: 'state',
    addressType: 'addressType',
    userId: 'userId',
    updatedAt: 'updatedAt',
    createdAt: 'createdAt'
  };

  export type AddressScalarFieldEnum = (typeof AddressScalarFieldEnum)[keyof typeof AddressScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    accountId?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    account?: XOR<AccountNullableRelationFilter, AccountWhereInput> | null
    addresses?: AddressListRelationFilter
    pets?: PetListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    account?: AccountOrderByWithRelationInput
    addresses?: AddressOrderByRelationAggregateInput
    pets?: PetOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    accountId?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    account?: XOR<AccountNullableRelationFilter, AccountWhereInput> | null
    addresses?: AddressListRelationFilter
    pets?: PetListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    accountId?: IntNullableWithAggregatesFilter<"User"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PetWhereInput = {
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    id?: IntFilter<"Pet"> | number
    type?: StringFilter<"Pet"> | string
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    birthDate?: DateTimeFilter<"Pet"> | Date | string
    userId?: IntFilter<"Pet"> | number
    createdAt?: DateTimeFilter<"Pet"> | Date | string
    updatedAt?: DateTimeFilter<"Pet"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    policy?: XOR<PolicyNullableRelationFilter, PolicyWhereInput> | null
  }

  export type PetOrderByWithRelationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    birthDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    policy?: PolicyOrderByWithRelationInput
  }

  export type PetWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PetWhereInput | PetWhereInput[]
    OR?: PetWhereInput[]
    NOT?: PetWhereInput | PetWhereInput[]
    type?: StringFilter<"Pet"> | string
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    birthDate?: DateTimeFilter<"Pet"> | Date | string
    userId?: IntFilter<"Pet"> | number
    createdAt?: DateTimeFilter<"Pet"> | Date | string
    updatedAt?: DateTimeFilter<"Pet"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    policy?: XOR<PolicyNullableRelationFilter, PolicyWhereInput> | null
  }, "id">

  export type PetOrderByWithAggregationInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    birthDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PetCountOrderByAggregateInput
    _avg?: PetAvgOrderByAggregateInput
    _max?: PetMaxOrderByAggregateInput
    _min?: PetMinOrderByAggregateInput
    _sum?: PetSumOrderByAggregateInput
  }

  export type PetScalarWhereWithAggregatesInput = {
    AND?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    OR?: PetScalarWhereWithAggregatesInput[]
    NOT?: PetScalarWhereWithAggregatesInput | PetScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Pet"> | number
    type?: StringWithAggregatesFilter<"Pet"> | string
    name?: StringWithAggregatesFilter<"Pet"> | string
    breed?: StringWithAggregatesFilter<"Pet"> | string
    birthDate?: DateTimeWithAggregatesFilter<"Pet"> | Date | string
    userId?: IntWithAggregatesFilter<"Pet"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Pet"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Pet"> | Date | string
  }

  export type PolicyWhereInput = {
    AND?: PolicyWhereInput | PolicyWhereInput[]
    OR?: PolicyWhereInput[]
    NOT?: PolicyWhereInput | PolicyWhereInput[]
    id?: IntFilter<"Policy"> | number
    petId?: IntFilter<"Policy"> | number
    microchipNumber?: StringFilter<"Policy"> | string
    status?: StringFilter<"Policy"> | string
    initialGraceDate?: DateTimeFilter<"Policy"> | Date | string
    renewalOfLimits?: IntFilter<"Policy"> | number
    planId?: IntFilter<"Policy"> | number
    createdAt?: DateTimeFilter<"Policy"> | Date | string
    updatedAt?: DateTimeFilter<"Policy"> | Date | string
    pet?: XOR<PetRelationFilter, PetWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
    policyCoverages?: PolicyProcedureListRelationFilter
  }

  export type PolicyOrderByWithRelationInput = {
    id?: SortOrder
    petId?: SortOrder
    microchipNumber?: SortOrder
    status?: SortOrder
    initialGraceDate?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    pet?: PetOrderByWithRelationInput
    plan?: PlanOrderByWithRelationInput
    policyCoverages?: PolicyProcedureOrderByRelationAggregateInput
  }

  export type PolicyWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    petId?: number
    AND?: PolicyWhereInput | PolicyWhereInput[]
    OR?: PolicyWhereInput[]
    NOT?: PolicyWhereInput | PolicyWhereInput[]
    microchipNumber?: StringFilter<"Policy"> | string
    status?: StringFilter<"Policy"> | string
    initialGraceDate?: DateTimeFilter<"Policy"> | Date | string
    renewalOfLimits?: IntFilter<"Policy"> | number
    planId?: IntFilter<"Policy"> | number
    createdAt?: DateTimeFilter<"Policy"> | Date | string
    updatedAt?: DateTimeFilter<"Policy"> | Date | string
    pet?: XOR<PetRelationFilter, PetWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
    policyCoverages?: PolicyProcedureListRelationFilter
  }, "id" | "petId">

  export type PolicyOrderByWithAggregationInput = {
    id?: SortOrder
    petId?: SortOrder
    microchipNumber?: SortOrder
    status?: SortOrder
    initialGraceDate?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PolicyCountOrderByAggregateInput
    _avg?: PolicyAvgOrderByAggregateInput
    _max?: PolicyMaxOrderByAggregateInput
    _min?: PolicyMinOrderByAggregateInput
    _sum?: PolicySumOrderByAggregateInput
  }

  export type PolicyScalarWhereWithAggregatesInput = {
    AND?: PolicyScalarWhereWithAggregatesInput | PolicyScalarWhereWithAggregatesInput[]
    OR?: PolicyScalarWhereWithAggregatesInput[]
    NOT?: PolicyScalarWhereWithAggregatesInput | PolicyScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Policy"> | number
    petId?: IntWithAggregatesFilter<"Policy"> | number
    microchipNumber?: StringWithAggregatesFilter<"Policy"> | string
    status?: StringWithAggregatesFilter<"Policy"> | string
    initialGraceDate?: DateTimeWithAggregatesFilter<"Policy"> | Date | string
    renewalOfLimits?: IntWithAggregatesFilter<"Policy"> | number
    planId?: IntWithAggregatesFilter<"Policy"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Policy"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Policy"> | Date | string
  }

  export type PlanWhereInput = {
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    id?: IntFilter<"Plan"> | number
    name?: StringFilter<"Plan"> | string
    description?: StringFilter<"Plan"> | string
    value?: FloatFilter<"Plan"> | number
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    policies?: PolicyListRelationFilter
    proceduresByPlan?: ProcedureByPlanListRelationFilter
    coverages?: PlanCoverageListRelationFilter
  }

  export type PlanOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    policies?: PolicyOrderByRelationAggregateInput
    proceduresByPlan?: ProcedureByPlanOrderByRelationAggregateInput
    coverages?: PlanCoverageOrderByRelationAggregateInput
  }

  export type PlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlanWhereInput | PlanWhereInput[]
    OR?: PlanWhereInput[]
    NOT?: PlanWhereInput | PlanWhereInput[]
    name?: StringFilter<"Plan"> | string
    description?: StringFilter<"Plan"> | string
    value?: FloatFilter<"Plan"> | number
    createdAt?: DateTimeFilter<"Plan"> | Date | string
    updatedAt?: DateTimeFilter<"Plan"> | Date | string
    policies?: PolicyListRelationFilter
    proceduresByPlan?: ProcedureByPlanListRelationFilter
    coverages?: PlanCoverageListRelationFilter
  }, "id">

  export type PlanOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PlanCountOrderByAggregateInput
    _avg?: PlanAvgOrderByAggregateInput
    _max?: PlanMaxOrderByAggregateInput
    _min?: PlanMinOrderByAggregateInput
    _sum?: PlanSumOrderByAggregateInput
  }

  export type PlanScalarWhereWithAggregatesInput = {
    AND?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    OR?: PlanScalarWhereWithAggregatesInput[]
    NOT?: PlanScalarWhereWithAggregatesInput | PlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Plan"> | number
    name?: StringWithAggregatesFilter<"Plan"> | string
    description?: StringWithAggregatesFilter<"Plan"> | string
    value?: FloatWithAggregatesFilter<"Plan"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Plan"> | Date | string
  }

  export type PlanCoverageWhereInput = {
    AND?: PlanCoverageWhereInput | PlanCoverageWhereInput[]
    OR?: PlanCoverageWhereInput[]
    NOT?: PlanCoverageWhereInput | PlanCoverageWhereInput[]
    id?: IntFilter<"PlanCoverage"> | number
    planId?: IntFilter<"PlanCoverage"> | number
    coverageId?: IntFilter<"PlanCoverage"> | number
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
    coverage?: XOR<CoverageRelationFilter, CoverageWhereInput>
  }

  export type PlanCoverageOrderByWithRelationInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
    plan?: PlanOrderByWithRelationInput
    coverage?: CoverageOrderByWithRelationInput
  }

  export type PlanCoverageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PlanCoverageWhereInput | PlanCoverageWhereInput[]
    OR?: PlanCoverageWhereInput[]
    NOT?: PlanCoverageWhereInput | PlanCoverageWhereInput[]
    planId?: IntFilter<"PlanCoverage"> | number
    coverageId?: IntFilter<"PlanCoverage"> | number
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
    coverage?: XOR<CoverageRelationFilter, CoverageWhereInput>
  }, "id">

  export type PlanCoverageOrderByWithAggregationInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
    _count?: PlanCoverageCountOrderByAggregateInput
    _avg?: PlanCoverageAvgOrderByAggregateInput
    _max?: PlanCoverageMaxOrderByAggregateInput
    _min?: PlanCoverageMinOrderByAggregateInput
    _sum?: PlanCoverageSumOrderByAggregateInput
  }

  export type PlanCoverageScalarWhereWithAggregatesInput = {
    AND?: PlanCoverageScalarWhereWithAggregatesInput | PlanCoverageScalarWhereWithAggregatesInput[]
    OR?: PlanCoverageScalarWhereWithAggregatesInput[]
    NOT?: PlanCoverageScalarWhereWithAggregatesInput | PlanCoverageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PlanCoverage"> | number
    planId?: IntWithAggregatesFilter<"PlanCoverage"> | number
    coverageId?: IntWithAggregatesFilter<"PlanCoverage"> | number
  }

  export type CoverageWhereInput = {
    AND?: CoverageWhereInput | CoverageWhereInput[]
    OR?: CoverageWhereInput[]
    NOT?: CoverageWhereInput | CoverageWhereInput[]
    id?: IntFilter<"Coverage"> | number
    name?: StringFilter<"Coverage"> | string
    plans?: PlanCoverageListRelationFilter
    procedures?: ProcedureListRelationFilter
  }

  export type CoverageOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    plans?: PlanCoverageOrderByRelationAggregateInput
    procedures?: ProcedureOrderByRelationAggregateInput
  }

  export type CoverageWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: CoverageWhereInput | CoverageWhereInput[]
    OR?: CoverageWhereInput[]
    NOT?: CoverageWhereInput | CoverageWhereInput[]
    name?: StringFilter<"Coverage"> | string
    plans?: PlanCoverageListRelationFilter
    procedures?: ProcedureListRelationFilter
  }, "id">

  export type CoverageOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CoverageCountOrderByAggregateInput
    _avg?: CoverageAvgOrderByAggregateInput
    _max?: CoverageMaxOrderByAggregateInput
    _min?: CoverageMinOrderByAggregateInput
    _sum?: CoverageSumOrderByAggregateInput
  }

  export type CoverageScalarWhereWithAggregatesInput = {
    AND?: CoverageScalarWhereWithAggregatesInput | CoverageScalarWhereWithAggregatesInput[]
    OR?: CoverageScalarWhereWithAggregatesInput[]
    NOT?: CoverageScalarWhereWithAggregatesInput | CoverageScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Coverage"> | number
    name?: StringWithAggregatesFilter<"Coverage"> | string
  }

  export type ProcedureWhereInput = {
    AND?: ProcedureWhereInput | ProcedureWhereInput[]
    OR?: ProcedureWhereInput[]
    NOT?: ProcedureWhereInput | ProcedureWhereInput[]
    id?: IntFilter<"Procedure"> | number
    name?: StringFilter<"Procedure"> | string
    description?: StringFilter<"Procedure"> | string
    coverageId?: IntFilter<"Procedure"> | number
    coverage?: XOR<CoverageRelationFilter, CoverageWhereInput>
    proceduresByPlan?: ProcedureByPlanListRelationFilter
    policiesProcedure?: PolicyProcedureListRelationFilter
  }

  export type ProcedureOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    coverageId?: SortOrder
    coverage?: CoverageOrderByWithRelationInput
    proceduresByPlan?: ProcedureByPlanOrderByRelationAggregateInput
    policiesProcedure?: PolicyProcedureOrderByRelationAggregateInput
  }

  export type ProcedureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProcedureWhereInput | ProcedureWhereInput[]
    OR?: ProcedureWhereInput[]
    NOT?: ProcedureWhereInput | ProcedureWhereInput[]
    name?: StringFilter<"Procedure"> | string
    description?: StringFilter<"Procedure"> | string
    coverageId?: IntFilter<"Procedure"> | number
    coverage?: XOR<CoverageRelationFilter, CoverageWhereInput>
    proceduresByPlan?: ProcedureByPlanListRelationFilter
    policiesProcedure?: PolicyProcedureListRelationFilter
  }, "id">

  export type ProcedureOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    coverageId?: SortOrder
    _count?: ProcedureCountOrderByAggregateInput
    _avg?: ProcedureAvgOrderByAggregateInput
    _max?: ProcedureMaxOrderByAggregateInput
    _min?: ProcedureMinOrderByAggregateInput
    _sum?: ProcedureSumOrderByAggregateInput
  }

  export type ProcedureScalarWhereWithAggregatesInput = {
    AND?: ProcedureScalarWhereWithAggregatesInput | ProcedureScalarWhereWithAggregatesInput[]
    OR?: ProcedureScalarWhereWithAggregatesInput[]
    NOT?: ProcedureScalarWhereWithAggregatesInput | ProcedureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Procedure"> | number
    name?: StringWithAggregatesFilter<"Procedure"> | string
    description?: StringWithAggregatesFilter<"Procedure"> | string
    coverageId?: IntWithAggregatesFilter<"Procedure"> | number
  }

  export type ProcedureByPlanWhereInput = {
    AND?: ProcedureByPlanWhereInput | ProcedureByPlanWhereInput[]
    OR?: ProcedureByPlanWhereInput[]
    NOT?: ProcedureByPlanWhereInput | ProcedureByPlanWhereInput[]
    id?: IntFilter<"ProcedureByPlan"> | number
    availableLimit?: StringFilter<"ProcedureByPlan"> | string
    share?: FloatFilter<"ProcedureByPlan"> | number
    valueToAnticipate?: FloatNullableFilter<"ProcedureByPlan"> | number | null
    procedureId?: IntFilter<"ProcedureByPlan"> | number
    planId?: IntFilter<"ProcedureByPlan"> | number
    procedure?: XOR<ProcedureRelationFilter, ProcedureWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
  }

  export type ProcedureByPlanOrderByWithRelationInput = {
    id?: SortOrder
    availableLimit?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrderInput | SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
    procedure?: ProcedureOrderByWithRelationInput
    plan?: PlanOrderByWithRelationInput
  }

  export type ProcedureByPlanWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProcedureByPlanWhereInput | ProcedureByPlanWhereInput[]
    OR?: ProcedureByPlanWhereInput[]
    NOT?: ProcedureByPlanWhereInput | ProcedureByPlanWhereInput[]
    availableLimit?: StringFilter<"ProcedureByPlan"> | string
    share?: FloatFilter<"ProcedureByPlan"> | number
    valueToAnticipate?: FloatNullableFilter<"ProcedureByPlan"> | number | null
    procedureId?: IntFilter<"ProcedureByPlan"> | number
    planId?: IntFilter<"ProcedureByPlan"> | number
    procedure?: XOR<ProcedureRelationFilter, ProcedureWhereInput>
    plan?: XOR<PlanRelationFilter, PlanWhereInput>
  }, "id">

  export type ProcedureByPlanOrderByWithAggregationInput = {
    id?: SortOrder
    availableLimit?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrderInput | SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
    _count?: ProcedureByPlanCountOrderByAggregateInput
    _avg?: ProcedureByPlanAvgOrderByAggregateInput
    _max?: ProcedureByPlanMaxOrderByAggregateInput
    _min?: ProcedureByPlanMinOrderByAggregateInput
    _sum?: ProcedureByPlanSumOrderByAggregateInput
  }

  export type ProcedureByPlanScalarWhereWithAggregatesInput = {
    AND?: ProcedureByPlanScalarWhereWithAggregatesInput | ProcedureByPlanScalarWhereWithAggregatesInput[]
    OR?: ProcedureByPlanScalarWhereWithAggregatesInput[]
    NOT?: ProcedureByPlanScalarWhereWithAggregatesInput | ProcedureByPlanScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProcedureByPlan"> | number
    availableLimit?: StringWithAggregatesFilter<"ProcedureByPlan"> | string
    share?: FloatWithAggregatesFilter<"ProcedureByPlan"> | number
    valueToAnticipate?: FloatNullableWithAggregatesFilter<"ProcedureByPlan"> | number | null
    procedureId?: IntWithAggregatesFilter<"ProcedureByPlan"> | number
    planId?: IntWithAggregatesFilter<"ProcedureByPlan"> | number
  }

  export type PolicyProcedureWhereInput = {
    AND?: PolicyProcedureWhereInput | PolicyProcedureWhereInput[]
    OR?: PolicyProcedureWhereInput[]
    NOT?: PolicyProcedureWhereInput | PolicyProcedureWhereInput[]
    id?: IntFilter<"PolicyProcedure"> | number
    policyId?: IntFilter<"PolicyProcedure"> | number
    procedureId?: IntFilter<"PolicyProcedure"> | number
    used?: IntFilter<"PolicyProcedure"> | number
    policy?: XOR<PolicyRelationFilter, PolicyWhereInput>
    procedure?: XOR<ProcedureRelationFilter, ProcedureWhereInput>
  }

  export type PolicyProcedureOrderByWithRelationInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
    policy?: PolicyOrderByWithRelationInput
    procedure?: ProcedureOrderByWithRelationInput
  }

  export type PolicyProcedureWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: PolicyProcedureWhereInput | PolicyProcedureWhereInput[]
    OR?: PolicyProcedureWhereInput[]
    NOT?: PolicyProcedureWhereInput | PolicyProcedureWhereInput[]
    policyId?: IntFilter<"PolicyProcedure"> | number
    procedureId?: IntFilter<"PolicyProcedure"> | number
    used?: IntFilter<"PolicyProcedure"> | number
    policy?: XOR<PolicyRelationFilter, PolicyWhereInput>
    procedure?: XOR<ProcedureRelationFilter, ProcedureWhereInput>
  }, "id">

  export type PolicyProcedureOrderByWithAggregationInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
    _count?: PolicyProcedureCountOrderByAggregateInput
    _avg?: PolicyProcedureAvgOrderByAggregateInput
    _max?: PolicyProcedureMaxOrderByAggregateInput
    _min?: PolicyProcedureMinOrderByAggregateInput
    _sum?: PolicyProcedureSumOrderByAggregateInput
  }

  export type PolicyProcedureScalarWhereWithAggregatesInput = {
    AND?: PolicyProcedureScalarWhereWithAggregatesInput | PolicyProcedureScalarWhereWithAggregatesInput[]
    OR?: PolicyProcedureScalarWhereWithAggregatesInput[]
    NOT?: PolicyProcedureScalarWhereWithAggregatesInput | PolicyProcedureScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"PolicyProcedure"> | number
    policyId?: IntWithAggregatesFilter<"PolicyProcedure"> | number
    procedureId?: IntWithAggregatesFilter<"PolicyProcedure"> | number
    used?: IntWithAggregatesFilter<"PolicyProcedure"> | number
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: IntFilter<"Account"> | number
    name?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    users?: UserListRelationFilter
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    name?: StringFilter<"Account"> | string
    createdAt?: DateTimeFilter<"Account"> | Date | string
    updatedAt?: DateTimeFilter<"Account"> | Date | string
    users?: UserListRelationFilter
  }, "id">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Account"> | number
    name?: StringWithAggregatesFilter<"Account"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Account"> | Date | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    id?: IntFilter<"Address"> | number
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    complement?: StringNullableFilter<"Address"> | string | null
    neighborhood?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    addressType?: StringFilter<"Address"> | string
    userId?: IntNullableFilter<"Address"> | number | null
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AddressOrderByWithRelationInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrderInput | SortOrder
    neighborhood?: SortOrder
    zipcode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    addressType?: SortOrder
    userId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AddressWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    complement?: StringNullableFilter<"Address"> | string | null
    neighborhood?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    addressType?: StringFilter<"Address"> | string
    userId?: IntNullableFilter<"Address"> | number | null
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AddressOrderByWithAggregationInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrderInput | SortOrder
    neighborhood?: SortOrder
    zipcode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    addressType?: SortOrder
    userId?: SortOrderInput | SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
    _count?: AddressCountOrderByAggregateInput
    _avg?: AddressAvgOrderByAggregateInput
    _max?: AddressMaxOrderByAggregateInput
    _min?: AddressMinOrderByAggregateInput
    _sum?: AddressSumOrderByAggregateInput
  }

  export type AddressScalarWhereWithAggregatesInput = {
    AND?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    OR?: AddressScalarWhereWithAggregatesInput[]
    NOT?: AddressScalarWhereWithAggregatesInput | AddressScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Address"> | number
    street?: StringWithAggregatesFilter<"Address"> | string
    number?: StringWithAggregatesFilter<"Address"> | string
    complement?: StringNullableWithAggregatesFilter<"Address"> | string | null
    neighborhood?: StringWithAggregatesFilter<"Address"> | string
    zipcode?: StringWithAggregatesFilter<"Address"> | string
    city?: StringWithAggregatesFilter<"Address"> | string
    state?: StringWithAggregatesFilter<"Address"> | string
    addressType?: StringWithAggregatesFilter<"Address"> | string
    userId?: IntNullableWithAggregatesFilter<"Address"> | number | null
    updatedAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"Address"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUsersInput
    addresses?: AddressCreateNestedManyWithoutUserInput
    pets?: PetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email: string
    password: string
    accountId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUsersNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
    pets?: PetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PetCreateInput = {
    type: string
    name: string
    breed: string
    birthDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPetsInput
    policy?: PolicyCreateNestedOneWithoutPetInput
  }

  export type PetUncheckedCreateInput = {
    id?: number
    type: string
    name: string
    breed: string
    birthDate: Date | string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policy?: PolicyUncheckedCreateNestedOneWithoutPetInput
  }

  export type PetUpdateInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
    policy?: PolicyUpdateOneWithoutPetNestedInput
  }

  export type PetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policy?: PolicyUncheckedUpdateOneWithoutPetNestedInput
  }

  export type PetUpdateManyMutationInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PolicyCreateInput = {
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    createdAt?: Date | string
    updatedAt?: Date | string
    pet: PetCreateNestedOneWithoutPolicyInput
    plan: PlanCreateNestedOneWithoutPoliciesInput
    policyCoverages?: PolicyProcedureCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUncheckedCreateInput = {
    id?: number
    petId: number
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    planId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policyCoverages?: PolicyProcedureUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUpdateInput = {
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pet?: PetUpdateOneRequiredWithoutPolicyNestedInput
    plan?: PlanUpdateOneRequiredWithoutPoliciesNestedInput
    policyCoverages?: PolicyProcedureUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    petId?: IntFieldUpdateOperationsInput | number
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyCoverages?: PolicyProcedureUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUpdateManyMutationInput = {
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PolicyUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    petId?: IntFieldUpdateOperationsInput | number
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanCreateInput = {
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policies?: PolicyCreateNestedManyWithoutPlanInput
    proceduresByPlan?: ProcedureByPlanCreateNestedManyWithoutPlanInput
    coverages?: PlanCoverageCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policies?: PolicyUncheckedCreateNestedManyWithoutPlanInput
    proceduresByPlan?: ProcedureByPlanUncheckedCreateNestedManyWithoutPlanInput
    coverages?: PlanCoverageUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policies?: PolicyUpdateManyWithoutPlanNestedInput
    proceduresByPlan?: ProcedureByPlanUpdateManyWithoutPlanNestedInput
    coverages?: PlanCoverageUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policies?: PolicyUncheckedUpdateManyWithoutPlanNestedInput
    proceduresByPlan?: ProcedureByPlanUncheckedUpdateManyWithoutPlanNestedInput
    coverages?: PlanCoverageUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PlanUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanCoverageCreateInput = {
    plan: PlanCreateNestedOneWithoutCoveragesInput
    coverage: CoverageCreateNestedOneWithoutPlansInput
  }

  export type PlanCoverageUncheckedCreateInput = {
    id?: number
    planId: number
    coverageId: number
  }

  export type PlanCoverageUpdateInput = {
    plan?: PlanUpdateOneRequiredWithoutCoveragesNestedInput
    coverage?: CoverageUpdateOneRequiredWithoutPlansNestedInput
  }

  export type PlanCoverageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    coverageId?: IntFieldUpdateOperationsInput | number
  }

  export type PlanCoverageUpdateManyMutationInput = {

  }

  export type PlanCoverageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    coverageId?: IntFieldUpdateOperationsInput | number
  }

  export type CoverageCreateInput = {
    name: string
    plans?: PlanCoverageCreateNestedManyWithoutCoverageInput
    procedures?: ProcedureCreateNestedManyWithoutCoverageInput
  }

  export type CoverageUncheckedCreateInput = {
    id?: number
    name: string
    plans?: PlanCoverageUncheckedCreateNestedManyWithoutCoverageInput
    procedures?: ProcedureUncheckedCreateNestedManyWithoutCoverageInput
  }

  export type CoverageUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    plans?: PlanCoverageUpdateManyWithoutCoverageNestedInput
    procedures?: ProcedureUpdateManyWithoutCoverageNestedInput
  }

  export type CoverageUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plans?: PlanCoverageUncheckedUpdateManyWithoutCoverageNestedInput
    procedures?: ProcedureUncheckedUpdateManyWithoutCoverageNestedInput
  }

  export type CoverageUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CoverageUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
  }

  export type ProcedureCreateInput = {
    name: string
    description: string
    coverage: CoverageCreateNestedOneWithoutProceduresInput
    proceduresByPlan?: ProcedureByPlanCreateNestedManyWithoutProcedureInput
    policiesProcedure?: PolicyProcedureCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureUncheckedCreateInput = {
    id?: number
    name: string
    description: string
    coverageId: number
    proceduresByPlan?: ProcedureByPlanUncheckedCreateNestedManyWithoutProcedureInput
    policiesProcedure?: PolicyProcedureUncheckedCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverage?: CoverageUpdateOneRequiredWithoutProceduresNestedInput
    proceduresByPlan?: ProcedureByPlanUpdateManyWithoutProcedureNestedInput
    policiesProcedure?: PolicyProcedureUpdateManyWithoutProcedureNestedInput
  }

  export type ProcedureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverageId?: IntFieldUpdateOperationsInput | number
    proceduresByPlan?: ProcedureByPlanUncheckedUpdateManyWithoutProcedureNestedInput
    policiesProcedure?: PolicyProcedureUncheckedUpdateManyWithoutProcedureNestedInput
  }

  export type ProcedureUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProcedureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverageId?: IntFieldUpdateOperationsInput | number
  }

  export type ProcedureByPlanCreateInput = {
    availableLimit: string
    share: number
    valueToAnticipate?: number | null
    procedure: ProcedureCreateNestedOneWithoutProceduresByPlanInput
    plan: PlanCreateNestedOneWithoutProceduresByPlanInput
  }

  export type ProcedureByPlanUncheckedCreateInput = {
    id?: number
    availableLimit: string
    share: number
    valueToAnticipate?: number | null
    procedureId: number
    planId: number
  }

  export type ProcedureByPlanUpdateInput = {
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    procedure?: ProcedureUpdateOneRequiredWithoutProceduresByPlanNestedInput
    plan?: PlanUpdateOneRequiredWithoutProceduresByPlanNestedInput
  }

  export type ProcedureByPlanUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    procedureId?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
  }

  export type ProcedureByPlanUpdateManyMutationInput = {
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
  }

  export type ProcedureByPlanUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    procedureId?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyProcedureCreateInput = {
    used: number
    policy: PolicyCreateNestedOneWithoutPolicyCoveragesInput
    procedure: ProcedureCreateNestedOneWithoutPoliciesProcedureInput
  }

  export type PolicyProcedureUncheckedCreateInput = {
    id?: number
    policyId: number
    procedureId: number
    used: number
  }

  export type PolicyProcedureUpdateInput = {
    used?: IntFieldUpdateOperationsInput | number
    policy?: PolicyUpdateOneRequiredWithoutPolicyCoveragesNestedInput
    procedure?: ProcedureUpdateOneRequiredWithoutPoliciesProcedureNestedInput
  }

  export type PolicyProcedureUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    policyId?: IntFieldUpdateOperationsInput | number
    procedureId?: IntFieldUpdateOperationsInput | number
    used?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyProcedureUpdateManyMutationInput = {
    used?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyProcedureUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    policyId?: IntFieldUpdateOperationsInput | number
    procedureId?: IntFieldUpdateOperationsInput | number
    used?: IntFieldUpdateOperationsInput | number
  }

  export type AccountCreateInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserCreateNestedManyWithoutAccountInput
  }

  export type AccountUncheckedCreateInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    users?: UserUncheckedCreateNestedManyWithoutAccountInput
  }

  export type AccountUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUpdateManyWithoutAccountNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    users?: UserUncheckedUpdateManyWithoutAccountNestedInput
  }

  export type AccountUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressCreateInput = {
    street: string
    number: string
    complement?: string | null
    neighborhood: string
    zipcode: string
    city: string
    state: string
    addressType: string
    updatedAt?: Date | string
    createdAt?: Date | string
    user?: UserCreateNestedOneWithoutAddressesInput
  }

  export type AddressUncheckedCreateInput = {
    id?: number
    street: string
    number: string
    complement?: string | null
    neighborhood: string
    zipcode: string
    city: string
    state: string
    addressType: string
    userId?: number | null
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AddressUpdateInput = {
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAddressesNestedInput
  }

  export type AddressUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUpdateManyMutationInput = {
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    userId?: NullableIntFieldUpdateOperationsInput | number | null
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AccountNullableRelationFilter = {
    is?: AccountWhereInput | null
    isNot?: AccountWhereInput | null
  }

  export type AddressListRelationFilter = {
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
  }

  export type PetListRelationFilter = {
    every?: PetWhereInput
    some?: PetWhereInput
    none?: PetWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AddressOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    password?: SortOrder
    accountId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    accountId?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PolicyNullableRelationFilter = {
    is?: PolicyWhereInput | null
    isNot?: PolicyWhereInput | null
  }

  export type PetCountOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    birthDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PetAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PetMaxOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    birthDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PetMinOrderByAggregateInput = {
    id?: SortOrder
    type?: SortOrder
    name?: SortOrder
    breed?: SortOrder
    birthDate?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PetSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type PetRelationFilter = {
    is?: PetWhereInput
    isNot?: PetWhereInput
  }

  export type PlanRelationFilter = {
    is?: PlanWhereInput
    isNot?: PlanWhereInput
  }

  export type PolicyProcedureListRelationFilter = {
    every?: PolicyProcedureWhereInput
    some?: PolicyProcedureWhereInput
    none?: PolicyProcedureWhereInput
  }

  export type PolicyProcedureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PolicyCountOrderByAggregateInput = {
    id?: SortOrder
    petId?: SortOrder
    microchipNumber?: SortOrder
    status?: SortOrder
    initialGraceDate?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PolicyAvgOrderByAggregateInput = {
    id?: SortOrder
    petId?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
  }

  export type PolicyMaxOrderByAggregateInput = {
    id?: SortOrder
    petId?: SortOrder
    microchipNumber?: SortOrder
    status?: SortOrder
    initialGraceDate?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PolicyMinOrderByAggregateInput = {
    id?: SortOrder
    petId?: SortOrder
    microchipNumber?: SortOrder
    status?: SortOrder
    initialGraceDate?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PolicySumOrderByAggregateInput = {
    id?: SortOrder
    petId?: SortOrder
    renewalOfLimits?: SortOrder
    planId?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PolicyListRelationFilter = {
    every?: PolicyWhereInput
    some?: PolicyWhereInput
    none?: PolicyWhereInput
  }

  export type ProcedureByPlanListRelationFilter = {
    every?: ProcedureByPlanWhereInput
    some?: ProcedureByPlanWhereInput
    none?: ProcedureByPlanWhereInput
  }

  export type PlanCoverageListRelationFilter = {
    every?: PlanCoverageWhereInput
    some?: PlanCoverageWhereInput
    none?: PlanCoverageWhereInput
  }

  export type PolicyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProcedureByPlanOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanCoverageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlanCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanAvgOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type PlanMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    value?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PlanSumOrderByAggregateInput = {
    id?: SortOrder
    value?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type CoverageRelationFilter = {
    is?: CoverageWhereInput
    isNot?: CoverageWhereInput
  }

  export type PlanCoverageCountOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
  }

  export type PlanCoverageAvgOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
  }

  export type PlanCoverageMaxOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
  }

  export type PlanCoverageMinOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
  }

  export type PlanCoverageSumOrderByAggregateInput = {
    id?: SortOrder
    planId?: SortOrder
    coverageId?: SortOrder
  }

  export type ProcedureListRelationFilter = {
    every?: ProcedureWhereInput
    some?: ProcedureWhereInput
    none?: ProcedureWhereInput
  }

  export type ProcedureOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CoverageCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CoverageAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CoverageMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CoverageMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CoverageSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ProcedureCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    coverageId?: SortOrder
  }

  export type ProcedureAvgOrderByAggregateInput = {
    id?: SortOrder
    coverageId?: SortOrder
  }

  export type ProcedureMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    coverageId?: SortOrder
  }

  export type ProcedureMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    description?: SortOrder
    coverageId?: SortOrder
  }

  export type ProcedureSumOrderByAggregateInput = {
    id?: SortOrder
    coverageId?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProcedureRelationFilter = {
    is?: ProcedureWhereInput
    isNot?: ProcedureWhereInput
  }

  export type ProcedureByPlanCountOrderByAggregateInput = {
    id?: SortOrder
    availableLimit?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
  }

  export type ProcedureByPlanAvgOrderByAggregateInput = {
    id?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
  }

  export type ProcedureByPlanMaxOrderByAggregateInput = {
    id?: SortOrder
    availableLimit?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
  }

  export type ProcedureByPlanMinOrderByAggregateInput = {
    id?: SortOrder
    availableLimit?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
  }

  export type ProcedureByPlanSumOrderByAggregateInput = {
    id?: SortOrder
    share?: SortOrder
    valueToAnticipate?: SortOrder
    procedureId?: SortOrder
    planId?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type PolicyRelationFilter = {
    is?: PolicyWhereInput
    isNot?: PolicyWhereInput
  }

  export type PolicyProcedureCountOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
  }

  export type PolicyProcedureAvgOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
  }

  export type PolicyProcedureMaxOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
  }

  export type PolicyProcedureMinOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
  }

  export type PolicyProcedureSumOrderByAggregateInput = {
    id?: SortOrder
    policyId?: SortOrder
    procedureId?: SortOrder
    used?: SortOrder
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type AddressCountOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    neighborhood?: SortOrder
    zipcode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    addressType?: SortOrder
    userId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AddressAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type AddressMaxOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    neighborhood?: SortOrder
    zipcode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    addressType?: SortOrder
    userId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AddressMinOrderByAggregateInput = {
    id?: SortOrder
    street?: SortOrder
    number?: SortOrder
    complement?: SortOrder
    neighborhood?: SortOrder
    zipcode?: SortOrder
    city?: SortOrder
    state?: SortOrder
    addressType?: SortOrder
    userId?: SortOrder
    updatedAt?: SortOrder
    createdAt?: SortOrder
  }

  export type AddressSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AccountCreateNestedOneWithoutUsersInput = {
    create?: XOR<AccountCreateWithoutUsersInput, AccountUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUsersInput
    connect?: AccountWhereUniqueInput
  }

  export type AddressCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type PetCreateNestedManyWithoutUserInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
  }

  export type AddressUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
  }

  export type PetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AccountUpdateOneWithoutUsersNestedInput = {
    create?: XOR<AccountCreateWithoutUsersInput, AccountUncheckedCreateWithoutUsersInput>
    connectOrCreate?: AccountCreateOrConnectWithoutUsersInput
    upsert?: AccountUpsertWithoutUsersInput
    disconnect?: AccountWhereInput | boolean
    delete?: AccountWhereInput | boolean
    connect?: AccountWhereUniqueInput
    update?: XOR<XOR<AccountUpdateToOneWithWhereWithoutUsersInput, AccountUpdateWithoutUsersInput>, AccountUncheckedUpdateWithoutUsersInput>
  }

  export type AddressUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type PetUpdateManyWithoutUserNestedInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    upsert?: PetUpsertWithWhereUniqueWithoutUserInput | PetUpsertWithWhereUniqueWithoutUserInput[]
    set?: PetWhereUniqueInput | PetWhereUniqueInput[]
    disconnect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    delete?: PetWhereUniqueInput | PetWhereUniqueInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    update?: PetUpdateWithWhereUniqueWithoutUserInput | PetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PetUpdateManyWithWhereWithoutUserInput | PetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PetScalarWhereInput | PetScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AddressUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput> | AddressCreateWithoutUserInput[] | AddressUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AddressCreateOrConnectWithoutUserInput | AddressCreateOrConnectWithoutUserInput[]
    upsert?: AddressUpsertWithWhereUniqueWithoutUserInput | AddressUpsertWithWhereUniqueWithoutUserInput[]
    set?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    disconnect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    delete?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    connect?: AddressWhereUniqueInput | AddressWhereUniqueInput[]
    update?: AddressUpdateWithWhereUniqueWithoutUserInput | AddressUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AddressUpdateManyWithWhereWithoutUserInput | AddressUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AddressScalarWhereInput | AddressScalarWhereInput[]
  }

  export type PetUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput> | PetCreateWithoutUserInput[] | PetUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PetCreateOrConnectWithoutUserInput | PetCreateOrConnectWithoutUserInput[]
    upsert?: PetUpsertWithWhereUniqueWithoutUserInput | PetUpsertWithWhereUniqueWithoutUserInput[]
    set?: PetWhereUniqueInput | PetWhereUniqueInput[]
    disconnect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    delete?: PetWhereUniqueInput | PetWhereUniqueInput[]
    connect?: PetWhereUniqueInput | PetWhereUniqueInput[]
    update?: PetUpdateWithWhereUniqueWithoutUserInput | PetUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PetUpdateManyWithWhereWithoutUserInput | PetUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PetScalarWhereInput | PetScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPetsInput = {
    create?: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPetsInput
    connect?: UserWhereUniqueInput
  }

  export type PolicyCreateNestedOneWithoutPetInput = {
    create?: XOR<PolicyCreateWithoutPetInput, PolicyUncheckedCreateWithoutPetInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutPetInput
    connect?: PolicyWhereUniqueInput
  }

  export type PolicyUncheckedCreateNestedOneWithoutPetInput = {
    create?: XOR<PolicyCreateWithoutPetInput, PolicyUncheckedCreateWithoutPetInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutPetInput
    connect?: PolicyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPetsNestedInput = {
    create?: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPetsInput
    upsert?: UserUpsertWithoutPetsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPetsInput, UserUpdateWithoutPetsInput>, UserUncheckedUpdateWithoutPetsInput>
  }

  export type PolicyUpdateOneWithoutPetNestedInput = {
    create?: XOR<PolicyCreateWithoutPetInput, PolicyUncheckedCreateWithoutPetInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutPetInput
    upsert?: PolicyUpsertWithoutPetInput
    disconnect?: PolicyWhereInput | boolean
    delete?: PolicyWhereInput | boolean
    connect?: PolicyWhereUniqueInput
    update?: XOR<XOR<PolicyUpdateToOneWithWhereWithoutPetInput, PolicyUpdateWithoutPetInput>, PolicyUncheckedUpdateWithoutPetInput>
  }

  export type PolicyUncheckedUpdateOneWithoutPetNestedInput = {
    create?: XOR<PolicyCreateWithoutPetInput, PolicyUncheckedCreateWithoutPetInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutPetInput
    upsert?: PolicyUpsertWithoutPetInput
    disconnect?: PolicyWhereInput | boolean
    delete?: PolicyWhereInput | boolean
    connect?: PolicyWhereUniqueInput
    update?: XOR<XOR<PolicyUpdateToOneWithWhereWithoutPetInput, PolicyUpdateWithoutPetInput>, PolicyUncheckedUpdateWithoutPetInput>
  }

  export type PetCreateNestedOneWithoutPolicyInput = {
    create?: XOR<PetCreateWithoutPolicyInput, PetUncheckedCreateWithoutPolicyInput>
    connectOrCreate?: PetCreateOrConnectWithoutPolicyInput
    connect?: PetWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutPoliciesInput = {
    create?: XOR<PlanCreateWithoutPoliciesInput, PlanUncheckedCreateWithoutPoliciesInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPoliciesInput
    connect?: PlanWhereUniqueInput
  }

  export type PolicyProcedureCreateNestedManyWithoutPolicyInput = {
    create?: XOR<PolicyProcedureCreateWithoutPolicyInput, PolicyProcedureUncheckedCreateWithoutPolicyInput> | PolicyProcedureCreateWithoutPolicyInput[] | PolicyProcedureUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutPolicyInput | PolicyProcedureCreateOrConnectWithoutPolicyInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
  }

  export type PolicyProcedureUncheckedCreateNestedManyWithoutPolicyInput = {
    create?: XOR<PolicyProcedureCreateWithoutPolicyInput, PolicyProcedureUncheckedCreateWithoutPolicyInput> | PolicyProcedureCreateWithoutPolicyInput[] | PolicyProcedureUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutPolicyInput | PolicyProcedureCreateOrConnectWithoutPolicyInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
  }

  export type PetUpdateOneRequiredWithoutPolicyNestedInput = {
    create?: XOR<PetCreateWithoutPolicyInput, PetUncheckedCreateWithoutPolicyInput>
    connectOrCreate?: PetCreateOrConnectWithoutPolicyInput
    upsert?: PetUpsertWithoutPolicyInput
    connect?: PetWhereUniqueInput
    update?: XOR<XOR<PetUpdateToOneWithWhereWithoutPolicyInput, PetUpdateWithoutPolicyInput>, PetUncheckedUpdateWithoutPolicyInput>
  }

  export type PlanUpdateOneRequiredWithoutPoliciesNestedInput = {
    create?: XOR<PlanCreateWithoutPoliciesInput, PlanUncheckedCreateWithoutPoliciesInput>
    connectOrCreate?: PlanCreateOrConnectWithoutPoliciesInput
    upsert?: PlanUpsertWithoutPoliciesInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutPoliciesInput, PlanUpdateWithoutPoliciesInput>, PlanUncheckedUpdateWithoutPoliciesInput>
  }

  export type PolicyProcedureUpdateManyWithoutPolicyNestedInput = {
    create?: XOR<PolicyProcedureCreateWithoutPolicyInput, PolicyProcedureUncheckedCreateWithoutPolicyInput> | PolicyProcedureCreateWithoutPolicyInput[] | PolicyProcedureUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutPolicyInput | PolicyProcedureCreateOrConnectWithoutPolicyInput[]
    upsert?: PolicyProcedureUpsertWithWhereUniqueWithoutPolicyInput | PolicyProcedureUpsertWithWhereUniqueWithoutPolicyInput[]
    set?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    disconnect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    delete?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    update?: PolicyProcedureUpdateWithWhereUniqueWithoutPolicyInput | PolicyProcedureUpdateWithWhereUniqueWithoutPolicyInput[]
    updateMany?: PolicyProcedureUpdateManyWithWhereWithoutPolicyInput | PolicyProcedureUpdateManyWithWhereWithoutPolicyInput[]
    deleteMany?: PolicyProcedureScalarWhereInput | PolicyProcedureScalarWhereInput[]
  }

  export type PolicyProcedureUncheckedUpdateManyWithoutPolicyNestedInput = {
    create?: XOR<PolicyProcedureCreateWithoutPolicyInput, PolicyProcedureUncheckedCreateWithoutPolicyInput> | PolicyProcedureCreateWithoutPolicyInput[] | PolicyProcedureUncheckedCreateWithoutPolicyInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutPolicyInput | PolicyProcedureCreateOrConnectWithoutPolicyInput[]
    upsert?: PolicyProcedureUpsertWithWhereUniqueWithoutPolicyInput | PolicyProcedureUpsertWithWhereUniqueWithoutPolicyInput[]
    set?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    disconnect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    delete?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    update?: PolicyProcedureUpdateWithWhereUniqueWithoutPolicyInput | PolicyProcedureUpdateWithWhereUniqueWithoutPolicyInput[]
    updateMany?: PolicyProcedureUpdateManyWithWhereWithoutPolicyInput | PolicyProcedureUpdateManyWithWhereWithoutPolicyInput[]
    deleteMany?: PolicyProcedureScalarWhereInput | PolicyProcedureScalarWhereInput[]
  }

  export type PolicyCreateNestedManyWithoutPlanInput = {
    create?: XOR<PolicyCreateWithoutPlanInput, PolicyUncheckedCreateWithoutPlanInput> | PolicyCreateWithoutPlanInput[] | PolicyUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutPlanInput | PolicyCreateOrConnectWithoutPlanInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
  }

  export type ProcedureByPlanCreateNestedManyWithoutPlanInput = {
    create?: XOR<ProcedureByPlanCreateWithoutPlanInput, ProcedureByPlanUncheckedCreateWithoutPlanInput> | ProcedureByPlanCreateWithoutPlanInput[] | ProcedureByPlanUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutPlanInput | ProcedureByPlanCreateOrConnectWithoutPlanInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
  }

  export type PlanCoverageCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanCoverageCreateWithoutPlanInput, PlanCoverageUncheckedCreateWithoutPlanInput> | PlanCoverageCreateWithoutPlanInput[] | PlanCoverageUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutPlanInput | PlanCoverageCreateOrConnectWithoutPlanInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
  }

  export type PolicyUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PolicyCreateWithoutPlanInput, PolicyUncheckedCreateWithoutPlanInput> | PolicyCreateWithoutPlanInput[] | PolicyUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutPlanInput | PolicyCreateOrConnectWithoutPlanInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
  }

  export type ProcedureByPlanUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<ProcedureByPlanCreateWithoutPlanInput, ProcedureByPlanUncheckedCreateWithoutPlanInput> | ProcedureByPlanCreateWithoutPlanInput[] | ProcedureByPlanUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutPlanInput | ProcedureByPlanCreateOrConnectWithoutPlanInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
  }

  export type PlanCoverageUncheckedCreateNestedManyWithoutPlanInput = {
    create?: XOR<PlanCoverageCreateWithoutPlanInput, PlanCoverageUncheckedCreateWithoutPlanInput> | PlanCoverageCreateWithoutPlanInput[] | PlanCoverageUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutPlanInput | PlanCoverageCreateOrConnectWithoutPlanInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PolicyUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PolicyCreateWithoutPlanInput, PolicyUncheckedCreateWithoutPlanInput> | PolicyCreateWithoutPlanInput[] | PolicyUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutPlanInput | PolicyCreateOrConnectWithoutPlanInput[]
    upsert?: PolicyUpsertWithWhereUniqueWithoutPlanInput | PolicyUpsertWithWhereUniqueWithoutPlanInput[]
    set?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    disconnect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    delete?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    update?: PolicyUpdateWithWhereUniqueWithoutPlanInput | PolicyUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PolicyUpdateManyWithWhereWithoutPlanInput | PolicyUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
  }

  export type ProcedureByPlanUpdateManyWithoutPlanNestedInput = {
    create?: XOR<ProcedureByPlanCreateWithoutPlanInput, ProcedureByPlanUncheckedCreateWithoutPlanInput> | ProcedureByPlanCreateWithoutPlanInput[] | ProcedureByPlanUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutPlanInput | ProcedureByPlanCreateOrConnectWithoutPlanInput[]
    upsert?: ProcedureByPlanUpsertWithWhereUniqueWithoutPlanInput | ProcedureByPlanUpsertWithWhereUniqueWithoutPlanInput[]
    set?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    disconnect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    delete?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    update?: ProcedureByPlanUpdateWithWhereUniqueWithoutPlanInput | ProcedureByPlanUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: ProcedureByPlanUpdateManyWithWhereWithoutPlanInput | ProcedureByPlanUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: ProcedureByPlanScalarWhereInput | ProcedureByPlanScalarWhereInput[]
  }

  export type PlanCoverageUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanCoverageCreateWithoutPlanInput, PlanCoverageUncheckedCreateWithoutPlanInput> | PlanCoverageCreateWithoutPlanInput[] | PlanCoverageUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutPlanInput | PlanCoverageCreateOrConnectWithoutPlanInput[]
    upsert?: PlanCoverageUpsertWithWhereUniqueWithoutPlanInput | PlanCoverageUpsertWithWhereUniqueWithoutPlanInput[]
    set?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    disconnect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    delete?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    update?: PlanCoverageUpdateWithWhereUniqueWithoutPlanInput | PlanCoverageUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanCoverageUpdateManyWithWhereWithoutPlanInput | PlanCoverageUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanCoverageScalarWhereInput | PlanCoverageScalarWhereInput[]
  }

  export type PolicyUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PolicyCreateWithoutPlanInput, PolicyUncheckedCreateWithoutPlanInput> | PolicyCreateWithoutPlanInput[] | PolicyUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PolicyCreateOrConnectWithoutPlanInput | PolicyCreateOrConnectWithoutPlanInput[]
    upsert?: PolicyUpsertWithWhereUniqueWithoutPlanInput | PolicyUpsertWithWhereUniqueWithoutPlanInput[]
    set?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    disconnect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    delete?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    connect?: PolicyWhereUniqueInput | PolicyWhereUniqueInput[]
    update?: PolicyUpdateWithWhereUniqueWithoutPlanInput | PolicyUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PolicyUpdateManyWithWhereWithoutPlanInput | PolicyUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
  }

  export type ProcedureByPlanUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<ProcedureByPlanCreateWithoutPlanInput, ProcedureByPlanUncheckedCreateWithoutPlanInput> | ProcedureByPlanCreateWithoutPlanInput[] | ProcedureByPlanUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutPlanInput | ProcedureByPlanCreateOrConnectWithoutPlanInput[]
    upsert?: ProcedureByPlanUpsertWithWhereUniqueWithoutPlanInput | ProcedureByPlanUpsertWithWhereUniqueWithoutPlanInput[]
    set?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    disconnect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    delete?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    update?: ProcedureByPlanUpdateWithWhereUniqueWithoutPlanInput | ProcedureByPlanUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: ProcedureByPlanUpdateManyWithWhereWithoutPlanInput | ProcedureByPlanUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: ProcedureByPlanScalarWhereInput | ProcedureByPlanScalarWhereInput[]
  }

  export type PlanCoverageUncheckedUpdateManyWithoutPlanNestedInput = {
    create?: XOR<PlanCoverageCreateWithoutPlanInput, PlanCoverageUncheckedCreateWithoutPlanInput> | PlanCoverageCreateWithoutPlanInput[] | PlanCoverageUncheckedCreateWithoutPlanInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutPlanInput | PlanCoverageCreateOrConnectWithoutPlanInput[]
    upsert?: PlanCoverageUpsertWithWhereUniqueWithoutPlanInput | PlanCoverageUpsertWithWhereUniqueWithoutPlanInput[]
    set?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    disconnect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    delete?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    update?: PlanCoverageUpdateWithWhereUniqueWithoutPlanInput | PlanCoverageUpdateWithWhereUniqueWithoutPlanInput[]
    updateMany?: PlanCoverageUpdateManyWithWhereWithoutPlanInput | PlanCoverageUpdateManyWithWhereWithoutPlanInput[]
    deleteMany?: PlanCoverageScalarWhereInput | PlanCoverageScalarWhereInput[]
  }

  export type PlanCreateNestedOneWithoutCoveragesInput = {
    create?: XOR<PlanCreateWithoutCoveragesInput, PlanUncheckedCreateWithoutCoveragesInput>
    connectOrCreate?: PlanCreateOrConnectWithoutCoveragesInput
    connect?: PlanWhereUniqueInput
  }

  export type CoverageCreateNestedOneWithoutPlansInput = {
    create?: XOR<CoverageCreateWithoutPlansInput, CoverageUncheckedCreateWithoutPlansInput>
    connectOrCreate?: CoverageCreateOrConnectWithoutPlansInput
    connect?: CoverageWhereUniqueInput
  }

  export type PlanUpdateOneRequiredWithoutCoveragesNestedInput = {
    create?: XOR<PlanCreateWithoutCoveragesInput, PlanUncheckedCreateWithoutCoveragesInput>
    connectOrCreate?: PlanCreateOrConnectWithoutCoveragesInput
    upsert?: PlanUpsertWithoutCoveragesInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutCoveragesInput, PlanUpdateWithoutCoveragesInput>, PlanUncheckedUpdateWithoutCoveragesInput>
  }

  export type CoverageUpdateOneRequiredWithoutPlansNestedInput = {
    create?: XOR<CoverageCreateWithoutPlansInput, CoverageUncheckedCreateWithoutPlansInput>
    connectOrCreate?: CoverageCreateOrConnectWithoutPlansInput
    upsert?: CoverageUpsertWithoutPlansInput
    connect?: CoverageWhereUniqueInput
    update?: XOR<XOR<CoverageUpdateToOneWithWhereWithoutPlansInput, CoverageUpdateWithoutPlansInput>, CoverageUncheckedUpdateWithoutPlansInput>
  }

  export type PlanCoverageCreateNestedManyWithoutCoverageInput = {
    create?: XOR<PlanCoverageCreateWithoutCoverageInput, PlanCoverageUncheckedCreateWithoutCoverageInput> | PlanCoverageCreateWithoutCoverageInput[] | PlanCoverageUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutCoverageInput | PlanCoverageCreateOrConnectWithoutCoverageInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
  }

  export type ProcedureCreateNestedManyWithoutCoverageInput = {
    create?: XOR<ProcedureCreateWithoutCoverageInput, ProcedureUncheckedCreateWithoutCoverageInput> | ProcedureCreateWithoutCoverageInput[] | ProcedureUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: ProcedureCreateOrConnectWithoutCoverageInput | ProcedureCreateOrConnectWithoutCoverageInput[]
    connect?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
  }

  export type PlanCoverageUncheckedCreateNestedManyWithoutCoverageInput = {
    create?: XOR<PlanCoverageCreateWithoutCoverageInput, PlanCoverageUncheckedCreateWithoutCoverageInput> | PlanCoverageCreateWithoutCoverageInput[] | PlanCoverageUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutCoverageInput | PlanCoverageCreateOrConnectWithoutCoverageInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
  }

  export type ProcedureUncheckedCreateNestedManyWithoutCoverageInput = {
    create?: XOR<ProcedureCreateWithoutCoverageInput, ProcedureUncheckedCreateWithoutCoverageInput> | ProcedureCreateWithoutCoverageInput[] | ProcedureUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: ProcedureCreateOrConnectWithoutCoverageInput | ProcedureCreateOrConnectWithoutCoverageInput[]
    connect?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
  }

  export type PlanCoverageUpdateManyWithoutCoverageNestedInput = {
    create?: XOR<PlanCoverageCreateWithoutCoverageInput, PlanCoverageUncheckedCreateWithoutCoverageInput> | PlanCoverageCreateWithoutCoverageInput[] | PlanCoverageUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutCoverageInput | PlanCoverageCreateOrConnectWithoutCoverageInput[]
    upsert?: PlanCoverageUpsertWithWhereUniqueWithoutCoverageInput | PlanCoverageUpsertWithWhereUniqueWithoutCoverageInput[]
    set?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    disconnect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    delete?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    update?: PlanCoverageUpdateWithWhereUniqueWithoutCoverageInput | PlanCoverageUpdateWithWhereUniqueWithoutCoverageInput[]
    updateMany?: PlanCoverageUpdateManyWithWhereWithoutCoverageInput | PlanCoverageUpdateManyWithWhereWithoutCoverageInput[]
    deleteMany?: PlanCoverageScalarWhereInput | PlanCoverageScalarWhereInput[]
  }

  export type ProcedureUpdateManyWithoutCoverageNestedInput = {
    create?: XOR<ProcedureCreateWithoutCoverageInput, ProcedureUncheckedCreateWithoutCoverageInput> | ProcedureCreateWithoutCoverageInput[] | ProcedureUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: ProcedureCreateOrConnectWithoutCoverageInput | ProcedureCreateOrConnectWithoutCoverageInput[]
    upsert?: ProcedureUpsertWithWhereUniqueWithoutCoverageInput | ProcedureUpsertWithWhereUniqueWithoutCoverageInput[]
    set?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    disconnect?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    delete?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    connect?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    update?: ProcedureUpdateWithWhereUniqueWithoutCoverageInput | ProcedureUpdateWithWhereUniqueWithoutCoverageInput[]
    updateMany?: ProcedureUpdateManyWithWhereWithoutCoverageInput | ProcedureUpdateManyWithWhereWithoutCoverageInput[]
    deleteMany?: ProcedureScalarWhereInput | ProcedureScalarWhereInput[]
  }

  export type PlanCoverageUncheckedUpdateManyWithoutCoverageNestedInput = {
    create?: XOR<PlanCoverageCreateWithoutCoverageInput, PlanCoverageUncheckedCreateWithoutCoverageInput> | PlanCoverageCreateWithoutCoverageInput[] | PlanCoverageUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: PlanCoverageCreateOrConnectWithoutCoverageInput | PlanCoverageCreateOrConnectWithoutCoverageInput[]
    upsert?: PlanCoverageUpsertWithWhereUniqueWithoutCoverageInput | PlanCoverageUpsertWithWhereUniqueWithoutCoverageInput[]
    set?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    disconnect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    delete?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    connect?: PlanCoverageWhereUniqueInput | PlanCoverageWhereUniqueInput[]
    update?: PlanCoverageUpdateWithWhereUniqueWithoutCoverageInput | PlanCoverageUpdateWithWhereUniqueWithoutCoverageInput[]
    updateMany?: PlanCoverageUpdateManyWithWhereWithoutCoverageInput | PlanCoverageUpdateManyWithWhereWithoutCoverageInput[]
    deleteMany?: PlanCoverageScalarWhereInput | PlanCoverageScalarWhereInput[]
  }

  export type ProcedureUncheckedUpdateManyWithoutCoverageNestedInput = {
    create?: XOR<ProcedureCreateWithoutCoverageInput, ProcedureUncheckedCreateWithoutCoverageInput> | ProcedureCreateWithoutCoverageInput[] | ProcedureUncheckedCreateWithoutCoverageInput[]
    connectOrCreate?: ProcedureCreateOrConnectWithoutCoverageInput | ProcedureCreateOrConnectWithoutCoverageInput[]
    upsert?: ProcedureUpsertWithWhereUniqueWithoutCoverageInput | ProcedureUpsertWithWhereUniqueWithoutCoverageInput[]
    set?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    disconnect?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    delete?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    connect?: ProcedureWhereUniqueInput | ProcedureWhereUniqueInput[]
    update?: ProcedureUpdateWithWhereUniqueWithoutCoverageInput | ProcedureUpdateWithWhereUniqueWithoutCoverageInput[]
    updateMany?: ProcedureUpdateManyWithWhereWithoutCoverageInput | ProcedureUpdateManyWithWhereWithoutCoverageInput[]
    deleteMany?: ProcedureScalarWhereInput | ProcedureScalarWhereInput[]
  }

  export type CoverageCreateNestedOneWithoutProceduresInput = {
    create?: XOR<CoverageCreateWithoutProceduresInput, CoverageUncheckedCreateWithoutProceduresInput>
    connectOrCreate?: CoverageCreateOrConnectWithoutProceduresInput
    connect?: CoverageWhereUniqueInput
  }

  export type ProcedureByPlanCreateNestedManyWithoutProcedureInput = {
    create?: XOR<ProcedureByPlanCreateWithoutProcedureInput, ProcedureByPlanUncheckedCreateWithoutProcedureInput> | ProcedureByPlanCreateWithoutProcedureInput[] | ProcedureByPlanUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutProcedureInput | ProcedureByPlanCreateOrConnectWithoutProcedureInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
  }

  export type PolicyProcedureCreateNestedManyWithoutProcedureInput = {
    create?: XOR<PolicyProcedureCreateWithoutProcedureInput, PolicyProcedureUncheckedCreateWithoutProcedureInput> | PolicyProcedureCreateWithoutProcedureInput[] | PolicyProcedureUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutProcedureInput | PolicyProcedureCreateOrConnectWithoutProcedureInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
  }

  export type ProcedureByPlanUncheckedCreateNestedManyWithoutProcedureInput = {
    create?: XOR<ProcedureByPlanCreateWithoutProcedureInput, ProcedureByPlanUncheckedCreateWithoutProcedureInput> | ProcedureByPlanCreateWithoutProcedureInput[] | ProcedureByPlanUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutProcedureInput | ProcedureByPlanCreateOrConnectWithoutProcedureInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
  }

  export type PolicyProcedureUncheckedCreateNestedManyWithoutProcedureInput = {
    create?: XOR<PolicyProcedureCreateWithoutProcedureInput, PolicyProcedureUncheckedCreateWithoutProcedureInput> | PolicyProcedureCreateWithoutProcedureInput[] | PolicyProcedureUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutProcedureInput | PolicyProcedureCreateOrConnectWithoutProcedureInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
  }

  export type CoverageUpdateOneRequiredWithoutProceduresNestedInput = {
    create?: XOR<CoverageCreateWithoutProceduresInput, CoverageUncheckedCreateWithoutProceduresInput>
    connectOrCreate?: CoverageCreateOrConnectWithoutProceduresInput
    upsert?: CoverageUpsertWithoutProceduresInput
    connect?: CoverageWhereUniqueInput
    update?: XOR<XOR<CoverageUpdateToOneWithWhereWithoutProceduresInput, CoverageUpdateWithoutProceduresInput>, CoverageUncheckedUpdateWithoutProceduresInput>
  }

  export type ProcedureByPlanUpdateManyWithoutProcedureNestedInput = {
    create?: XOR<ProcedureByPlanCreateWithoutProcedureInput, ProcedureByPlanUncheckedCreateWithoutProcedureInput> | ProcedureByPlanCreateWithoutProcedureInput[] | ProcedureByPlanUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutProcedureInput | ProcedureByPlanCreateOrConnectWithoutProcedureInput[]
    upsert?: ProcedureByPlanUpsertWithWhereUniqueWithoutProcedureInput | ProcedureByPlanUpsertWithWhereUniqueWithoutProcedureInput[]
    set?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    disconnect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    delete?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    update?: ProcedureByPlanUpdateWithWhereUniqueWithoutProcedureInput | ProcedureByPlanUpdateWithWhereUniqueWithoutProcedureInput[]
    updateMany?: ProcedureByPlanUpdateManyWithWhereWithoutProcedureInput | ProcedureByPlanUpdateManyWithWhereWithoutProcedureInput[]
    deleteMany?: ProcedureByPlanScalarWhereInput | ProcedureByPlanScalarWhereInput[]
  }

  export type PolicyProcedureUpdateManyWithoutProcedureNestedInput = {
    create?: XOR<PolicyProcedureCreateWithoutProcedureInput, PolicyProcedureUncheckedCreateWithoutProcedureInput> | PolicyProcedureCreateWithoutProcedureInput[] | PolicyProcedureUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutProcedureInput | PolicyProcedureCreateOrConnectWithoutProcedureInput[]
    upsert?: PolicyProcedureUpsertWithWhereUniqueWithoutProcedureInput | PolicyProcedureUpsertWithWhereUniqueWithoutProcedureInput[]
    set?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    disconnect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    delete?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    update?: PolicyProcedureUpdateWithWhereUniqueWithoutProcedureInput | PolicyProcedureUpdateWithWhereUniqueWithoutProcedureInput[]
    updateMany?: PolicyProcedureUpdateManyWithWhereWithoutProcedureInput | PolicyProcedureUpdateManyWithWhereWithoutProcedureInput[]
    deleteMany?: PolicyProcedureScalarWhereInput | PolicyProcedureScalarWhereInput[]
  }

  export type ProcedureByPlanUncheckedUpdateManyWithoutProcedureNestedInput = {
    create?: XOR<ProcedureByPlanCreateWithoutProcedureInput, ProcedureByPlanUncheckedCreateWithoutProcedureInput> | ProcedureByPlanCreateWithoutProcedureInput[] | ProcedureByPlanUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: ProcedureByPlanCreateOrConnectWithoutProcedureInput | ProcedureByPlanCreateOrConnectWithoutProcedureInput[]
    upsert?: ProcedureByPlanUpsertWithWhereUniqueWithoutProcedureInput | ProcedureByPlanUpsertWithWhereUniqueWithoutProcedureInput[]
    set?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    disconnect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    delete?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    connect?: ProcedureByPlanWhereUniqueInput | ProcedureByPlanWhereUniqueInput[]
    update?: ProcedureByPlanUpdateWithWhereUniqueWithoutProcedureInput | ProcedureByPlanUpdateWithWhereUniqueWithoutProcedureInput[]
    updateMany?: ProcedureByPlanUpdateManyWithWhereWithoutProcedureInput | ProcedureByPlanUpdateManyWithWhereWithoutProcedureInput[]
    deleteMany?: ProcedureByPlanScalarWhereInput | ProcedureByPlanScalarWhereInput[]
  }

  export type PolicyProcedureUncheckedUpdateManyWithoutProcedureNestedInput = {
    create?: XOR<PolicyProcedureCreateWithoutProcedureInput, PolicyProcedureUncheckedCreateWithoutProcedureInput> | PolicyProcedureCreateWithoutProcedureInput[] | PolicyProcedureUncheckedCreateWithoutProcedureInput[]
    connectOrCreate?: PolicyProcedureCreateOrConnectWithoutProcedureInput | PolicyProcedureCreateOrConnectWithoutProcedureInput[]
    upsert?: PolicyProcedureUpsertWithWhereUniqueWithoutProcedureInput | PolicyProcedureUpsertWithWhereUniqueWithoutProcedureInput[]
    set?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    disconnect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    delete?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    connect?: PolicyProcedureWhereUniqueInput | PolicyProcedureWhereUniqueInput[]
    update?: PolicyProcedureUpdateWithWhereUniqueWithoutProcedureInput | PolicyProcedureUpdateWithWhereUniqueWithoutProcedureInput[]
    updateMany?: PolicyProcedureUpdateManyWithWhereWithoutProcedureInput | PolicyProcedureUpdateManyWithWhereWithoutProcedureInput[]
    deleteMany?: PolicyProcedureScalarWhereInput | PolicyProcedureScalarWhereInput[]
  }

  export type ProcedureCreateNestedOneWithoutProceduresByPlanInput = {
    create?: XOR<ProcedureCreateWithoutProceduresByPlanInput, ProcedureUncheckedCreateWithoutProceduresByPlanInput>
    connectOrCreate?: ProcedureCreateOrConnectWithoutProceduresByPlanInput
    connect?: ProcedureWhereUniqueInput
  }

  export type PlanCreateNestedOneWithoutProceduresByPlanInput = {
    create?: XOR<PlanCreateWithoutProceduresByPlanInput, PlanUncheckedCreateWithoutProceduresByPlanInput>
    connectOrCreate?: PlanCreateOrConnectWithoutProceduresByPlanInput
    connect?: PlanWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProcedureUpdateOneRequiredWithoutProceduresByPlanNestedInput = {
    create?: XOR<ProcedureCreateWithoutProceduresByPlanInput, ProcedureUncheckedCreateWithoutProceduresByPlanInput>
    connectOrCreate?: ProcedureCreateOrConnectWithoutProceduresByPlanInput
    upsert?: ProcedureUpsertWithoutProceduresByPlanInput
    connect?: ProcedureWhereUniqueInput
    update?: XOR<XOR<ProcedureUpdateToOneWithWhereWithoutProceduresByPlanInput, ProcedureUpdateWithoutProceduresByPlanInput>, ProcedureUncheckedUpdateWithoutProceduresByPlanInput>
  }

  export type PlanUpdateOneRequiredWithoutProceduresByPlanNestedInput = {
    create?: XOR<PlanCreateWithoutProceduresByPlanInput, PlanUncheckedCreateWithoutProceduresByPlanInput>
    connectOrCreate?: PlanCreateOrConnectWithoutProceduresByPlanInput
    upsert?: PlanUpsertWithoutProceduresByPlanInput
    connect?: PlanWhereUniqueInput
    update?: XOR<XOR<PlanUpdateToOneWithWhereWithoutProceduresByPlanInput, PlanUpdateWithoutProceduresByPlanInput>, PlanUncheckedUpdateWithoutProceduresByPlanInput>
  }

  export type PolicyCreateNestedOneWithoutPolicyCoveragesInput = {
    create?: XOR<PolicyCreateWithoutPolicyCoveragesInput, PolicyUncheckedCreateWithoutPolicyCoveragesInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutPolicyCoveragesInput
    connect?: PolicyWhereUniqueInput
  }

  export type ProcedureCreateNestedOneWithoutPoliciesProcedureInput = {
    create?: XOR<ProcedureCreateWithoutPoliciesProcedureInput, ProcedureUncheckedCreateWithoutPoliciesProcedureInput>
    connectOrCreate?: ProcedureCreateOrConnectWithoutPoliciesProcedureInput
    connect?: ProcedureWhereUniqueInput
  }

  export type PolicyUpdateOneRequiredWithoutPolicyCoveragesNestedInput = {
    create?: XOR<PolicyCreateWithoutPolicyCoveragesInput, PolicyUncheckedCreateWithoutPolicyCoveragesInput>
    connectOrCreate?: PolicyCreateOrConnectWithoutPolicyCoveragesInput
    upsert?: PolicyUpsertWithoutPolicyCoveragesInput
    connect?: PolicyWhereUniqueInput
    update?: XOR<XOR<PolicyUpdateToOneWithWhereWithoutPolicyCoveragesInput, PolicyUpdateWithoutPolicyCoveragesInput>, PolicyUncheckedUpdateWithoutPolicyCoveragesInput>
  }

  export type ProcedureUpdateOneRequiredWithoutPoliciesProcedureNestedInput = {
    create?: XOR<ProcedureCreateWithoutPoliciesProcedureInput, ProcedureUncheckedCreateWithoutPoliciesProcedureInput>
    connectOrCreate?: ProcedureCreateOrConnectWithoutPoliciesProcedureInput
    upsert?: ProcedureUpsertWithoutPoliciesProcedureInput
    connect?: ProcedureWhereUniqueInput
    update?: XOR<XOR<ProcedureUpdateToOneWithWhereWithoutPoliciesProcedureInput, ProcedureUpdateWithoutPoliciesProcedureInput>, ProcedureUncheckedUpdateWithoutPoliciesProcedureInput>
  }

  export type UserCreateNestedManyWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput> | UserCreateWithoutAccountInput[] | UserUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput | UserCreateOrConnectWithoutAccountInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutAccountInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput> | UserCreateWithoutAccountInput[] | UserUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput | UserCreateOrConnectWithoutAccountInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput> | UserCreateWithoutAccountInput[] | UserUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput | UserCreateOrConnectWithoutAccountInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccountInput | UserUpsertWithWhereUniqueWithoutAccountInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccountInput | UserUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccountInput | UserUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutAccountNestedInput = {
    create?: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput> | UserCreateWithoutAccountInput[] | UserUncheckedCreateWithoutAccountInput[]
    connectOrCreate?: UserCreateOrConnectWithoutAccountInput | UserCreateOrConnectWithoutAccountInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutAccountInput | UserUpsertWithWhereUniqueWithoutAccountInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutAccountInput | UserUpdateWithWhereUniqueWithoutAccountInput[]
    updateMany?: UserUpdateManyWithWhereWithoutAccountInput | UserUpdateManyWithWhereWithoutAccountInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutAddressesInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneWithoutAddressesNestedInput = {
    create?: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    connectOrCreate?: UserCreateOrConnectWithoutAddressesInput
    upsert?: UserUpsertWithoutAddressesInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAddressesInput, UserUpdateWithoutAddressesInput>, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type AccountCreateWithoutUsersInput = {
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountUncheckedCreateWithoutUsersInput = {
    id?: number
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type AccountCreateOrConnectWithoutUsersInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUsersInput, AccountUncheckedCreateWithoutUsersInput>
  }

  export type AddressCreateWithoutUserInput = {
    street: string
    number: string
    complement?: string | null
    neighborhood: string
    zipcode: string
    city: string
    state: string
    addressType: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AddressUncheckedCreateWithoutUserInput = {
    id?: number
    street: string
    number: string
    complement?: string | null
    neighborhood: string
    zipcode: string
    city: string
    state: string
    addressType: string
    updatedAt?: Date | string
    createdAt?: Date | string
  }

  export type AddressCreateOrConnectWithoutUserInput = {
    where: AddressWhereUniqueInput
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type PetCreateWithoutUserInput = {
    type: string
    name: string
    breed: string
    birthDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    policy?: PolicyCreateNestedOneWithoutPetInput
  }

  export type PetUncheckedCreateWithoutUserInput = {
    id?: number
    type: string
    name: string
    breed: string
    birthDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    policy?: PolicyUncheckedCreateNestedOneWithoutPetInput
  }

  export type PetCreateOrConnectWithoutUserInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput>
  }

  export type AccountUpsertWithoutUsersInput = {
    update: XOR<AccountUpdateWithoutUsersInput, AccountUncheckedUpdateWithoutUsersInput>
    create: XOR<AccountCreateWithoutUsersInput, AccountUncheckedCreateWithoutUsersInput>
    where?: AccountWhereInput
  }

  export type AccountUpdateToOneWithWhereWithoutUsersInput = {
    where?: AccountWhereInput
    data: XOR<AccountUpdateWithoutUsersInput, AccountUncheckedUpdateWithoutUsersInput>
  }

  export type AccountUpdateWithoutUsersInput = {
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AccountUncheckedUpdateWithoutUsersInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUpsertWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    update: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
    create: XOR<AddressCreateWithoutUserInput, AddressUncheckedCreateWithoutUserInput>
  }

  export type AddressUpdateWithWhereUniqueWithoutUserInput = {
    where: AddressWhereUniqueInput
    data: XOR<AddressUpdateWithoutUserInput, AddressUncheckedUpdateWithoutUserInput>
  }

  export type AddressUpdateManyWithWhereWithoutUserInput = {
    where: AddressScalarWhereInput
    data: XOR<AddressUpdateManyMutationInput, AddressUncheckedUpdateManyWithoutUserInput>
  }

  export type AddressScalarWhereInput = {
    AND?: AddressScalarWhereInput | AddressScalarWhereInput[]
    OR?: AddressScalarWhereInput[]
    NOT?: AddressScalarWhereInput | AddressScalarWhereInput[]
    id?: IntFilter<"Address"> | number
    street?: StringFilter<"Address"> | string
    number?: StringFilter<"Address"> | string
    complement?: StringNullableFilter<"Address"> | string | null
    neighborhood?: StringFilter<"Address"> | string
    zipcode?: StringFilter<"Address"> | string
    city?: StringFilter<"Address"> | string
    state?: StringFilter<"Address"> | string
    addressType?: StringFilter<"Address"> | string
    userId?: IntNullableFilter<"Address"> | number | null
    updatedAt?: DateTimeFilter<"Address"> | Date | string
    createdAt?: DateTimeFilter<"Address"> | Date | string
  }

  export type PetUpsertWithWhereUniqueWithoutUserInput = {
    where: PetWhereUniqueInput
    update: XOR<PetUpdateWithoutUserInput, PetUncheckedUpdateWithoutUserInput>
    create: XOR<PetCreateWithoutUserInput, PetUncheckedCreateWithoutUserInput>
  }

  export type PetUpdateWithWhereUniqueWithoutUserInput = {
    where: PetWhereUniqueInput
    data: XOR<PetUpdateWithoutUserInput, PetUncheckedUpdateWithoutUserInput>
  }

  export type PetUpdateManyWithWhereWithoutUserInput = {
    where: PetScalarWhereInput
    data: XOR<PetUpdateManyMutationInput, PetUncheckedUpdateManyWithoutUserInput>
  }

  export type PetScalarWhereInput = {
    AND?: PetScalarWhereInput | PetScalarWhereInput[]
    OR?: PetScalarWhereInput[]
    NOT?: PetScalarWhereInput | PetScalarWhereInput[]
    id?: IntFilter<"Pet"> | number
    type?: StringFilter<"Pet"> | string
    name?: StringFilter<"Pet"> | string
    breed?: StringFilter<"Pet"> | string
    birthDate?: DateTimeFilter<"Pet"> | Date | string
    userId?: IntFilter<"Pet"> | number
    createdAt?: DateTimeFilter<"Pet"> | Date | string
    updatedAt?: DateTimeFilter<"Pet"> | Date | string
  }

  export type UserCreateWithoutPetsInput = {
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUsersInput
    addresses?: AddressCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPetsInput = {
    id?: number
    name: string
    email: string
    password: string
    accountId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPetsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
  }

  export type PolicyCreateWithoutPetInput = {
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    createdAt?: Date | string
    updatedAt?: Date | string
    plan: PlanCreateNestedOneWithoutPoliciesInput
    policyCoverages?: PolicyProcedureCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUncheckedCreateWithoutPetInput = {
    id?: number
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    planId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policyCoverages?: PolicyProcedureUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type PolicyCreateOrConnectWithoutPetInput = {
    where: PolicyWhereUniqueInput
    create: XOR<PolicyCreateWithoutPetInput, PolicyUncheckedCreateWithoutPetInput>
  }

  export type UserUpsertWithoutPetsInput = {
    update: XOR<UserUpdateWithoutPetsInput, UserUncheckedUpdateWithoutPetsInput>
    create: XOR<UserCreateWithoutPetsInput, UserUncheckedCreateWithoutPetsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPetsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPetsInput, UserUncheckedUpdateWithoutPetsInput>
  }

  export type UserUpdateWithoutPetsInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUsersNestedInput
    addresses?: AddressUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPetsInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PolicyUpsertWithoutPetInput = {
    update: XOR<PolicyUpdateWithoutPetInput, PolicyUncheckedUpdateWithoutPetInput>
    create: XOR<PolicyCreateWithoutPetInput, PolicyUncheckedCreateWithoutPetInput>
    where?: PolicyWhereInput
  }

  export type PolicyUpdateToOneWithWhereWithoutPetInput = {
    where?: PolicyWhereInput
    data: XOR<PolicyUpdateWithoutPetInput, PolicyUncheckedUpdateWithoutPetInput>
  }

  export type PolicyUpdateWithoutPetInput = {
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    plan?: PlanUpdateOneRequiredWithoutPoliciesNestedInput
    policyCoverages?: PolicyProcedureUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateWithoutPetInput = {
    id?: IntFieldUpdateOperationsInput | number
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyCoverages?: PolicyProcedureUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type PetCreateWithoutPolicyInput = {
    type: string
    name: string
    breed: string
    birthDate: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutPetsInput
  }

  export type PetUncheckedCreateWithoutPolicyInput = {
    id?: number
    type: string
    name: string
    breed: string
    birthDate: Date | string
    userId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PetCreateOrConnectWithoutPolicyInput = {
    where: PetWhereUniqueInput
    create: XOR<PetCreateWithoutPolicyInput, PetUncheckedCreateWithoutPolicyInput>
  }

  export type PlanCreateWithoutPoliciesInput = {
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    proceduresByPlan?: ProcedureByPlanCreateNestedManyWithoutPlanInput
    coverages?: PlanCoverageCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutPoliciesInput = {
    id?: number
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    proceduresByPlan?: ProcedureByPlanUncheckedCreateNestedManyWithoutPlanInput
    coverages?: PlanCoverageUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutPoliciesInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutPoliciesInput, PlanUncheckedCreateWithoutPoliciesInput>
  }

  export type PolicyProcedureCreateWithoutPolicyInput = {
    used: number
    procedure: ProcedureCreateNestedOneWithoutPoliciesProcedureInput
  }

  export type PolicyProcedureUncheckedCreateWithoutPolicyInput = {
    id?: number
    procedureId: number
    used: number
  }

  export type PolicyProcedureCreateOrConnectWithoutPolicyInput = {
    where: PolicyProcedureWhereUniqueInput
    create: XOR<PolicyProcedureCreateWithoutPolicyInput, PolicyProcedureUncheckedCreateWithoutPolicyInput>
  }

  export type PetUpsertWithoutPolicyInput = {
    update: XOR<PetUpdateWithoutPolicyInput, PetUncheckedUpdateWithoutPolicyInput>
    create: XOR<PetCreateWithoutPolicyInput, PetUncheckedCreateWithoutPolicyInput>
    where?: PetWhereInput
  }

  export type PetUpdateToOneWithWhereWithoutPolicyInput = {
    where?: PetWhereInput
    data: XOR<PetUpdateWithoutPolicyInput, PetUncheckedUpdateWithoutPolicyInput>
  }

  export type PetUpdateWithoutPolicyInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPetsNestedInput
  }

  export type PetUncheckedUpdateWithoutPolicyInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlanUpsertWithoutPoliciesInput = {
    update: XOR<PlanUpdateWithoutPoliciesInput, PlanUncheckedUpdateWithoutPoliciesInput>
    create: XOR<PlanCreateWithoutPoliciesInput, PlanUncheckedCreateWithoutPoliciesInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutPoliciesInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutPoliciesInput, PlanUncheckedUpdateWithoutPoliciesInput>
  }

  export type PlanUpdateWithoutPoliciesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proceduresByPlan?: ProcedureByPlanUpdateManyWithoutPlanNestedInput
    coverages?: PlanCoverageUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutPoliciesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proceduresByPlan?: ProcedureByPlanUncheckedUpdateManyWithoutPlanNestedInput
    coverages?: PlanCoverageUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PolicyProcedureUpsertWithWhereUniqueWithoutPolicyInput = {
    where: PolicyProcedureWhereUniqueInput
    update: XOR<PolicyProcedureUpdateWithoutPolicyInput, PolicyProcedureUncheckedUpdateWithoutPolicyInput>
    create: XOR<PolicyProcedureCreateWithoutPolicyInput, PolicyProcedureUncheckedCreateWithoutPolicyInput>
  }

  export type PolicyProcedureUpdateWithWhereUniqueWithoutPolicyInput = {
    where: PolicyProcedureWhereUniqueInput
    data: XOR<PolicyProcedureUpdateWithoutPolicyInput, PolicyProcedureUncheckedUpdateWithoutPolicyInput>
  }

  export type PolicyProcedureUpdateManyWithWhereWithoutPolicyInput = {
    where: PolicyProcedureScalarWhereInput
    data: XOR<PolicyProcedureUpdateManyMutationInput, PolicyProcedureUncheckedUpdateManyWithoutPolicyInput>
  }

  export type PolicyProcedureScalarWhereInput = {
    AND?: PolicyProcedureScalarWhereInput | PolicyProcedureScalarWhereInput[]
    OR?: PolicyProcedureScalarWhereInput[]
    NOT?: PolicyProcedureScalarWhereInput | PolicyProcedureScalarWhereInput[]
    id?: IntFilter<"PolicyProcedure"> | number
    policyId?: IntFilter<"PolicyProcedure"> | number
    procedureId?: IntFilter<"PolicyProcedure"> | number
    used?: IntFilter<"PolicyProcedure"> | number
  }

  export type PolicyCreateWithoutPlanInput = {
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    createdAt?: Date | string
    updatedAt?: Date | string
    pet: PetCreateNestedOneWithoutPolicyInput
    policyCoverages?: PolicyProcedureCreateNestedManyWithoutPolicyInput
  }

  export type PolicyUncheckedCreateWithoutPlanInput = {
    id?: number
    petId: number
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policyCoverages?: PolicyProcedureUncheckedCreateNestedManyWithoutPolicyInput
  }

  export type PolicyCreateOrConnectWithoutPlanInput = {
    where: PolicyWhereUniqueInput
    create: XOR<PolicyCreateWithoutPlanInput, PolicyUncheckedCreateWithoutPlanInput>
  }

  export type ProcedureByPlanCreateWithoutPlanInput = {
    availableLimit: string
    share: number
    valueToAnticipate?: number | null
    procedure: ProcedureCreateNestedOneWithoutProceduresByPlanInput
  }

  export type ProcedureByPlanUncheckedCreateWithoutPlanInput = {
    id?: number
    availableLimit: string
    share: number
    valueToAnticipate?: number | null
    procedureId: number
  }

  export type ProcedureByPlanCreateOrConnectWithoutPlanInput = {
    where: ProcedureByPlanWhereUniqueInput
    create: XOR<ProcedureByPlanCreateWithoutPlanInput, ProcedureByPlanUncheckedCreateWithoutPlanInput>
  }

  export type PlanCoverageCreateWithoutPlanInput = {
    coverage: CoverageCreateNestedOneWithoutPlansInput
  }

  export type PlanCoverageUncheckedCreateWithoutPlanInput = {
    id?: number
    coverageId: number
  }

  export type PlanCoverageCreateOrConnectWithoutPlanInput = {
    where: PlanCoverageWhereUniqueInput
    create: XOR<PlanCoverageCreateWithoutPlanInput, PlanCoverageUncheckedCreateWithoutPlanInput>
  }

  export type PolicyUpsertWithWhereUniqueWithoutPlanInput = {
    where: PolicyWhereUniqueInput
    update: XOR<PolicyUpdateWithoutPlanInput, PolicyUncheckedUpdateWithoutPlanInput>
    create: XOR<PolicyCreateWithoutPlanInput, PolicyUncheckedCreateWithoutPlanInput>
  }

  export type PolicyUpdateWithWhereUniqueWithoutPlanInput = {
    where: PolicyWhereUniqueInput
    data: XOR<PolicyUpdateWithoutPlanInput, PolicyUncheckedUpdateWithoutPlanInput>
  }

  export type PolicyUpdateManyWithWhereWithoutPlanInput = {
    where: PolicyScalarWhereInput
    data: XOR<PolicyUpdateManyMutationInput, PolicyUncheckedUpdateManyWithoutPlanInput>
  }

  export type PolicyScalarWhereInput = {
    AND?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
    OR?: PolicyScalarWhereInput[]
    NOT?: PolicyScalarWhereInput | PolicyScalarWhereInput[]
    id?: IntFilter<"Policy"> | number
    petId?: IntFilter<"Policy"> | number
    microchipNumber?: StringFilter<"Policy"> | string
    status?: StringFilter<"Policy"> | string
    initialGraceDate?: DateTimeFilter<"Policy"> | Date | string
    renewalOfLimits?: IntFilter<"Policy"> | number
    planId?: IntFilter<"Policy"> | number
    createdAt?: DateTimeFilter<"Policy"> | Date | string
    updatedAt?: DateTimeFilter<"Policy"> | Date | string
  }

  export type ProcedureByPlanUpsertWithWhereUniqueWithoutPlanInput = {
    where: ProcedureByPlanWhereUniqueInput
    update: XOR<ProcedureByPlanUpdateWithoutPlanInput, ProcedureByPlanUncheckedUpdateWithoutPlanInput>
    create: XOR<ProcedureByPlanCreateWithoutPlanInput, ProcedureByPlanUncheckedCreateWithoutPlanInput>
  }

  export type ProcedureByPlanUpdateWithWhereUniqueWithoutPlanInput = {
    where: ProcedureByPlanWhereUniqueInput
    data: XOR<ProcedureByPlanUpdateWithoutPlanInput, ProcedureByPlanUncheckedUpdateWithoutPlanInput>
  }

  export type ProcedureByPlanUpdateManyWithWhereWithoutPlanInput = {
    where: ProcedureByPlanScalarWhereInput
    data: XOR<ProcedureByPlanUpdateManyMutationInput, ProcedureByPlanUncheckedUpdateManyWithoutPlanInput>
  }

  export type ProcedureByPlanScalarWhereInput = {
    AND?: ProcedureByPlanScalarWhereInput | ProcedureByPlanScalarWhereInput[]
    OR?: ProcedureByPlanScalarWhereInput[]
    NOT?: ProcedureByPlanScalarWhereInput | ProcedureByPlanScalarWhereInput[]
    id?: IntFilter<"ProcedureByPlan"> | number
    availableLimit?: StringFilter<"ProcedureByPlan"> | string
    share?: FloatFilter<"ProcedureByPlan"> | number
    valueToAnticipate?: FloatNullableFilter<"ProcedureByPlan"> | number | null
    procedureId?: IntFilter<"ProcedureByPlan"> | number
    planId?: IntFilter<"ProcedureByPlan"> | number
  }

  export type PlanCoverageUpsertWithWhereUniqueWithoutPlanInput = {
    where: PlanCoverageWhereUniqueInput
    update: XOR<PlanCoverageUpdateWithoutPlanInput, PlanCoverageUncheckedUpdateWithoutPlanInput>
    create: XOR<PlanCoverageCreateWithoutPlanInput, PlanCoverageUncheckedCreateWithoutPlanInput>
  }

  export type PlanCoverageUpdateWithWhereUniqueWithoutPlanInput = {
    where: PlanCoverageWhereUniqueInput
    data: XOR<PlanCoverageUpdateWithoutPlanInput, PlanCoverageUncheckedUpdateWithoutPlanInput>
  }

  export type PlanCoverageUpdateManyWithWhereWithoutPlanInput = {
    where: PlanCoverageScalarWhereInput
    data: XOR<PlanCoverageUpdateManyMutationInput, PlanCoverageUncheckedUpdateManyWithoutPlanInput>
  }

  export type PlanCoverageScalarWhereInput = {
    AND?: PlanCoverageScalarWhereInput | PlanCoverageScalarWhereInput[]
    OR?: PlanCoverageScalarWhereInput[]
    NOT?: PlanCoverageScalarWhereInput | PlanCoverageScalarWhereInput[]
    id?: IntFilter<"PlanCoverage"> | number
    planId?: IntFilter<"PlanCoverage"> | number
    coverageId?: IntFilter<"PlanCoverage"> | number
  }

  export type PlanCreateWithoutCoveragesInput = {
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policies?: PolicyCreateNestedManyWithoutPlanInput
    proceduresByPlan?: ProcedureByPlanCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutCoveragesInput = {
    id?: number
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policies?: PolicyUncheckedCreateNestedManyWithoutPlanInput
    proceduresByPlan?: ProcedureByPlanUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutCoveragesInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutCoveragesInput, PlanUncheckedCreateWithoutCoveragesInput>
  }

  export type CoverageCreateWithoutPlansInput = {
    name: string
    procedures?: ProcedureCreateNestedManyWithoutCoverageInput
  }

  export type CoverageUncheckedCreateWithoutPlansInput = {
    id?: number
    name: string
    procedures?: ProcedureUncheckedCreateNestedManyWithoutCoverageInput
  }

  export type CoverageCreateOrConnectWithoutPlansInput = {
    where: CoverageWhereUniqueInput
    create: XOR<CoverageCreateWithoutPlansInput, CoverageUncheckedCreateWithoutPlansInput>
  }

  export type PlanUpsertWithoutCoveragesInput = {
    update: XOR<PlanUpdateWithoutCoveragesInput, PlanUncheckedUpdateWithoutCoveragesInput>
    create: XOR<PlanCreateWithoutCoveragesInput, PlanUncheckedCreateWithoutCoveragesInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutCoveragesInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutCoveragesInput, PlanUncheckedUpdateWithoutCoveragesInput>
  }

  export type PlanUpdateWithoutCoveragesInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policies?: PolicyUpdateManyWithoutPlanNestedInput
    proceduresByPlan?: ProcedureByPlanUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutCoveragesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policies?: PolicyUncheckedUpdateManyWithoutPlanNestedInput
    proceduresByPlan?: ProcedureByPlanUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type CoverageUpsertWithoutPlansInput = {
    update: XOR<CoverageUpdateWithoutPlansInput, CoverageUncheckedUpdateWithoutPlansInput>
    create: XOR<CoverageCreateWithoutPlansInput, CoverageUncheckedCreateWithoutPlansInput>
    where?: CoverageWhereInput
  }

  export type CoverageUpdateToOneWithWhereWithoutPlansInput = {
    where?: CoverageWhereInput
    data: XOR<CoverageUpdateWithoutPlansInput, CoverageUncheckedUpdateWithoutPlansInput>
  }

  export type CoverageUpdateWithoutPlansInput = {
    name?: StringFieldUpdateOperationsInput | string
    procedures?: ProcedureUpdateManyWithoutCoverageNestedInput
  }

  export type CoverageUncheckedUpdateWithoutPlansInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    procedures?: ProcedureUncheckedUpdateManyWithoutCoverageNestedInput
  }

  export type PlanCoverageCreateWithoutCoverageInput = {
    plan: PlanCreateNestedOneWithoutCoveragesInput
  }

  export type PlanCoverageUncheckedCreateWithoutCoverageInput = {
    id?: number
    planId: number
  }

  export type PlanCoverageCreateOrConnectWithoutCoverageInput = {
    where: PlanCoverageWhereUniqueInput
    create: XOR<PlanCoverageCreateWithoutCoverageInput, PlanCoverageUncheckedCreateWithoutCoverageInput>
  }

  export type ProcedureCreateWithoutCoverageInput = {
    name: string
    description: string
    proceduresByPlan?: ProcedureByPlanCreateNestedManyWithoutProcedureInput
    policiesProcedure?: PolicyProcedureCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureUncheckedCreateWithoutCoverageInput = {
    id?: number
    name: string
    description: string
    proceduresByPlan?: ProcedureByPlanUncheckedCreateNestedManyWithoutProcedureInput
    policiesProcedure?: PolicyProcedureUncheckedCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureCreateOrConnectWithoutCoverageInput = {
    where: ProcedureWhereUniqueInput
    create: XOR<ProcedureCreateWithoutCoverageInput, ProcedureUncheckedCreateWithoutCoverageInput>
  }

  export type PlanCoverageUpsertWithWhereUniqueWithoutCoverageInput = {
    where: PlanCoverageWhereUniqueInput
    update: XOR<PlanCoverageUpdateWithoutCoverageInput, PlanCoverageUncheckedUpdateWithoutCoverageInput>
    create: XOR<PlanCoverageCreateWithoutCoverageInput, PlanCoverageUncheckedCreateWithoutCoverageInput>
  }

  export type PlanCoverageUpdateWithWhereUniqueWithoutCoverageInput = {
    where: PlanCoverageWhereUniqueInput
    data: XOR<PlanCoverageUpdateWithoutCoverageInput, PlanCoverageUncheckedUpdateWithoutCoverageInput>
  }

  export type PlanCoverageUpdateManyWithWhereWithoutCoverageInput = {
    where: PlanCoverageScalarWhereInput
    data: XOR<PlanCoverageUpdateManyMutationInput, PlanCoverageUncheckedUpdateManyWithoutCoverageInput>
  }

  export type ProcedureUpsertWithWhereUniqueWithoutCoverageInput = {
    where: ProcedureWhereUniqueInput
    update: XOR<ProcedureUpdateWithoutCoverageInput, ProcedureUncheckedUpdateWithoutCoverageInput>
    create: XOR<ProcedureCreateWithoutCoverageInput, ProcedureUncheckedCreateWithoutCoverageInput>
  }

  export type ProcedureUpdateWithWhereUniqueWithoutCoverageInput = {
    where: ProcedureWhereUniqueInput
    data: XOR<ProcedureUpdateWithoutCoverageInput, ProcedureUncheckedUpdateWithoutCoverageInput>
  }

  export type ProcedureUpdateManyWithWhereWithoutCoverageInput = {
    where: ProcedureScalarWhereInput
    data: XOR<ProcedureUpdateManyMutationInput, ProcedureUncheckedUpdateManyWithoutCoverageInput>
  }

  export type ProcedureScalarWhereInput = {
    AND?: ProcedureScalarWhereInput | ProcedureScalarWhereInput[]
    OR?: ProcedureScalarWhereInput[]
    NOT?: ProcedureScalarWhereInput | ProcedureScalarWhereInput[]
    id?: IntFilter<"Procedure"> | number
    name?: StringFilter<"Procedure"> | string
    description?: StringFilter<"Procedure"> | string
    coverageId?: IntFilter<"Procedure"> | number
  }

  export type CoverageCreateWithoutProceduresInput = {
    name: string
    plans?: PlanCoverageCreateNestedManyWithoutCoverageInput
  }

  export type CoverageUncheckedCreateWithoutProceduresInput = {
    id?: number
    name: string
    plans?: PlanCoverageUncheckedCreateNestedManyWithoutCoverageInput
  }

  export type CoverageCreateOrConnectWithoutProceduresInput = {
    where: CoverageWhereUniqueInput
    create: XOR<CoverageCreateWithoutProceduresInput, CoverageUncheckedCreateWithoutProceduresInput>
  }

  export type ProcedureByPlanCreateWithoutProcedureInput = {
    availableLimit: string
    share: number
    valueToAnticipate?: number | null
    plan: PlanCreateNestedOneWithoutProceduresByPlanInput
  }

  export type ProcedureByPlanUncheckedCreateWithoutProcedureInput = {
    id?: number
    availableLimit: string
    share: number
    valueToAnticipate?: number | null
    planId: number
  }

  export type ProcedureByPlanCreateOrConnectWithoutProcedureInput = {
    where: ProcedureByPlanWhereUniqueInput
    create: XOR<ProcedureByPlanCreateWithoutProcedureInput, ProcedureByPlanUncheckedCreateWithoutProcedureInput>
  }

  export type PolicyProcedureCreateWithoutProcedureInput = {
    used: number
    policy: PolicyCreateNestedOneWithoutPolicyCoveragesInput
  }

  export type PolicyProcedureUncheckedCreateWithoutProcedureInput = {
    id?: number
    policyId: number
    used: number
  }

  export type PolicyProcedureCreateOrConnectWithoutProcedureInput = {
    where: PolicyProcedureWhereUniqueInput
    create: XOR<PolicyProcedureCreateWithoutProcedureInput, PolicyProcedureUncheckedCreateWithoutProcedureInput>
  }

  export type CoverageUpsertWithoutProceduresInput = {
    update: XOR<CoverageUpdateWithoutProceduresInput, CoverageUncheckedUpdateWithoutProceduresInput>
    create: XOR<CoverageCreateWithoutProceduresInput, CoverageUncheckedCreateWithoutProceduresInput>
    where?: CoverageWhereInput
  }

  export type CoverageUpdateToOneWithWhereWithoutProceduresInput = {
    where?: CoverageWhereInput
    data: XOR<CoverageUpdateWithoutProceduresInput, CoverageUncheckedUpdateWithoutProceduresInput>
  }

  export type CoverageUpdateWithoutProceduresInput = {
    name?: StringFieldUpdateOperationsInput | string
    plans?: PlanCoverageUpdateManyWithoutCoverageNestedInput
  }

  export type CoverageUncheckedUpdateWithoutProceduresInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    plans?: PlanCoverageUncheckedUpdateManyWithoutCoverageNestedInput
  }

  export type ProcedureByPlanUpsertWithWhereUniqueWithoutProcedureInput = {
    where: ProcedureByPlanWhereUniqueInput
    update: XOR<ProcedureByPlanUpdateWithoutProcedureInput, ProcedureByPlanUncheckedUpdateWithoutProcedureInput>
    create: XOR<ProcedureByPlanCreateWithoutProcedureInput, ProcedureByPlanUncheckedCreateWithoutProcedureInput>
  }

  export type ProcedureByPlanUpdateWithWhereUniqueWithoutProcedureInput = {
    where: ProcedureByPlanWhereUniqueInput
    data: XOR<ProcedureByPlanUpdateWithoutProcedureInput, ProcedureByPlanUncheckedUpdateWithoutProcedureInput>
  }

  export type ProcedureByPlanUpdateManyWithWhereWithoutProcedureInput = {
    where: ProcedureByPlanScalarWhereInput
    data: XOR<ProcedureByPlanUpdateManyMutationInput, ProcedureByPlanUncheckedUpdateManyWithoutProcedureInput>
  }

  export type PolicyProcedureUpsertWithWhereUniqueWithoutProcedureInput = {
    where: PolicyProcedureWhereUniqueInput
    update: XOR<PolicyProcedureUpdateWithoutProcedureInput, PolicyProcedureUncheckedUpdateWithoutProcedureInput>
    create: XOR<PolicyProcedureCreateWithoutProcedureInput, PolicyProcedureUncheckedCreateWithoutProcedureInput>
  }

  export type PolicyProcedureUpdateWithWhereUniqueWithoutProcedureInput = {
    where: PolicyProcedureWhereUniqueInput
    data: XOR<PolicyProcedureUpdateWithoutProcedureInput, PolicyProcedureUncheckedUpdateWithoutProcedureInput>
  }

  export type PolicyProcedureUpdateManyWithWhereWithoutProcedureInput = {
    where: PolicyProcedureScalarWhereInput
    data: XOR<PolicyProcedureUpdateManyMutationInput, PolicyProcedureUncheckedUpdateManyWithoutProcedureInput>
  }

  export type ProcedureCreateWithoutProceduresByPlanInput = {
    name: string
    description: string
    coverage: CoverageCreateNestedOneWithoutProceduresInput
    policiesProcedure?: PolicyProcedureCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureUncheckedCreateWithoutProceduresByPlanInput = {
    id?: number
    name: string
    description: string
    coverageId: number
    policiesProcedure?: PolicyProcedureUncheckedCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureCreateOrConnectWithoutProceduresByPlanInput = {
    where: ProcedureWhereUniqueInput
    create: XOR<ProcedureCreateWithoutProceduresByPlanInput, ProcedureUncheckedCreateWithoutProceduresByPlanInput>
  }

  export type PlanCreateWithoutProceduresByPlanInput = {
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policies?: PolicyCreateNestedManyWithoutPlanInput
    coverages?: PlanCoverageCreateNestedManyWithoutPlanInput
  }

  export type PlanUncheckedCreateWithoutProceduresByPlanInput = {
    id?: number
    name: string
    description: string
    value: number
    createdAt?: Date | string
    updatedAt?: Date | string
    policies?: PolicyUncheckedCreateNestedManyWithoutPlanInput
    coverages?: PlanCoverageUncheckedCreateNestedManyWithoutPlanInput
  }

  export type PlanCreateOrConnectWithoutProceduresByPlanInput = {
    where: PlanWhereUniqueInput
    create: XOR<PlanCreateWithoutProceduresByPlanInput, PlanUncheckedCreateWithoutProceduresByPlanInput>
  }

  export type ProcedureUpsertWithoutProceduresByPlanInput = {
    update: XOR<ProcedureUpdateWithoutProceduresByPlanInput, ProcedureUncheckedUpdateWithoutProceduresByPlanInput>
    create: XOR<ProcedureCreateWithoutProceduresByPlanInput, ProcedureUncheckedCreateWithoutProceduresByPlanInput>
    where?: ProcedureWhereInput
  }

  export type ProcedureUpdateToOneWithWhereWithoutProceduresByPlanInput = {
    where?: ProcedureWhereInput
    data: XOR<ProcedureUpdateWithoutProceduresByPlanInput, ProcedureUncheckedUpdateWithoutProceduresByPlanInput>
  }

  export type ProcedureUpdateWithoutProceduresByPlanInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverage?: CoverageUpdateOneRequiredWithoutProceduresNestedInput
    policiesProcedure?: PolicyProcedureUpdateManyWithoutProcedureNestedInput
  }

  export type ProcedureUncheckedUpdateWithoutProceduresByPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverageId?: IntFieldUpdateOperationsInput | number
    policiesProcedure?: PolicyProcedureUncheckedUpdateManyWithoutProcedureNestedInput
  }

  export type PlanUpsertWithoutProceduresByPlanInput = {
    update: XOR<PlanUpdateWithoutProceduresByPlanInput, PlanUncheckedUpdateWithoutProceduresByPlanInput>
    create: XOR<PlanCreateWithoutProceduresByPlanInput, PlanUncheckedCreateWithoutProceduresByPlanInput>
    where?: PlanWhereInput
  }

  export type PlanUpdateToOneWithWhereWithoutProceduresByPlanInput = {
    where?: PlanWhereInput
    data: XOR<PlanUpdateWithoutProceduresByPlanInput, PlanUncheckedUpdateWithoutProceduresByPlanInput>
  }

  export type PlanUpdateWithoutProceduresByPlanInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policies?: PolicyUpdateManyWithoutPlanNestedInput
    coverages?: PlanCoverageUpdateManyWithoutPlanNestedInput
  }

  export type PlanUncheckedUpdateWithoutProceduresByPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    value?: FloatFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policies?: PolicyUncheckedUpdateManyWithoutPlanNestedInput
    coverages?: PlanCoverageUncheckedUpdateManyWithoutPlanNestedInput
  }

  export type PolicyCreateWithoutPolicyCoveragesInput = {
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    createdAt?: Date | string
    updatedAt?: Date | string
    pet: PetCreateNestedOneWithoutPolicyInput
    plan: PlanCreateNestedOneWithoutPoliciesInput
  }

  export type PolicyUncheckedCreateWithoutPolicyCoveragesInput = {
    id?: number
    petId: number
    microchipNumber?: string
    status: string
    initialGraceDate: Date | string
    renewalOfLimits: number
    planId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PolicyCreateOrConnectWithoutPolicyCoveragesInput = {
    where: PolicyWhereUniqueInput
    create: XOR<PolicyCreateWithoutPolicyCoveragesInput, PolicyUncheckedCreateWithoutPolicyCoveragesInput>
  }

  export type ProcedureCreateWithoutPoliciesProcedureInput = {
    name: string
    description: string
    coverage: CoverageCreateNestedOneWithoutProceduresInput
    proceduresByPlan?: ProcedureByPlanCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureUncheckedCreateWithoutPoliciesProcedureInput = {
    id?: number
    name: string
    description: string
    coverageId: number
    proceduresByPlan?: ProcedureByPlanUncheckedCreateNestedManyWithoutProcedureInput
  }

  export type ProcedureCreateOrConnectWithoutPoliciesProcedureInput = {
    where: ProcedureWhereUniqueInput
    create: XOR<ProcedureCreateWithoutPoliciesProcedureInput, ProcedureUncheckedCreateWithoutPoliciesProcedureInput>
  }

  export type PolicyUpsertWithoutPolicyCoveragesInput = {
    update: XOR<PolicyUpdateWithoutPolicyCoveragesInput, PolicyUncheckedUpdateWithoutPolicyCoveragesInput>
    create: XOR<PolicyCreateWithoutPolicyCoveragesInput, PolicyUncheckedCreateWithoutPolicyCoveragesInput>
    where?: PolicyWhereInput
  }

  export type PolicyUpdateToOneWithWhereWithoutPolicyCoveragesInput = {
    where?: PolicyWhereInput
    data: XOR<PolicyUpdateWithoutPolicyCoveragesInput, PolicyUncheckedUpdateWithoutPolicyCoveragesInput>
  }

  export type PolicyUpdateWithoutPolicyCoveragesInput = {
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pet?: PetUpdateOneRequiredWithoutPolicyNestedInput
    plan?: PlanUpdateOneRequiredWithoutPoliciesNestedInput
  }

  export type PolicyUncheckedUpdateWithoutPolicyCoveragesInput = {
    id?: IntFieldUpdateOperationsInput | number
    petId?: IntFieldUpdateOperationsInput | number
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcedureUpsertWithoutPoliciesProcedureInput = {
    update: XOR<ProcedureUpdateWithoutPoliciesProcedureInput, ProcedureUncheckedUpdateWithoutPoliciesProcedureInput>
    create: XOR<ProcedureCreateWithoutPoliciesProcedureInput, ProcedureUncheckedCreateWithoutPoliciesProcedureInput>
    where?: ProcedureWhereInput
  }

  export type ProcedureUpdateToOneWithWhereWithoutPoliciesProcedureInput = {
    where?: ProcedureWhereInput
    data: XOR<ProcedureUpdateWithoutPoliciesProcedureInput, ProcedureUncheckedUpdateWithoutPoliciesProcedureInput>
  }

  export type ProcedureUpdateWithoutPoliciesProcedureInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverage?: CoverageUpdateOneRequiredWithoutProceduresNestedInput
    proceduresByPlan?: ProcedureByPlanUpdateManyWithoutProcedureNestedInput
  }

  export type ProcedureUncheckedUpdateWithoutPoliciesProcedureInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    coverageId?: IntFieldUpdateOperationsInput | number
    proceduresByPlan?: ProcedureByPlanUncheckedUpdateManyWithoutProcedureNestedInput
  }

  export type UserCreateWithoutAccountInput = {
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    addresses?: AddressCreateNestedManyWithoutUserInput
    pets?: PetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountInput = {
    id?: number
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    addresses?: AddressUncheckedCreateNestedManyWithoutUserInput
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpsertWithWhereUniqueWithoutAccountInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
    create: XOR<UserCreateWithoutAccountInput, UserUncheckedCreateWithoutAccountInput>
  }

  export type UserUpdateWithWhereUniqueWithoutAccountInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutAccountInput, UserUncheckedUpdateWithoutAccountInput>
  }

  export type UserUpdateManyWithWhereWithoutAccountInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutAccountInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    accountId?: IntNullableFilter<"User"> | number | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
  }

  export type UserCreateWithoutAddressesInput = {
    name: string
    email: string
    password: string
    createdAt?: Date | string
    updatedAt?: Date | string
    account?: AccountCreateNestedOneWithoutUsersInput
    pets?: PetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAddressesInput = {
    id?: number
    name: string
    email: string
    password: string
    accountId?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    pets?: PetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAddressesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
  }

  export type UserUpsertWithoutAddressesInput = {
    update: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
    create: XOR<UserCreateWithoutAddressesInput, UserUncheckedCreateWithoutAddressesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAddressesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAddressesInput, UserUncheckedUpdateWithoutAddressesInput>
  }

  export type UserUpdateWithoutAddressesInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    account?: AccountUpdateOneWithoutUsersNestedInput
    pets?: PetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAddressesInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    accountId?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AddressUpdateWithoutUserInput = {
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AddressUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    street?: StringFieldUpdateOperationsInput | string
    number?: StringFieldUpdateOperationsInput | string
    complement?: NullableStringFieldUpdateOperationsInput | string | null
    neighborhood?: StringFieldUpdateOperationsInput | string
    zipcode?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    state?: StringFieldUpdateOperationsInput | string
    addressType?: StringFieldUpdateOperationsInput | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PetUpdateWithoutUserInput = {
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policy?: PolicyUpdateOneWithoutPetNestedInput
  }

  export type PetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policy?: PolicyUncheckedUpdateOneWithoutPetNestedInput
  }

  export type PetUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    type?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    breed?: StringFieldUpdateOperationsInput | string
    birthDate?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PolicyProcedureUpdateWithoutPolicyInput = {
    used?: IntFieldUpdateOperationsInput | number
    procedure?: ProcedureUpdateOneRequiredWithoutPoliciesProcedureNestedInput
  }

  export type PolicyProcedureUncheckedUpdateWithoutPolicyInput = {
    id?: IntFieldUpdateOperationsInput | number
    procedureId?: IntFieldUpdateOperationsInput | number
    used?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyProcedureUncheckedUpdateManyWithoutPolicyInput = {
    id?: IntFieldUpdateOperationsInput | number
    procedureId?: IntFieldUpdateOperationsInput | number
    used?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyUpdateWithoutPlanInput = {
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    pet?: PetUpdateOneRequiredWithoutPolicyNestedInput
    policyCoverages?: PolicyProcedureUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    petId?: IntFieldUpdateOperationsInput | number
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    policyCoverages?: PolicyProcedureUncheckedUpdateManyWithoutPolicyNestedInput
  }

  export type PolicyUncheckedUpdateManyWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    petId?: IntFieldUpdateOperationsInput | number
    microchipNumber?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    initialGraceDate?: DateTimeFieldUpdateOperationsInput | Date | string
    renewalOfLimits?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProcedureByPlanUpdateWithoutPlanInput = {
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    procedure?: ProcedureUpdateOneRequiredWithoutProceduresByPlanNestedInput
  }

  export type ProcedureByPlanUncheckedUpdateWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    procedureId?: IntFieldUpdateOperationsInput | number
  }

  export type ProcedureByPlanUncheckedUpdateManyWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    procedureId?: IntFieldUpdateOperationsInput | number
  }

  export type PlanCoverageUpdateWithoutPlanInput = {
    coverage?: CoverageUpdateOneRequiredWithoutPlansNestedInput
  }

  export type PlanCoverageUncheckedUpdateWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    coverageId?: IntFieldUpdateOperationsInput | number
  }

  export type PlanCoverageUncheckedUpdateManyWithoutPlanInput = {
    id?: IntFieldUpdateOperationsInput | number
    coverageId?: IntFieldUpdateOperationsInput | number
  }

  export type PlanCoverageUpdateWithoutCoverageInput = {
    plan?: PlanUpdateOneRequiredWithoutCoveragesNestedInput
  }

  export type PlanCoverageUncheckedUpdateWithoutCoverageInput = {
    id?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
  }

  export type PlanCoverageUncheckedUpdateManyWithoutCoverageInput = {
    id?: IntFieldUpdateOperationsInput | number
    planId?: IntFieldUpdateOperationsInput | number
  }

  export type ProcedureUpdateWithoutCoverageInput = {
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    proceduresByPlan?: ProcedureByPlanUpdateManyWithoutProcedureNestedInput
    policiesProcedure?: PolicyProcedureUpdateManyWithoutProcedureNestedInput
  }

  export type ProcedureUncheckedUpdateWithoutCoverageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    proceduresByPlan?: ProcedureByPlanUncheckedUpdateManyWithoutProcedureNestedInput
    policiesProcedure?: PolicyProcedureUncheckedUpdateManyWithoutProcedureNestedInput
  }

  export type ProcedureUncheckedUpdateManyWithoutCoverageInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type ProcedureByPlanUpdateWithoutProcedureInput = {
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    plan?: PlanUpdateOneRequiredWithoutProceduresByPlanNestedInput
  }

  export type ProcedureByPlanUncheckedUpdateWithoutProcedureInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    planId?: IntFieldUpdateOperationsInput | number
  }

  export type ProcedureByPlanUncheckedUpdateManyWithoutProcedureInput = {
    id?: IntFieldUpdateOperationsInput | number
    availableLimit?: StringFieldUpdateOperationsInput | string
    share?: FloatFieldUpdateOperationsInput | number
    valueToAnticipate?: NullableFloatFieldUpdateOperationsInput | number | null
    planId?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyProcedureUpdateWithoutProcedureInput = {
    used?: IntFieldUpdateOperationsInput | number
    policy?: PolicyUpdateOneRequiredWithoutPolicyCoveragesNestedInput
  }

  export type PolicyProcedureUncheckedUpdateWithoutProcedureInput = {
    id?: IntFieldUpdateOperationsInput | number
    policyId?: IntFieldUpdateOperationsInput | number
    used?: IntFieldUpdateOperationsInput | number
  }

  export type PolicyProcedureUncheckedUpdateManyWithoutProcedureInput = {
    id?: IntFieldUpdateOperationsInput | number
    policyId?: IntFieldUpdateOperationsInput | number
    used?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutAccountInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addresses?: AddressUpdateManyWithoutUserNestedInput
    pets?: PetUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    addresses?: AddressUncheckedUpdateManyWithoutUserNestedInput
    pets?: PetUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutAccountInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PolicyCountOutputTypeDefaultArgs instead
     */
    export type PolicyCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PolicyCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanCountOutputTypeDefaultArgs instead
     */
    export type PlanCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoverageCountOutputTypeDefaultArgs instead
     */
    export type CoverageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoverageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcedureCountOutputTypeDefaultArgs instead
     */
    export type ProcedureCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcedureCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountCountOutputTypeDefaultArgs instead
     */
    export type AccountCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PetDefaultArgs instead
     */
    export type PetArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PetDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PolicyDefaultArgs instead
     */
    export type PolicyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PolicyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanDefaultArgs instead
     */
    export type PlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PlanCoverageDefaultArgs instead
     */
    export type PlanCoverageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PlanCoverageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CoverageDefaultArgs instead
     */
    export type CoverageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CoverageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcedureDefaultArgs instead
     */
    export type ProcedureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcedureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProcedureByPlanDefaultArgs instead
     */
    export type ProcedureByPlanArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProcedureByPlanDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PolicyProcedureDefaultArgs instead
     */
    export type PolicyProcedureArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PolicyProcedureDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}