// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id Int @default(autoincrement()) @id
  name String
  email String @unique
  password String
  account Account? @relation(fields: [accountId], references: [id], onDelete: SetNull )
  accountId Int?
  addresses Address[]
  pets Pet[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pet {
  id Int @default(autoincrement()) @id
  type String
  name String
  breed String
  birthDate DateTime
  user User @relation(fields: [userId], references: [id])
  userId Int
  policy Policy?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Policy {
  id Int @default(autoincrement()) @id
  pet Pet @relation(fields: [petId], references: [id])
  petId Int @unique
  microchipNumber String @default(uuid())
  status String
  initialGraceDate DateTime
  renewalOfLimits Int
  plan Plan @relation(fields: [planId], references: [id])
  planId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  policyCoverages PolicyProcedure[]
}

model Plan {
  id Int @default(autoincrement()) @id
  name String
  description String
  value Float
  policies Policy[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  proceduresByPlan ProcedureByPlan[]
  coverages PlanCoverage[]
}

model PlanCoverage {
  id Int @default(autoincrement()) @id
  planId Int
  plan Plan @relation(fields: [planId], references: [id])
  coverageId Int
  coverage Coverage @relation(fields: [coverageId], references: [id])
}

model Coverage {
  id Int @default(autoincrement()) @id
  name String
  plans PlanCoverage[]
  procedures Procedure[]
}

model Procedure {
  id Int @default(autoincrement()) @id
  name String
  description String
  coverageId Int
  coverage Coverage @relation(fields: [coverageId], references: [id])
  proceduresByPlan ProcedureByPlan[]
  policiesProcedure PolicyProcedure[]
}

model ProcedureByPlan {
  id Int @default(autoincrement()) @id
  availableLimit String
  share Float
  valueToAnticipate Float?
  procedureId Int
  procedure Procedure @relation(fields: [procedureId], references: [id])
  planId Int
  plan Plan @relation(fields: [planId], references: [id])
}

model PolicyProcedure {
  id Int @default(autoincrement()) @id
  policyId Int
  policy Policy @relation(fields: [policyId], references: [id])
  procedureId Int
  procedure Procedure @relation(fields: [procedureId], references: [id])
  used Int
}

model Account {
  id Int @default(autoincrement()) @id
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users User[]
}

model Address {
  id Int @default(autoincrement()) @id
  street String
  number String
  complement String?
  neighborhood String
  zipcode String
  city String
  state String
  addressType String
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  userId Int?
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
}
